Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> addP PROGRAM ID SEMICOLON programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT actual_type
Rule 9     tipo -> FLOAT actual_type
Rule 10    tipo -> CHAR actual_type
Rule 11    actual_type -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1
Rule 19    var1 -> ID mat COMMA var1
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    var2 -> var2 tipo var1 SEMICOLON
Rule 24    var2 -> var2 tipo arr SEMICOLON
Rule 25    var2 -> var2 tipo mat SEMICOLON
Rule 26    var2 -> empty
Rule 27    especial -> TRANSPUESTA
Rule 28    especial -> INVERSA
Rule 29    especial -> DETERMINANTE
Rule 30    arr -> LBRACKET CTEI RBRACKET
Rule 31    arr -> LBRACKET exp RBRACKET
Rule 32    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 34    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 35    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 36    modules -> function modules
Rule 37    modules -> empty
Rule 38    function -> FUN VOID function1
Rule 39    function -> FUN tipo function2
Rule 40    function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 41    function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 42    statement -> statement1 statement
Rule 43    statement -> empty
Rule 44    statement1 -> asignacion SEMICOLON
Rule 45    statement1 -> llamada SEMICOLON
Rule 46    statement1 -> lectura SEMICOLON
Rule 47    statement1 -> escritura SEMICOLON
Rule 48    statement1 -> for
Rule 49    statement1 -> if
Rule 50    statement1 -> while
Rule 51    asignacion -> ID EQUALS exp
Rule 52    asignacion -> ID arr EQUALS exp
Rule 53    asignacion -> ID mat EQUALS exp
Rule 54    param -> tipo param1
Rule 55    param -> empty
Rule 56    param1 -> ID
Rule 57    param1 -> ID COMMA param1
Rule 58    param1 -> empty
Rule 59    llamada -> ID LPAREN exp RPAREN
Rule 60    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY
Rule 61    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else
Rule 62    else -> ELSE LCURLY statement RCURLY
Rule 63    else -> empty
Rule 64    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 65    for1 -> FROM asignacion TO exp
Rule 66    while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY
Rule 67    escritura -> PRINT LPAREN escritura1 RPAREN
Rule 68    escritura1 -> escritura2 COMMA escritura2
Rule 69    escritura1 -> escritura2
Rule 70    escritura2 -> CTESTRING
Rule 71    escritura2 -> CTEI
Rule 72    escritura2 -> CTEF
Rule 73    escritura2 -> exp
Rule 74    lectura -> READ LPAREN var1 RPAREN
Rule 75    exp -> nexp
Rule 76    exp -> nexp OR nexp
Rule 77    nexp -> compexp
Rule 78    nexp -> compexp AND compexp
Rule 79    compexp -> sumexp
Rule 80    compexp -> compexp1 sumexp
Rule 81    compexp1 -> sumexp GT sumexp
Rule 82    compexp1 -> sumexp LT sumexp
Rule 83    compexp1 -> sumexp GTE sumexp
Rule 84    compexp1 -> sumexp LTE sumexp
Rule 85    compexp1 -> sumexp NE sumexp
Rule 86    sumexp -> mulexp
Rule 87    sumexp -> mulexp PLUS mulexp
Rule 88    sumexp -> mulexp MINUS mulexp
Rule 89    mulexp -> pexp
Rule 90    mulexp -> pexp MUL pexp
Rule 91    mulexp -> pexp DIV pexp
Rule 92    pexp -> var1
Rule 93    pexp -> CTEI
Rule 94    pexp -> CTEF
Rule 95    pexp -> CTEC
Rule 96    pexp -> llamada
Rule 97    pexp -> LPAREN exp RPAREN
Rule 98    empty -> <empty>

Terminals, with rules where they appear

AND                  : 78
CHAR                 : 10
COMILLA              : 
COMMA                : 16 18 19 57 68
CTEC                 : 95
CTEF                 : 72 94
CTEI                 : 30 32 32 34 35 71 93
CTESTRING            : 70
DETERMINANTE         : 29
DIV                  : 91
ELSE                 : 62
END                  : 7
EQUALS               : 51 52 53
FLOAT                : 9
FOR                  : 64
FROM                 : 65
FUN                  : 38 39
GT                   : 81
GTE                  : 83
ID                   : 1 15 16 17 18 19 20 21 40 41 51 52 53 56 57 59
IF                   : 60 61
INT                  : 8
INVERSA              : 28
LBRACKET             : 30 31 32 32 33 33 34 34 35 35
LCURLY               : 7 40 41 60 61 62 64 66
LPAREN               : 7 40 41 59 60 61 64 66 67 74 97
LT                   : 82
LTE                  : 84
MAIN                 : 7
MINUS                : 88
MUL                  : 90
NE                   : 85
OR                   : 76
PLUS                 : 87
PRINT                : 67
PROGRAM              : 1
RBRACKET             : 30 31 32 32 33 33 34 34 35 35
RCURLY               : 7 40 41 60 61 62 64 66
READ                 : 74
RETURN               : 41
RPAREN               : 7 40 41 59 60 61 64 66 67 74 97
SEMICOLON            : 1 23 24 25 40 41 41 44 45 46 47
TO                   : 65
TRANSPUESTA          : 27
VAR                  : 14
VOID                 : 38
WHILE                : 66
error                : 

Nonterminals, with rules where they appear

actual_type          : 8 9 10
addP                 : 1
arr                  : 17 18 24 52
asignacion           : 44 65
compexp              : 77 78 78
compexp1             : 80
else                 : 61
empty                : 13 22 26 37 43 55 58 63
escritura            : 47
escritura1           : 67
escritura2           : 68 68 69
especial             : 21
exp                  : 31 33 33 34 35 41 51 52 53 59 60 61 65 66 73 97
for                  : 48
for1                 : 64
function             : 36
function1            : 38
function2            : 39
if                   : 49
lectura              : 46
llamada              : 45 96
main                 : 6
mat                  : 19 20 21 25 53
modules              : 3 4 36
mulexp               : 86 87 87 88 88
nexp                 : 75 76 76
param                : 7 40 41
param1               : 54 57
pexp                 : 89 90 90 91 91
programa             : 0
programa1            : 1
programa2            : 3 5
statement            : 7 40 41 42 60 61 62 64 66
statement1           : 42
sumexp               : 79 80 81 81 82 82 83 83 84 84 85 85
tipo                 : 23 24 25 39 54
var                  : 12
var1                 : 16 18 19 23 74 92
var2                 : 14 23 24 25
vars                 : 3 4 7 40 41
while                : 50

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . addP PROGRAM ID SEMICOLON programa1
    (2) addP -> .

    PROGRAM         reduce using rule 2 (addP -> .)

    programa                       shift and go to state 1
    addP                           shift and go to state 2

state 1

    (0) S' -> programa .



state 2

    (1) programa -> addP . PROGRAM ID SEMICOLON programa1

    PROGRAM         shift and go to state 3


state 3

    (1) programa -> addP PROGRAM . ID SEMICOLON programa1

    ID              shift and go to state 4


state 4

    (1) programa -> addP PROGRAM ID . SEMICOLON programa1

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> addP PROGRAM ID SEMICOLON . programa1
    (3) programa1 -> . vars modules programa2
    (4) programa1 -> . vars modules
    (5) programa1 -> . programa2
    (12) vars -> . var
    (13) vars -> . empty
    (6) programa2 -> . main
    (14) var -> . VAR var2
    (98) empty -> .
    (7) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 98 (empty -> .)
    $end            reduce using rule 98 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 98 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> addP PROGRAM ID SEMICOLON programa1 .

    $end            reduce using rule 1 (programa -> addP PROGRAM ID SEMICOLON programa1 .)


state 7

    (3) programa1 -> vars . modules programa2
    (4) programa1 -> vars . modules
    (36) modules -> . function modules
    (37) modules -> . empty
    (38) function -> . FUN VOID function1
    (39) function -> . FUN tipo function2
    (98) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 98 (empty -> .)
    $end            reduce using rule 98 (empty -> .)

    modules                        shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (12) vars -> var .

    FUN             reduce using rule 12 (vars -> var .)
    MAIN            reduce using rule 12 (vars -> var .)
    $end            reduce using rule 12 (vars -> var .)
    ID              reduce using rule 12 (vars -> var .)
    READ            reduce using rule 12 (vars -> var .)
    PRINT           reduce using rule 12 (vars -> var .)
    FOR             reduce using rule 12 (vars -> var .)
    IF              reduce using rule 12 (vars -> var .)
    WHILE           reduce using rule 12 (vars -> var .)
    RCURLY          reduce using rule 12 (vars -> var .)
    RETURN          reduce using rule 12 (vars -> var .)


state 10

    (13) vars -> empty .

    FUN             reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    $end            reduce using rule 13 (vars -> empty .)
    ID              reduce using rule 13 (vars -> empty .)
    READ            reduce using rule 13 (vars -> empty .)
    PRINT           reduce using rule 13 (vars -> empty .)
    FOR             reduce using rule 13 (vars -> empty .)
    IF              reduce using rule 13 (vars -> empty .)
    WHILE           reduce using rule 13 (vars -> empty .)
    RCURLY          reduce using rule 13 (vars -> empty .)
    RETURN          reduce using rule 13 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (14) var -> VAR . var2
    (23) var2 -> . var2 tipo var1 SEMICOLON
    (24) var2 -> . var2 tipo arr SEMICOLON
    (25) var2 -> . var2 tipo mat SEMICOLON
    (26) var2 -> . empty
    (98) empty -> .

    INT             reduce using rule 98 (empty -> .)
    FLOAT           reduce using rule 98 (empty -> .)
    CHAR            reduce using rule 98 (empty -> .)
    FUN             reduce using rule 98 (empty -> .)
    MAIN            reduce using rule 98 (empty -> .)
    $end            reduce using rule 98 (empty -> .)
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    RCURLY          reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)

    var2                           shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) main -> MAIN . LPAREN param RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 20


state 14

    (3) programa1 -> vars modules . programa2
    (4) programa1 -> vars modules .
    (6) programa2 -> . main
    (7) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 21
    main                           shift and go to state 11

state 15

    (36) modules -> function . modules
    (36) modules -> . function modules
    (37) modules -> . empty
    (38) function -> . FUN VOID function1
    (39) function -> . FUN tipo function2
    (98) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 98 (empty -> .)
    $end            reduce using rule 98 (empty -> .)

    function                       shift and go to state 15
    modules                        shift and go to state 22
    empty                          shift and go to state 16

state 16

    (37) modules -> empty .

    MAIN            reduce using rule 37 (modules -> empty .)
    $end            reduce using rule 37 (modules -> empty .)


state 17

    (38) function -> FUN . VOID function1
    (39) function -> FUN . tipo function2
    (8) tipo -> . INT actual_type
    (9) tipo -> . FLOAT actual_type
    (10) tipo -> . CHAR actual_type

    VOID            shift and go to state 23
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    tipo                           shift and go to state 24

state 18

    (14) var -> VAR var2 .
    (23) var2 -> var2 . tipo var1 SEMICOLON
    (24) var2 -> var2 . tipo arr SEMICOLON
    (25) var2 -> var2 . tipo mat SEMICOLON
    (8) tipo -> . INT actual_type
    (9) tipo -> . FLOAT actual_type
    (10) tipo -> . CHAR actual_type

    FUN             reduce using rule 14 (var -> VAR var2 .)
    MAIN            reduce using rule 14 (var -> VAR var2 .)
    $end            reduce using rule 14 (var -> VAR var2 .)
    ID              reduce using rule 14 (var -> VAR var2 .)
    READ            reduce using rule 14 (var -> VAR var2 .)
    PRINT           reduce using rule 14 (var -> VAR var2 .)
    FOR             reduce using rule 14 (var -> VAR var2 .)
    IF              reduce using rule 14 (var -> VAR var2 .)
    WHILE           reduce using rule 14 (var -> VAR var2 .)
    RCURLY          reduce using rule 14 (var -> VAR var2 .)
    RETURN          reduce using rule 14 (var -> VAR var2 .)
    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27

    tipo                           shift and go to state 28

state 19

    (26) var2 -> empty .

    INT             reduce using rule 26 (var2 -> empty .)
    FLOAT           reduce using rule 26 (var2 -> empty .)
    CHAR            reduce using rule 26 (var2 -> empty .)
    FUN             reduce using rule 26 (var2 -> empty .)
    MAIN            reduce using rule 26 (var2 -> empty .)
    $end            reduce using rule 26 (var2 -> empty .)
    ID              reduce using rule 26 (var2 -> empty .)
    READ            reduce using rule 26 (var2 -> empty .)
    PRINT           reduce using rule 26 (var2 -> empty .)
    FOR             reduce using rule 26 (var2 -> empty .)
    IF              reduce using rule 26 (var2 -> empty .)
    WHILE           reduce using rule 26 (var2 -> empty .)
    RCURLY          reduce using rule 26 (var2 -> empty .)
    RETURN          reduce using rule 26 (var2 -> empty .)


state 20

    (7) main -> MAIN LPAREN . param RPAREN LCURLY vars statement RCURLY END
    (54) param -> . tipo param1
    (55) param -> . empty
    (8) tipo -> . INT actual_type
    (9) tipo -> . FLOAT actual_type
    (10) tipo -> . CHAR actual_type
    (98) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    RPAREN          reduce using rule 98 (empty -> .)

    param                          shift and go to state 29
    tipo                           shift and go to state 30
    empty                          shift and go to state 31

state 21

    (3) programa1 -> vars modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars modules programa2 .)


state 22

    (36) modules -> function modules .

    MAIN            reduce using rule 36 (modules -> function modules .)
    $end            reduce using rule 36 (modules -> function modules .)


state 23

    (38) function -> FUN VOID . function1
    (40) function1 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 33

    function1                      shift and go to state 32

state 24

    (39) function -> FUN tipo . function2
    (41) function2 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 34

state 25

    (8) tipo -> INT . actual_type
    (11) actual_type -> .

    ID              reduce using rule 11 (actual_type -> .)
    LBRACKET        reduce using rule 11 (actual_type -> .)
    SEMICOLON       reduce using rule 11 (actual_type -> .)
    RPAREN          reduce using rule 11 (actual_type -> .)

    actual_type                    shift and go to state 36

state 26

    (9) tipo -> FLOAT . actual_type
    (11) actual_type -> .

    ID              reduce using rule 11 (actual_type -> .)
    LBRACKET        reduce using rule 11 (actual_type -> .)
    SEMICOLON       reduce using rule 11 (actual_type -> .)
    RPAREN          reduce using rule 11 (actual_type -> .)

    actual_type                    shift and go to state 37

state 27

    (10) tipo -> CHAR . actual_type
    (11) actual_type -> .

    ID              reduce using rule 11 (actual_type -> .)
    LBRACKET        reduce using rule 11 (actual_type -> .)
    SEMICOLON       reduce using rule 11 (actual_type -> .)
    RPAREN          reduce using rule 11 (actual_type -> .)

    actual_type                    shift and go to state 38

state 28

    (23) var2 -> var2 tipo . var1 SEMICOLON
    (24) var2 -> var2 tipo . arr SEMICOLON
    (25) var2 -> var2 tipo . mat SEMICOLON
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (98) empty -> .

    ID              shift and go to state 42
    LBRACKET        shift and go to state 44
    SEMICOLON       reduce using rule 98 (empty -> .)

    var1                           shift and go to state 39
    arr                            shift and go to state 40
    mat                            shift and go to state 41
    empty                          shift and go to state 43

state 29

    (7) main -> MAIN LPAREN param . RPAREN LCURLY vars statement RCURLY END

    RPAREN          shift and go to state 45


state 30

    (54) param -> tipo . param1
    (56) param1 -> . ID
    (57) param1 -> . ID COMMA param1
    (58) param1 -> . empty
    (98) empty -> .

    ID              shift and go to state 47
    RPAREN          reduce using rule 98 (empty -> .)

    param1                         shift and go to state 46
    empty                          shift and go to state 48

state 31

    (55) param -> empty .

    RPAREN          reduce using rule 55 (param -> empty .)


state 32

    (38) function -> FUN VOID function1 .

    FUN             reduce using rule 38 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 38 (function -> FUN VOID function1 .)
    $end            reduce using rule 38 (function -> FUN VOID function1 .)


state 33

    (40) function1 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 49


state 34

    (39) function -> FUN tipo function2 .

    FUN             reduce using rule 39 (function -> FUN tipo function2 .)
    MAIN            reduce using rule 39 (function -> FUN tipo function2 .)
    $end            reduce using rule 39 (function -> FUN tipo function2 .)


state 35

    (41) function2 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LPAREN          shift and go to state 50


state 36

    (8) tipo -> INT actual_type .

    ID              reduce using rule 8 (tipo -> INT actual_type .)
    LBRACKET        reduce using rule 8 (tipo -> INT actual_type .)
    SEMICOLON       reduce using rule 8 (tipo -> INT actual_type .)
    RPAREN          reduce using rule 8 (tipo -> INT actual_type .)


state 37

    (9) tipo -> FLOAT actual_type .

    ID              reduce using rule 9 (tipo -> FLOAT actual_type .)
    LBRACKET        reduce using rule 9 (tipo -> FLOAT actual_type .)
    SEMICOLON       reduce using rule 9 (tipo -> FLOAT actual_type .)
    RPAREN          reduce using rule 9 (tipo -> FLOAT actual_type .)


state 38

    (10) tipo -> CHAR actual_type .

    ID              reduce using rule 10 (tipo -> CHAR actual_type .)
    LBRACKET        reduce using rule 10 (tipo -> CHAR actual_type .)
    SEMICOLON       reduce using rule 10 (tipo -> CHAR actual_type .)
    RPAREN          reduce using rule 10 (tipo -> CHAR actual_type .)


state 39

    (23) var2 -> var2 tipo var1 . SEMICOLON

    SEMICOLON       shift and go to state 51


state 40

    (24) var2 -> var2 tipo arr . SEMICOLON

    SEMICOLON       shift and go to state 52


state 41

    (25) var2 -> var2 tipo mat . SEMICOLON

    SEMICOLON       shift and go to state 53


state 42

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1
    (19) var1 -> ID . mat COMMA var1
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 54
    LBRACKET        shift and go to state 44

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 55
    mat                            shift and go to state 56

state 43

    (22) var1 -> empty .

    SEMICOLON       reduce using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    RBRACKET        reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)
    TO              reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    CTEI            reduce using rule 22 (var1 -> empty .)
    CTEF            reduce using rule 22 (var1 -> empty .)
    CTEC            reduce using rule 22 (var1 -> empty .)
    LPAREN          reduce using rule 22 (var1 -> empty .)
    ID              reduce using rule 22 (var1 -> empty .)


state 44

    (30) arr -> LBRACKET . CTEI RBRACKET
    (31) arr -> LBRACKET . exp RBRACKET
    (32) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 57
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)

    exp                            shift and go to state 58
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 45

    (7) main -> MAIN LPAREN param RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 71


state 46

    (54) param -> tipo param1 .

    RPAREN          reduce using rule 54 (param -> tipo param1 .)


state 47

    (56) param1 -> ID .
    (57) param1 -> ID . COMMA param1

    RPAREN          reduce using rule 56 (param1 -> ID .)
    COMMA           shift and go to state 72


state 48

    (58) param1 -> empty .

    RPAREN          reduce using rule 58 (param1 -> empty .)


state 49

    (40) function1 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RCURLY
    (54) param -> . tipo param1
    (55) param -> . empty
    (8) tipo -> . INT actual_type
    (9) tipo -> . FLOAT actual_type
    (10) tipo -> . CHAR actual_type
    (98) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    RPAREN          reduce using rule 98 (empty -> .)

    param                          shift and go to state 73
    tipo                           shift and go to state 30
    empty                          shift and go to state 31

state 50

    (41) function2 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (54) param -> . tipo param1
    (55) param -> . empty
    (8) tipo -> . INT actual_type
    (9) tipo -> . FLOAT actual_type
    (10) tipo -> . CHAR actual_type
    (98) empty -> .

    INT             shift and go to state 25
    FLOAT           shift and go to state 26
    CHAR            shift and go to state 27
    RPAREN          reduce using rule 98 (empty -> .)

    param                          shift and go to state 74
    tipo                           shift and go to state 30
    empty                          shift and go to state 31

state 51

    (23) var2 -> var2 tipo var1 SEMICOLON .

    INT             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    FLOAT           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    CHAR            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    FUN             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    MAIN            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    $end            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    ID              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    READ            reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    PRINT           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    FOR             reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    IF              reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    WHILE           reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    RCURLY          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)
    RETURN          reduce using rule 23 (var2 -> var2 tipo var1 SEMICOLON .)


state 52

    (24) var2 -> var2 tipo arr SEMICOLON .

    INT             reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    FLOAT           reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    CHAR            reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    FUN             reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    MAIN            reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    $end            reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    ID              reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    READ            reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    PRINT           reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    FOR             reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    IF              reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    WHILE           reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    RCURLY          reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)
    RETURN          reduce using rule 24 (var2 -> var2 tipo arr SEMICOLON .)


state 53

    (25) var2 -> var2 tipo mat SEMICOLON .

    INT             reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    FLOAT           reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    CHAR            reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    FUN             reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    MAIN            reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    $end            reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    ID              reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    READ            reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    PRINT           reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    FOR             reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    IF              reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    WHILE           reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    RCURLY          reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)
    RETURN          reduce using rule 25 (var2 -> var2 tipo mat SEMICOLON .)


state 54

    (16) var1 -> ID COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (98) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 42
    SEMICOLON       reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    CTEI            reduce using rule 98 (empty -> .)
    CTEF            reduce using rule 98 (empty -> .)
    CTEC            reduce using rule 98 (empty -> .)
    LPAREN          reduce using rule 98 (empty -> .)

  ! ID              [ reduce using rule 98 (empty -> .) ]

    var1                           shift and go to state 75
    empty                          shift and go to state 43

state 55

    (17) var1 -> ID arr .
    (18) var1 -> ID arr . COMMA var1

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID arr .)
    MUL             reduce using rule 17 (var1 -> ID arr .)
    DIV             reduce using rule 17 (var1 -> ID arr .)
    PLUS            reduce using rule 17 (var1 -> ID arr .)
    MINUS           reduce using rule 17 (var1 -> ID arr .)
    GT              reduce using rule 17 (var1 -> ID arr .)
    LT              reduce using rule 17 (var1 -> ID arr .)
    GTE             reduce using rule 17 (var1 -> ID arr .)
    LTE             reduce using rule 17 (var1 -> ID arr .)
    NE              reduce using rule 17 (var1 -> ID arr .)
    AND             reduce using rule 17 (var1 -> ID arr .)
    OR              reduce using rule 17 (var1 -> ID arr .)
    RBRACKET        reduce using rule 17 (var1 -> ID arr .)
    RPAREN          reduce using rule 17 (var1 -> ID arr .)
    TO              reduce using rule 17 (var1 -> ID arr .)
    CTEI            reduce using rule 17 (var1 -> ID arr .)
    CTEF            reduce using rule 17 (var1 -> ID arr .)
    CTEC            reduce using rule 17 (var1 -> ID arr .)
    LPAREN          reduce using rule 17 (var1 -> ID arr .)
    ID              reduce using rule 17 (var1 -> ID arr .)
    COMMA           shift and go to state 76

  ! COMMA           [ reduce using rule 17 (var1 -> ID arr .) ]


state 56

    (19) var1 -> ID mat . COMMA var1
    (20) var1 -> ID mat .
    (21) var1 -> ID mat . especial
    (27) especial -> . TRANSPUESTA
    (28) especial -> . INVERSA
    (29) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 77
    SEMICOLON       reduce using rule 20 (var1 -> ID mat .)
    MUL             reduce using rule 20 (var1 -> ID mat .)
    DIV             reduce using rule 20 (var1 -> ID mat .)
    PLUS            reduce using rule 20 (var1 -> ID mat .)
    MINUS           reduce using rule 20 (var1 -> ID mat .)
    GT              reduce using rule 20 (var1 -> ID mat .)
    LT              reduce using rule 20 (var1 -> ID mat .)
    GTE             reduce using rule 20 (var1 -> ID mat .)
    LTE             reduce using rule 20 (var1 -> ID mat .)
    NE              reduce using rule 20 (var1 -> ID mat .)
    AND             reduce using rule 20 (var1 -> ID mat .)
    OR              reduce using rule 20 (var1 -> ID mat .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat .)
    RPAREN          reduce using rule 20 (var1 -> ID mat .)
    TO              reduce using rule 20 (var1 -> ID mat .)
    CTEI            reduce using rule 20 (var1 -> ID mat .)
    CTEF            reduce using rule 20 (var1 -> ID mat .)
    CTEC            reduce using rule 20 (var1 -> ID mat .)
    LPAREN          reduce using rule 20 (var1 -> ID mat .)
    ID              reduce using rule 20 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 79
    INVERSA         shift and go to state 80
    DETERMINANTE    shift and go to state 81

  ! COMMA           [ reduce using rule 20 (var1 -> ID mat .) ]

    especial                       shift and go to state 78

state 57

    (30) arr -> LBRACKET CTEI . RBRACKET
    (32) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (93) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 82
    MUL             reduce using rule 93 (pexp -> CTEI .)
    DIV             reduce using rule 93 (pexp -> CTEI .)
    PLUS            reduce using rule 93 (pexp -> CTEI .)
    MINUS           reduce using rule 93 (pexp -> CTEI .)
    GT              reduce using rule 93 (pexp -> CTEI .)
    LT              reduce using rule 93 (pexp -> CTEI .)
    GTE             reduce using rule 93 (pexp -> CTEI .)
    LTE             reduce using rule 93 (pexp -> CTEI .)
    NE              reduce using rule 93 (pexp -> CTEI .)
    AND             reduce using rule 93 (pexp -> CTEI .)
    OR              reduce using rule 93 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 93 (pexp -> CTEI .) ]


state 58

    (31) arr -> LBRACKET exp . RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (34) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 83


state 59

    (75) exp -> nexp .
    (76) exp -> nexp . OR nexp

    RBRACKET        reduce using rule 75 (exp -> nexp .)
    RPAREN          reduce using rule 75 (exp -> nexp .)
    SEMICOLON       reduce using rule 75 (exp -> nexp .)
    TO              reduce using rule 75 (exp -> nexp .)
    COMMA           reduce using rule 75 (exp -> nexp .)
    OR              shift and go to state 84


state 60

    (77) nexp -> compexp .
    (78) nexp -> compexp . AND compexp

    OR              reduce using rule 77 (nexp -> compexp .)
    RBRACKET        reduce using rule 77 (nexp -> compexp .)
    RPAREN          reduce using rule 77 (nexp -> compexp .)
    SEMICOLON       reduce using rule 77 (nexp -> compexp .)
    TO              reduce using rule 77 (nexp -> compexp .)
    COMMA           reduce using rule 77 (nexp -> compexp .)
    AND             shift and go to state 85


state 61

    (79) compexp -> sumexp .
    (81) compexp1 -> sumexp . GT sumexp
    (82) compexp1 -> sumexp . LT sumexp
    (83) compexp1 -> sumexp . GTE sumexp
    (84) compexp1 -> sumexp . LTE sumexp
    (85) compexp1 -> sumexp . NE sumexp

    AND             reduce using rule 79 (compexp -> sumexp .)
    OR              reduce using rule 79 (compexp -> sumexp .)
    RBRACKET        reduce using rule 79 (compexp -> sumexp .)
    RPAREN          reduce using rule 79 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 79 (compexp -> sumexp .)
    TO              reduce using rule 79 (compexp -> sumexp .)
    COMMA           reduce using rule 79 (compexp -> sumexp .)
    GT              shift and go to state 86
    LT              shift and go to state 87
    GTE             shift and go to state 88
    LTE             shift and go to state 89
    NE              shift and go to state 90


state 62

    (80) compexp -> compexp1 . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

    sumexp                         shift and go to state 91
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 63

    (86) sumexp -> mulexp .
    (87) sumexp -> mulexp . PLUS mulexp
    (88) sumexp -> mulexp . MINUS mulexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 86 (sumexp -> mulexp .)
    LT              reduce using rule 86 (sumexp -> mulexp .)
    GTE             reduce using rule 86 (sumexp -> mulexp .)
    LTE             reduce using rule 86 (sumexp -> mulexp .)
    NE              reduce using rule 86 (sumexp -> mulexp .)
    AND             reduce using rule 86 (sumexp -> mulexp .)
    OR              reduce using rule 86 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 86 (sumexp -> mulexp .)
    RPAREN          reduce using rule 86 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 86 (sumexp -> mulexp .)
    TO              reduce using rule 86 (sumexp -> mulexp .)
    COMMA           reduce using rule 86 (sumexp -> mulexp .)
    CTEI            reduce using rule 86 (sumexp -> mulexp .)
    CTEF            reduce using rule 86 (sumexp -> mulexp .)
    CTEC            reduce using rule 86 (sumexp -> mulexp .)
    LPAREN          reduce using rule 86 (sumexp -> mulexp .)
    ID              reduce using rule 86 (sumexp -> mulexp .)
    MUL             reduce using rule 86 (sumexp -> mulexp .)
    DIV             reduce using rule 86 (sumexp -> mulexp .)
    PLUS            shift and go to state 93
    MINUS           shift and go to state 94

  ! PLUS            [ reduce using rule 86 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 86 (sumexp -> mulexp .) ]


state 64

    (89) mulexp -> pexp .
    (90) mulexp -> pexp . MUL pexp
    (91) mulexp -> pexp . DIV pexp

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 89 (mulexp -> pexp .)
    MINUS           reduce using rule 89 (mulexp -> pexp .)
    GT              reduce using rule 89 (mulexp -> pexp .)
    LT              reduce using rule 89 (mulexp -> pexp .)
    GTE             reduce using rule 89 (mulexp -> pexp .)
    LTE             reduce using rule 89 (mulexp -> pexp .)
    NE              reduce using rule 89 (mulexp -> pexp .)
    AND             reduce using rule 89 (mulexp -> pexp .)
    OR              reduce using rule 89 (mulexp -> pexp .)
    RBRACKET        reduce using rule 89 (mulexp -> pexp .)
    RPAREN          reduce using rule 89 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 89 (mulexp -> pexp .)
    TO              reduce using rule 89 (mulexp -> pexp .)
    COMMA           reduce using rule 89 (mulexp -> pexp .)
    CTEI            reduce using rule 89 (mulexp -> pexp .)
    CTEF            reduce using rule 89 (mulexp -> pexp .)
    CTEC            reduce using rule 89 (mulexp -> pexp .)
    LPAREN          reduce using rule 89 (mulexp -> pexp .)
    ID              reduce using rule 89 (mulexp -> pexp .)
    MUL             shift and go to state 95
    DIV             shift and go to state 96

  ! MUL             [ reduce using rule 89 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 89 (mulexp -> pexp .) ]


state 65

    (92) pexp -> var1 .

    MUL             reduce using rule 92 (pexp -> var1 .)
    DIV             reduce using rule 92 (pexp -> var1 .)
    PLUS            reduce using rule 92 (pexp -> var1 .)
    MINUS           reduce using rule 92 (pexp -> var1 .)
    GT              reduce using rule 92 (pexp -> var1 .)
    LT              reduce using rule 92 (pexp -> var1 .)
    GTE             reduce using rule 92 (pexp -> var1 .)
    LTE             reduce using rule 92 (pexp -> var1 .)
    NE              reduce using rule 92 (pexp -> var1 .)
    AND             reduce using rule 92 (pexp -> var1 .)
    OR              reduce using rule 92 (pexp -> var1 .)
    RBRACKET        reduce using rule 92 (pexp -> var1 .)
    RPAREN          reduce using rule 92 (pexp -> var1 .)
    SEMICOLON       reduce using rule 92 (pexp -> var1 .)
    TO              reduce using rule 92 (pexp -> var1 .)
    COMMA           reduce using rule 92 (pexp -> var1 .)
    CTEI            reduce using rule 92 (pexp -> var1 .)
    CTEF            reduce using rule 92 (pexp -> var1 .)
    CTEC            reduce using rule 92 (pexp -> var1 .)
    LPAREN          reduce using rule 92 (pexp -> var1 .)
    ID              reduce using rule 92 (pexp -> var1 .)


state 66

    (94) pexp -> CTEF .

    MUL             reduce using rule 94 (pexp -> CTEF .)
    DIV             reduce using rule 94 (pexp -> CTEF .)
    PLUS            reduce using rule 94 (pexp -> CTEF .)
    MINUS           reduce using rule 94 (pexp -> CTEF .)
    GT              reduce using rule 94 (pexp -> CTEF .)
    LT              reduce using rule 94 (pexp -> CTEF .)
    GTE             reduce using rule 94 (pexp -> CTEF .)
    LTE             reduce using rule 94 (pexp -> CTEF .)
    NE              reduce using rule 94 (pexp -> CTEF .)
    AND             reduce using rule 94 (pexp -> CTEF .)
    OR              reduce using rule 94 (pexp -> CTEF .)
    RBRACKET        reduce using rule 94 (pexp -> CTEF .)
    RPAREN          reduce using rule 94 (pexp -> CTEF .)
    SEMICOLON       reduce using rule 94 (pexp -> CTEF .)
    TO              reduce using rule 94 (pexp -> CTEF .)
    COMMA           reduce using rule 94 (pexp -> CTEF .)
    CTEI            reduce using rule 94 (pexp -> CTEF .)
    CTEF            reduce using rule 94 (pexp -> CTEF .)
    CTEC            reduce using rule 94 (pexp -> CTEF .)
    LPAREN          reduce using rule 94 (pexp -> CTEF .)
    ID              reduce using rule 94 (pexp -> CTEF .)


state 67

    (95) pexp -> CTEC .

    MUL             reduce using rule 95 (pexp -> CTEC .)
    DIV             reduce using rule 95 (pexp -> CTEC .)
    PLUS            reduce using rule 95 (pexp -> CTEC .)
    MINUS           reduce using rule 95 (pexp -> CTEC .)
    GT              reduce using rule 95 (pexp -> CTEC .)
    LT              reduce using rule 95 (pexp -> CTEC .)
    GTE             reduce using rule 95 (pexp -> CTEC .)
    LTE             reduce using rule 95 (pexp -> CTEC .)
    NE              reduce using rule 95 (pexp -> CTEC .)
    AND             reduce using rule 95 (pexp -> CTEC .)
    OR              reduce using rule 95 (pexp -> CTEC .)
    RBRACKET        reduce using rule 95 (pexp -> CTEC .)
    RPAREN          reduce using rule 95 (pexp -> CTEC .)
    SEMICOLON       reduce using rule 95 (pexp -> CTEC .)
    TO              reduce using rule 95 (pexp -> CTEC .)
    COMMA           reduce using rule 95 (pexp -> CTEC .)
    CTEI            reduce using rule 95 (pexp -> CTEC .)
    CTEF            reduce using rule 95 (pexp -> CTEC .)
    CTEC            reduce using rule 95 (pexp -> CTEC .)
    LPAREN          reduce using rule 95 (pexp -> CTEC .)
    ID              reduce using rule 95 (pexp -> CTEC .)


state 68

    (96) pexp -> llamada .

    MUL             reduce using rule 96 (pexp -> llamada .)
    DIV             reduce using rule 96 (pexp -> llamada .)
    PLUS            reduce using rule 96 (pexp -> llamada .)
    MINUS           reduce using rule 96 (pexp -> llamada .)
    GT              reduce using rule 96 (pexp -> llamada .)
    LT              reduce using rule 96 (pexp -> llamada .)
    GTE             reduce using rule 96 (pexp -> llamada .)
    LTE             reduce using rule 96 (pexp -> llamada .)
    NE              reduce using rule 96 (pexp -> llamada .)
    AND             reduce using rule 96 (pexp -> llamada .)
    OR              reduce using rule 96 (pexp -> llamada .)
    RBRACKET        reduce using rule 96 (pexp -> llamada .)
    RPAREN          reduce using rule 96 (pexp -> llamada .)
    SEMICOLON       reduce using rule 96 (pexp -> llamada .)
    TO              reduce using rule 96 (pexp -> llamada .)
    COMMA           reduce using rule 96 (pexp -> llamada .)
    CTEI            reduce using rule 96 (pexp -> llamada .)
    CTEF            reduce using rule 96 (pexp -> llamada .)
    CTEC            reduce using rule 96 (pexp -> llamada .)
    LPAREN          reduce using rule 96 (pexp -> llamada .)
    ID              reduce using rule 96 (pexp -> llamada .)


state 69

    (97) pexp -> LPAREN . exp RPAREN
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    exp                            shift and go to state 97
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 70

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1
    (19) var1 -> ID . mat COMMA var1
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (59) llamada -> ID . LPAREN exp RPAREN
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 54
    LPAREN          shift and go to state 98
    LBRACKET        shift and go to state 44

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 55
    mat                            shift and go to state 56

state 71

    (7) main -> MAIN LPAREN param RPAREN LCURLY . vars statement RCURLY END
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (98) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    RCURLY          reduce using rule 98 (empty -> .)

    vars                           shift and go to state 99
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 72

    (57) param1 -> ID COMMA . param1
    (56) param1 -> . ID
    (57) param1 -> . ID COMMA param1
    (58) param1 -> . empty
    (98) empty -> .

    ID              shift and go to state 47
    RPAREN          reduce using rule 98 (empty -> .)

    param1                         shift and go to state 100
    empty                          shift and go to state 48

state 73

    (40) function1 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RCURLY

    RPAREN          shift and go to state 101


state 74

    (41) function2 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    RPAREN          shift and go to state 102


state 75

    (16) var1 -> ID COMMA var1 .

    SEMICOLON       reduce using rule 16 (var1 -> ID COMMA var1 .)
    MUL             reduce using rule 16 (var1 -> ID COMMA var1 .)
    DIV             reduce using rule 16 (var1 -> ID COMMA var1 .)
    PLUS            reduce using rule 16 (var1 -> ID COMMA var1 .)
    MINUS           reduce using rule 16 (var1 -> ID COMMA var1 .)
    GT              reduce using rule 16 (var1 -> ID COMMA var1 .)
    LT              reduce using rule 16 (var1 -> ID COMMA var1 .)
    GTE             reduce using rule 16 (var1 -> ID COMMA var1 .)
    LTE             reduce using rule 16 (var1 -> ID COMMA var1 .)
    NE              reduce using rule 16 (var1 -> ID COMMA var1 .)
    AND             reduce using rule 16 (var1 -> ID COMMA var1 .)
    OR              reduce using rule 16 (var1 -> ID COMMA var1 .)
    RBRACKET        reduce using rule 16 (var1 -> ID COMMA var1 .)
    RPAREN          reduce using rule 16 (var1 -> ID COMMA var1 .)
    TO              reduce using rule 16 (var1 -> ID COMMA var1 .)
    COMMA           reduce using rule 16 (var1 -> ID COMMA var1 .)
    CTEI            reduce using rule 16 (var1 -> ID COMMA var1 .)
    CTEF            reduce using rule 16 (var1 -> ID COMMA var1 .)
    CTEC            reduce using rule 16 (var1 -> ID COMMA var1 .)
    LPAREN          reduce using rule 16 (var1 -> ID COMMA var1 .)
    ID              reduce using rule 16 (var1 -> ID COMMA var1 .)


state 76

    (18) var1 -> ID arr COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (98) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 42
    SEMICOLON       reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    CTEI            reduce using rule 98 (empty -> .)
    CTEF            reduce using rule 98 (empty -> .)
    CTEC            reduce using rule 98 (empty -> .)
    LPAREN          reduce using rule 98 (empty -> .)

  ! ID              [ reduce using rule 98 (empty -> .) ]

    var1                           shift and go to state 103
    empty                          shift and go to state 43

state 77

    (19) var1 -> ID mat COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (98) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 42
    SEMICOLON       reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    CTEI            reduce using rule 98 (empty -> .)
    CTEF            reduce using rule 98 (empty -> .)
    CTEC            reduce using rule 98 (empty -> .)
    LPAREN          reduce using rule 98 (empty -> .)

  ! ID              [ reduce using rule 98 (empty -> .) ]

    var1                           shift and go to state 104
    empty                          shift and go to state 43

state 78

    (21) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat especial .)
    MUL             reduce using rule 21 (var1 -> ID mat especial .)
    DIV             reduce using rule 21 (var1 -> ID mat especial .)
    PLUS            reduce using rule 21 (var1 -> ID mat especial .)
    MINUS           reduce using rule 21 (var1 -> ID mat especial .)
    GT              reduce using rule 21 (var1 -> ID mat especial .)
    LT              reduce using rule 21 (var1 -> ID mat especial .)
    GTE             reduce using rule 21 (var1 -> ID mat especial .)
    LTE             reduce using rule 21 (var1 -> ID mat especial .)
    NE              reduce using rule 21 (var1 -> ID mat especial .)
    AND             reduce using rule 21 (var1 -> ID mat especial .)
    OR              reduce using rule 21 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    TO              reduce using rule 21 (var1 -> ID mat especial .)
    COMMA           reduce using rule 21 (var1 -> ID mat especial .)
    CTEI            reduce using rule 21 (var1 -> ID mat especial .)
    CTEF            reduce using rule 21 (var1 -> ID mat especial .)
    CTEC            reduce using rule 21 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    ID              reduce using rule 21 (var1 -> ID mat especial .)


state 79

    (27) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 27 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 27 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 27 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 27 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 27 (especial -> TRANSPUESTA .)
    GT              reduce using rule 27 (especial -> TRANSPUESTA .)
    LT              reduce using rule 27 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 27 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 27 (especial -> TRANSPUESTA .)
    NE              reduce using rule 27 (especial -> TRANSPUESTA .)
    AND             reduce using rule 27 (especial -> TRANSPUESTA .)
    OR              reduce using rule 27 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 27 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 27 (especial -> TRANSPUESTA .)
    TO              reduce using rule 27 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 27 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 27 (especial -> TRANSPUESTA .)
    ID              reduce using rule 27 (especial -> TRANSPUESTA .)


state 80

    (28) especial -> INVERSA .

    SEMICOLON       reduce using rule 28 (especial -> INVERSA .)
    MUL             reduce using rule 28 (especial -> INVERSA .)
    DIV             reduce using rule 28 (especial -> INVERSA .)
    PLUS            reduce using rule 28 (especial -> INVERSA .)
    MINUS           reduce using rule 28 (especial -> INVERSA .)
    GT              reduce using rule 28 (especial -> INVERSA .)
    LT              reduce using rule 28 (especial -> INVERSA .)
    GTE             reduce using rule 28 (especial -> INVERSA .)
    LTE             reduce using rule 28 (especial -> INVERSA .)
    NE              reduce using rule 28 (especial -> INVERSA .)
    AND             reduce using rule 28 (especial -> INVERSA .)
    OR              reduce using rule 28 (especial -> INVERSA .)
    RBRACKET        reduce using rule 28 (especial -> INVERSA .)
    RPAREN          reduce using rule 28 (especial -> INVERSA .)
    TO              reduce using rule 28 (especial -> INVERSA .)
    COMMA           reduce using rule 28 (especial -> INVERSA .)
    CTEI            reduce using rule 28 (especial -> INVERSA .)
    CTEF            reduce using rule 28 (especial -> INVERSA .)
    CTEC            reduce using rule 28 (especial -> INVERSA .)
    LPAREN          reduce using rule 28 (especial -> INVERSA .)
    ID              reduce using rule 28 (especial -> INVERSA .)


state 81

    (29) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 29 (especial -> DETERMINANTE .)
    MUL             reduce using rule 29 (especial -> DETERMINANTE .)
    DIV             reduce using rule 29 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 29 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 29 (especial -> DETERMINANTE .)
    GT              reduce using rule 29 (especial -> DETERMINANTE .)
    LT              reduce using rule 29 (especial -> DETERMINANTE .)
    GTE             reduce using rule 29 (especial -> DETERMINANTE .)
    LTE             reduce using rule 29 (especial -> DETERMINANTE .)
    NE              reduce using rule 29 (especial -> DETERMINANTE .)
    AND             reduce using rule 29 (especial -> DETERMINANTE .)
    OR              reduce using rule 29 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 29 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 29 (especial -> DETERMINANTE .)
    TO              reduce using rule 29 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 29 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 29 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 29 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 29 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 29 (especial -> DETERMINANTE .)
    ID              reduce using rule 29 (especial -> DETERMINANTE .)


state 82

    (30) arr -> LBRACKET CTEI RBRACKET .
    (32) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    SEMICOLON       reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 105


state 83

    (31) arr -> LBRACKET exp RBRACKET .
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (34) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    SEMICOLON       reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 106


state 84

    (76) exp -> nexp OR . nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

    nexp                           shift and go to state 107
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 85

    (78) nexp -> compexp AND . compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

    compexp                        shift and go to state 108
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 86

    (81) compexp1 -> sumexp GT . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    sumexp                         shift and go to state 109
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 87

    (82) compexp1 -> sumexp LT . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    sumexp                         shift and go to state 110
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 88

    (83) compexp1 -> sumexp GTE . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    sumexp                         shift and go to state 111
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 89

    (84) compexp1 -> sumexp LTE . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    sumexp                         shift and go to state 112
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 90

    (85) compexp1 -> sumexp NE . sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    sumexp                         shift and go to state 113
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 91

    (80) compexp -> compexp1 sumexp .

    AND             reduce using rule 80 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 80 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 80 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 80 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 80 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 80 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 80 (compexp -> compexp1 sumexp .)


state 92

    (93) pexp -> CTEI .

    MUL             reduce using rule 93 (pexp -> CTEI .)
    DIV             reduce using rule 93 (pexp -> CTEI .)
    PLUS            reduce using rule 93 (pexp -> CTEI .)
    MINUS           reduce using rule 93 (pexp -> CTEI .)
    AND             reduce using rule 93 (pexp -> CTEI .)
    OR              reduce using rule 93 (pexp -> CTEI .)
    RBRACKET        reduce using rule 93 (pexp -> CTEI .)
    RPAREN          reduce using rule 93 (pexp -> CTEI .)
    SEMICOLON       reduce using rule 93 (pexp -> CTEI .)
    TO              reduce using rule 93 (pexp -> CTEI .)
    COMMA           reduce using rule 93 (pexp -> CTEI .)
    GT              reduce using rule 93 (pexp -> CTEI .)
    LT              reduce using rule 93 (pexp -> CTEI .)
    GTE             reduce using rule 93 (pexp -> CTEI .)
    LTE             reduce using rule 93 (pexp -> CTEI .)
    NE              reduce using rule 93 (pexp -> CTEI .)
    CTEI            reduce using rule 93 (pexp -> CTEI .)
    CTEF            reduce using rule 93 (pexp -> CTEI .)
    CTEC            reduce using rule 93 (pexp -> CTEI .)
    LPAREN          reduce using rule 93 (pexp -> CTEI .)
    ID              reduce using rule 93 (pexp -> CTEI .)


state 93

    (87) sumexp -> mulexp PLUS . mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    mulexp                         shift and go to state 114
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 94

    (88) sumexp -> mulexp MINUS . mulexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    mulexp                         shift and go to state 115
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 95

    (90) mulexp -> pexp MUL . pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    pexp                           shift and go to state 116
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 96

    (91) mulexp -> pexp DIV . pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)

  ! CTEI            [ reduce using rule 98 (empty -> .) ]
  ! CTEF            [ reduce using rule 98 (empty -> .) ]
  ! CTEC            [ reduce using rule 98 (empty -> .) ]
  ! LPAREN          [ reduce using rule 98 (empty -> .) ]
  ! ID              [ reduce using rule 98 (empty -> .) ]

    pexp                           shift and go to state 117
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 97

    (97) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 118


state 98

    (59) llamada -> ID LPAREN . exp RPAREN
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    exp                            shift and go to state 119
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 99

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars . statement RCURLY END
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 120
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 100

    (57) param1 -> ID COMMA param1 .

    RPAREN          reduce using rule 57 (param1 -> ID COMMA param1 .)


state 101

    (40) function1 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 136


state 102

    (41) function2 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    SEMICOLON       shift and go to state 137


state 103

    (18) var1 -> ID arr COMMA var1 .

    SEMICOLON       reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    MUL             reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    DIV             reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    PLUS            reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    MINUS           reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    GT              reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    LT              reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    GTE             reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    LTE             reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    NE              reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    AND             reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    OR              reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    RPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    TO              reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    COMMA           reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    CTEI            reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    CTEF            reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    CTEC            reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    LPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 .)
    ID              reduce using rule 18 (var1 -> ID arr COMMA var1 .)


state 104

    (19) var1 -> ID mat COMMA var1 .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    MUL             reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    DIV             reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    PLUS            reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    MINUS           reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    GT              reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    LT              reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    GTE             reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    LTE             reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    NE              reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    AND             reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    OR              reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    RPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    TO              reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    COMMA           reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    CTEI            reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    CTEF            reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    CTEC            reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    LPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 .)
    ID              reduce using rule 19 (var1 -> ID mat COMMA var1 .)


state 105

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 138
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)

    exp                            shift and go to state 139
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 106

    (33) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (34) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 141
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RBRACKET        reduce using rule 98 (empty -> .)

    exp                            shift and go to state 140
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 107

    (76) exp -> nexp OR nexp .

    RBRACKET        reduce using rule 76 (exp -> nexp OR nexp .)
    RPAREN          reduce using rule 76 (exp -> nexp OR nexp .)
    SEMICOLON       reduce using rule 76 (exp -> nexp OR nexp .)
    TO              reduce using rule 76 (exp -> nexp OR nexp .)
    COMMA           reduce using rule 76 (exp -> nexp OR nexp .)


state 108

    (78) nexp -> compexp AND compexp .

    OR              reduce using rule 78 (nexp -> compexp AND compexp .)
    RBRACKET        reduce using rule 78 (nexp -> compexp AND compexp .)
    RPAREN          reduce using rule 78 (nexp -> compexp AND compexp .)
    SEMICOLON       reduce using rule 78 (nexp -> compexp AND compexp .)
    TO              reduce using rule 78 (nexp -> compexp AND compexp .)
    COMMA           reduce using rule 78 (nexp -> compexp AND compexp .)


state 109

    (81) compexp1 -> sumexp GT sumexp .

    CTEI            reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    CTEF            reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    CTEC            reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    LPAREN          reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    ID              reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    PLUS            reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    MINUS           reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    MUL             reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    DIV             reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    AND             reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    OR              reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    RBRACKET        reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    RPAREN          reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    SEMICOLON       reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    TO              reduce using rule 81 (compexp1 -> sumexp GT sumexp .)
    COMMA           reduce using rule 81 (compexp1 -> sumexp GT sumexp .)


state 110

    (82) compexp1 -> sumexp LT sumexp .

    CTEI            reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    CTEF            reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    CTEC            reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    LPAREN          reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    ID              reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    PLUS            reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    MINUS           reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    MUL             reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    DIV             reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    AND             reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    OR              reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    RBRACKET        reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    RPAREN          reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    SEMICOLON       reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    TO              reduce using rule 82 (compexp1 -> sumexp LT sumexp .)
    COMMA           reduce using rule 82 (compexp1 -> sumexp LT sumexp .)


state 111

    (83) compexp1 -> sumexp GTE sumexp .

    CTEI            reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    CTEF            reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    CTEC            reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    LPAREN          reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    ID              reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    PLUS            reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    MINUS           reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    MUL             reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    DIV             reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    AND             reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    OR              reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    RBRACKET        reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    RPAREN          reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    SEMICOLON       reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    TO              reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)
    COMMA           reduce using rule 83 (compexp1 -> sumexp GTE sumexp .)


state 112

    (84) compexp1 -> sumexp LTE sumexp .

    CTEI            reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    CTEF            reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    CTEC            reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    LPAREN          reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    ID              reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    PLUS            reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    MINUS           reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    MUL             reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    DIV             reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    AND             reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    OR              reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    RBRACKET        reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    RPAREN          reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    SEMICOLON       reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    TO              reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)
    COMMA           reduce using rule 84 (compexp1 -> sumexp LTE sumexp .)


state 113

    (85) compexp1 -> sumexp NE sumexp .

    CTEI            reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    CTEF            reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    CTEC            reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    LPAREN          reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    ID              reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    PLUS            reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    MINUS           reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    MUL             reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    DIV             reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    AND             reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    OR              reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    RBRACKET        reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    RPAREN          reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    SEMICOLON       reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    TO              reduce using rule 85 (compexp1 -> sumexp NE sumexp .)
    COMMA           reduce using rule 85 (compexp1 -> sumexp NE sumexp .)


state 114

    (87) sumexp -> mulexp PLUS mulexp .

    GT              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    LT              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    GTE             reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    LTE             reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    NE              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    AND             reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    OR              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    RBRACKET        reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    RPAREN          reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    SEMICOLON       reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    TO              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    COMMA           reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    CTEI            reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    CTEF            reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    CTEC            reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    LPAREN          reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    ID              reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    PLUS            reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    MINUS           reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    MUL             reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)
    DIV             reduce using rule 87 (sumexp -> mulexp PLUS mulexp .)


state 115

    (88) sumexp -> mulexp MINUS mulexp .

    GT              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    LT              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    GTE             reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    LTE             reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    NE              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    AND             reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    OR              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    RBRACKET        reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    RPAREN          reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    SEMICOLON       reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    TO              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    COMMA           reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    CTEI            reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    CTEF            reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    CTEC            reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    LPAREN          reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    ID              reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    PLUS            reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    MINUS           reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    MUL             reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)
    DIV             reduce using rule 88 (sumexp -> mulexp MINUS mulexp .)


state 116

    (90) mulexp -> pexp MUL pexp .

    PLUS            reduce using rule 90 (mulexp -> pexp MUL pexp .)
    MINUS           reduce using rule 90 (mulexp -> pexp MUL pexp .)
    GT              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    LT              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    GTE             reduce using rule 90 (mulexp -> pexp MUL pexp .)
    LTE             reduce using rule 90 (mulexp -> pexp MUL pexp .)
    NE              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    AND             reduce using rule 90 (mulexp -> pexp MUL pexp .)
    OR              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    RBRACKET        reduce using rule 90 (mulexp -> pexp MUL pexp .)
    RPAREN          reduce using rule 90 (mulexp -> pexp MUL pexp .)
    SEMICOLON       reduce using rule 90 (mulexp -> pexp MUL pexp .)
    TO              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    COMMA           reduce using rule 90 (mulexp -> pexp MUL pexp .)
    CTEI            reduce using rule 90 (mulexp -> pexp MUL pexp .)
    CTEF            reduce using rule 90 (mulexp -> pexp MUL pexp .)
    CTEC            reduce using rule 90 (mulexp -> pexp MUL pexp .)
    LPAREN          reduce using rule 90 (mulexp -> pexp MUL pexp .)
    ID              reduce using rule 90 (mulexp -> pexp MUL pexp .)
    MUL             reduce using rule 90 (mulexp -> pexp MUL pexp .)
    DIV             reduce using rule 90 (mulexp -> pexp MUL pexp .)


state 117

    (91) mulexp -> pexp DIV pexp .

    PLUS            reduce using rule 91 (mulexp -> pexp DIV pexp .)
    MINUS           reduce using rule 91 (mulexp -> pexp DIV pexp .)
    GT              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    LT              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    GTE             reduce using rule 91 (mulexp -> pexp DIV pexp .)
    LTE             reduce using rule 91 (mulexp -> pexp DIV pexp .)
    NE              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    AND             reduce using rule 91 (mulexp -> pexp DIV pexp .)
    OR              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    RBRACKET        reduce using rule 91 (mulexp -> pexp DIV pexp .)
    RPAREN          reduce using rule 91 (mulexp -> pexp DIV pexp .)
    SEMICOLON       reduce using rule 91 (mulexp -> pexp DIV pexp .)
    TO              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    COMMA           reduce using rule 91 (mulexp -> pexp DIV pexp .)
    CTEI            reduce using rule 91 (mulexp -> pexp DIV pexp .)
    CTEF            reduce using rule 91 (mulexp -> pexp DIV pexp .)
    CTEC            reduce using rule 91 (mulexp -> pexp DIV pexp .)
    LPAREN          reduce using rule 91 (mulexp -> pexp DIV pexp .)
    ID              reduce using rule 91 (mulexp -> pexp DIV pexp .)
    MUL             reduce using rule 91 (mulexp -> pexp DIV pexp .)
    DIV             reduce using rule 91 (mulexp -> pexp DIV pexp .)


state 118

    (97) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 97 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 97 (pexp -> LPAREN exp RPAREN .)


state 119

    (59) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 142


state 120

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 143


state 121

    (42) statement -> statement1 . statement
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement1                     shift and go to state 121
    statement                      shift and go to state 144
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 122

    (43) statement -> empty .

    RCURLY          reduce using rule 43 (statement -> empty .)
    RETURN          reduce using rule 43 (statement -> empty .)


state 123

    (44) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 145


state 124

    (45) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 146


state 125

    (46) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 147


state 126

    (47) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 148


state 127

    (48) statement1 -> for .

    ID              reduce using rule 48 (statement1 -> for .)
    READ            reduce using rule 48 (statement1 -> for .)
    PRINT           reduce using rule 48 (statement1 -> for .)
    FOR             reduce using rule 48 (statement1 -> for .)
    IF              reduce using rule 48 (statement1 -> for .)
    WHILE           reduce using rule 48 (statement1 -> for .)
    RCURLY          reduce using rule 48 (statement1 -> for .)
    RETURN          reduce using rule 48 (statement1 -> for .)


state 128

    (49) statement1 -> if .

    ID              reduce using rule 49 (statement1 -> if .)
    READ            reduce using rule 49 (statement1 -> if .)
    PRINT           reduce using rule 49 (statement1 -> if .)
    FOR             reduce using rule 49 (statement1 -> if .)
    IF              reduce using rule 49 (statement1 -> if .)
    WHILE           reduce using rule 49 (statement1 -> if .)
    RCURLY          reduce using rule 49 (statement1 -> if .)
    RETURN          reduce using rule 49 (statement1 -> if .)


state 129

    (50) statement1 -> while .

    ID              reduce using rule 50 (statement1 -> while .)
    READ            reduce using rule 50 (statement1 -> while .)
    PRINT           reduce using rule 50 (statement1 -> while .)
    FOR             reduce using rule 50 (statement1 -> while .)
    IF              reduce using rule 50 (statement1 -> while .)
    WHILE           reduce using rule 50 (statement1 -> while .)
    RCURLY          reduce using rule 50 (statement1 -> while .)
    RETURN          reduce using rule 50 (statement1 -> while .)


state 130

    (51) asignacion -> ID . EQUALS exp
    (52) asignacion -> ID . arr EQUALS exp
    (53) asignacion -> ID . mat EQUALS exp
    (59) llamada -> ID . LPAREN exp RPAREN
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 149
    LPAREN          shift and go to state 98
    LBRACKET        shift and go to state 44

    arr                            shift and go to state 150
    mat                            shift and go to state 151

state 131

    (74) lectura -> READ . LPAREN var1 RPAREN

    LPAREN          shift and go to state 152


state 132

    (67) escritura -> PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 153


state 133

    (64) for -> FOR . LPAREN for1 RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 154


state 134

    (60) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY else

    LPAREN          shift and go to state 155


state 135

    (66) while -> WHILE . LPAREN exp RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 156


state 136

    (40) function1 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 157


state 137

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LCURLY          shift and go to state 158


state 138

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (93) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 159
    MUL             reduce using rule 93 (pexp -> CTEI .)
    DIV             reduce using rule 93 (pexp -> CTEI .)
    PLUS            reduce using rule 93 (pexp -> CTEI .)
    MINUS           reduce using rule 93 (pexp -> CTEI .)
    GT              reduce using rule 93 (pexp -> CTEI .)
    LT              reduce using rule 93 (pexp -> CTEI .)
    GTE             reduce using rule 93 (pexp -> CTEI .)
    LTE             reduce using rule 93 (pexp -> CTEI .)
    NE              reduce using rule 93 (pexp -> CTEI .)
    AND             reduce using rule 93 (pexp -> CTEI .)
    OR              reduce using rule 93 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 93 (pexp -> CTEI .) ]


state 139

    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 160


state 140

    (33) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 161


state 141

    (34) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (93) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 162
    MUL             reduce using rule 93 (pexp -> CTEI .)
    DIV             reduce using rule 93 (pexp -> CTEI .)
    PLUS            reduce using rule 93 (pexp -> CTEI .)
    MINUS           reduce using rule 93 (pexp -> CTEI .)
    GT              reduce using rule 93 (pexp -> CTEI .)
    LT              reduce using rule 93 (pexp -> CTEI .)
    GTE             reduce using rule 93 (pexp -> CTEI .)
    LTE             reduce using rule 93 (pexp -> CTEI .)
    NE              reduce using rule 93 (pexp -> CTEI .)
    AND             reduce using rule 93 (pexp -> CTEI .)
    OR              reduce using rule 93 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 93 (pexp -> CTEI .) ]


state 142

    (59) llamada -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 59 (llamada -> ID LPAREN exp RPAREN .)


state 143

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 163


state 144

    (42) statement -> statement1 statement .

    RCURLY          reduce using rule 42 (statement -> statement1 statement .)
    RETURN          reduce using rule 42 (statement -> statement1 statement .)


state 145

    (44) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 44 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 44 (statement1 -> asignacion SEMICOLON .)


state 146

    (45) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 45 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 45 (statement1 -> llamada SEMICOLON .)


state 147

    (46) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 46 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 46 (statement1 -> lectura SEMICOLON .)


state 148

    (47) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 47 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 47 (statement1 -> escritura SEMICOLON .)


state 149

    (51) asignacion -> ID EQUALS . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)

    exp                            shift and go to state 164
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 150

    (52) asignacion -> ID arr . EQUALS exp

    EQUALS          shift and go to state 165


state 151

    (53) asignacion -> ID mat . EQUALS exp

    EQUALS          shift and go to state 166


state 152

    (74) lectura -> READ LPAREN . var1 RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (98) empty -> .

    ID              shift and go to state 42
    RPAREN          reduce using rule 98 (empty -> .)

    var1                           shift and go to state 167
    empty                          shift and go to state 43

state 153

    (67) escritura -> PRINT LPAREN . escritura1 RPAREN
    (68) escritura1 -> . escritura2 COMMA escritura2
    (69) escritura1 -> . escritura2
    (70) escritura2 -> . CTESTRING
    (71) escritura2 -> . CTEI
    (72) escritura2 -> . CTEF
    (73) escritura2 -> . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTESTRING       shift and go to state 170
    CTEI            shift and go to state 171
    CTEF            shift and go to state 172
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    COMMA           reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    escritura1                     shift and go to state 168
    escritura2                     shift and go to state 169
    exp                            shift and go to state 173
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 154

    (64) for -> FOR LPAREN . for1 RPAREN LCURLY statement RCURLY
    (65) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 175

    for1                           shift and go to state 174

state 155

    (60) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY
    (61) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY else
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    exp                            shift and go to state 176
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 156

    (66) while -> WHILE LPAREN . exp RPAREN LCURLY statement RCURLY
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    exp                            shift and go to state 177
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 157

    (40) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (98) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    RCURLY          reduce using rule 98 (empty -> .)

    vars                           shift and go to state 178
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 158

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RETURN exp SEMICOLON RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (98) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 98 (empty -> .)
    READ            reduce using rule 98 (empty -> .)
    PRINT           reduce using rule 98 (empty -> .)
    FOR             reduce using rule 98 (empty -> .)
    IF              reduce using rule 98 (empty -> .)
    WHILE           reduce using rule 98 (empty -> .)
    RETURN          reduce using rule 98 (empty -> .)

    vars                           shift and go to state 179
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 159

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    SEMICOLON       reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 160

    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    SEMICOLON       reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 161

    (33) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 162

    (34) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    SEMICOLON       reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 163

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .)


state 164

    (51) asignacion -> ID EQUALS exp .

    SEMICOLON       reduce using rule 51 (asignacion -> ID EQUALS exp .)
    TO              reduce using rule 51 (asignacion -> ID EQUALS exp .)


state 165

    (52) asignacion -> ID arr EQUALS . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)

    exp                            shift and go to state 180
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 166

    (53) asignacion -> ID mat EQUALS . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)
    TO              reduce using rule 98 (empty -> .)

    exp                            shift and go to state 181
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 167

    (74) lectura -> READ LPAREN var1 . RPAREN

    RPAREN          shift and go to state 182


state 168

    (67) escritura -> PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 183


state 169

    (68) escritura1 -> escritura2 . COMMA escritura2
    (69) escritura1 -> escritura2 .

    COMMA           shift and go to state 184
    RPAREN          reduce using rule 69 (escritura1 -> escritura2 .)


state 170

    (70) escritura2 -> CTESTRING .

    COMMA           reduce using rule 70 (escritura2 -> CTESTRING .)
    RPAREN          reduce using rule 70 (escritura2 -> CTESTRING .)


state 171

    (71) escritura2 -> CTEI .
    (93) pexp -> CTEI .

  ! reduce/reduce conflict for COMMA resolved using rule 71 (escritura2 -> CTEI .)
  ! reduce/reduce conflict for RPAREN resolved using rule 71 (escritura2 -> CTEI .)
    COMMA           reduce using rule 71 (escritura2 -> CTEI .)
    RPAREN          reduce using rule 71 (escritura2 -> CTEI .)
    MUL             reduce using rule 93 (pexp -> CTEI .)
    DIV             reduce using rule 93 (pexp -> CTEI .)
    PLUS            reduce using rule 93 (pexp -> CTEI .)
    MINUS           reduce using rule 93 (pexp -> CTEI .)
    GT              reduce using rule 93 (pexp -> CTEI .)
    LT              reduce using rule 93 (pexp -> CTEI .)
    GTE             reduce using rule 93 (pexp -> CTEI .)
    LTE             reduce using rule 93 (pexp -> CTEI .)
    NE              reduce using rule 93 (pexp -> CTEI .)
    AND             reduce using rule 93 (pexp -> CTEI .)
    OR              reduce using rule 93 (pexp -> CTEI .)

  ! COMMA           [ reduce using rule 93 (pexp -> CTEI .) ]
  ! RPAREN          [ reduce using rule 93 (pexp -> CTEI .) ]


state 172

    (72) escritura2 -> CTEF .
    (94) pexp -> CTEF .

  ! reduce/reduce conflict for COMMA resolved using rule 72 (escritura2 -> CTEF .)
  ! reduce/reduce conflict for RPAREN resolved using rule 72 (escritura2 -> CTEF .)
    COMMA           reduce using rule 72 (escritura2 -> CTEF .)
    RPAREN          reduce using rule 72 (escritura2 -> CTEF .)
    MUL             reduce using rule 94 (pexp -> CTEF .)
    DIV             reduce using rule 94 (pexp -> CTEF .)
    PLUS            reduce using rule 94 (pexp -> CTEF .)
    MINUS           reduce using rule 94 (pexp -> CTEF .)
    GT              reduce using rule 94 (pexp -> CTEF .)
    LT              reduce using rule 94 (pexp -> CTEF .)
    GTE             reduce using rule 94 (pexp -> CTEF .)
    LTE             reduce using rule 94 (pexp -> CTEF .)
    NE              reduce using rule 94 (pexp -> CTEF .)
    AND             reduce using rule 94 (pexp -> CTEF .)
    OR              reduce using rule 94 (pexp -> CTEF .)

  ! COMMA           [ reduce using rule 94 (pexp -> CTEF .) ]
  ! RPAREN          [ reduce using rule 94 (pexp -> CTEF .) ]


state 173

    (73) escritura2 -> exp .

    COMMA           reduce using rule 73 (escritura2 -> exp .)
    RPAREN          reduce using rule 73 (escritura2 -> exp .)


state 174

    (64) for -> FOR LPAREN for1 . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 185


state 175

    (65) for1 -> FROM . asignacion TO exp
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp

    ID              shift and go to state 187

    asignacion                     shift and go to state 186

state 176

    (60) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY
    (61) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY else

    RPAREN          shift and go to state 188


state 177

    (66) while -> WHILE LPAREN exp . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 189


state 178

    (40) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 190
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 179

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RETURN exp SEMICOLON RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RETURN          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 191
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 180

    (52) asignacion -> ID arr EQUALS exp .

    SEMICOLON       reduce using rule 52 (asignacion -> ID arr EQUALS exp .)
    TO              reduce using rule 52 (asignacion -> ID arr EQUALS exp .)


state 181

    (53) asignacion -> ID mat EQUALS exp .

    SEMICOLON       reduce using rule 53 (asignacion -> ID mat EQUALS exp .)
    TO              reduce using rule 53 (asignacion -> ID mat EQUALS exp .)


state 182

    (74) lectura -> READ LPAREN var1 RPAREN .

    SEMICOLON       reduce using rule 74 (lectura -> READ LPAREN var1 RPAREN .)


state 183

    (67) escritura -> PRINT LPAREN escritura1 RPAREN .

    SEMICOLON       reduce using rule 67 (escritura -> PRINT LPAREN escritura1 RPAREN .)


state 184

    (68) escritura1 -> escritura2 COMMA . escritura2
    (70) escritura2 -> . CTESTRING
    (71) escritura2 -> . CTEI
    (72) escritura2 -> . CTEF
    (73) escritura2 -> . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTESTRING       shift and go to state 170
    CTEI            shift and go to state 171
    CTEF            shift and go to state 172
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    escritura2                     shift and go to state 192
    exp                            shift and go to state 173
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 185

    (64) for -> FOR LPAREN for1 RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 193


state 186

    (65) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 194


state 187

    (51) asignacion -> ID . EQUALS exp
    (52) asignacion -> ID . arr EQUALS exp
    (53) asignacion -> ID . mat EQUALS exp
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 149
    LBRACKET        shift and go to state 44

    arr                            shift and go to state 150
    mat                            shift and go to state 151

state 188

    (60) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY
    (61) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY else

    LCURLY          shift and go to state 195


state 189

    (66) while -> WHILE LPAREN exp RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 196


state 190

    (40) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 197


state 191

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RETURN exp SEMICOLON RCURLY

    RETURN          shift and go to state 198


state 192

    (68) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 68 (escritura1 -> escritura2 COMMA escritura2 .)


state 193

    (64) for -> FOR LPAREN for1 RPAREN LCURLY . statement RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 199
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 194

    (65) for1 -> FROM asignacion TO . exp
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    RPAREN          reduce using rule 98 (empty -> .)

    exp                            shift and go to state 200
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 195

    (60) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY
    (61) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY else
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 201
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 196

    (66) while -> WHILE LPAREN exp RPAREN LCURLY . statement RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 202
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 197

    (40) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 40 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 40 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 40 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 198

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN . exp SEMICOLON RCURLY
    (75) exp -> . nexp
    (76) exp -> . nexp OR nexp
    (77) nexp -> . compexp
    (78) nexp -> . compexp AND compexp
    (79) compexp -> . sumexp
    (80) compexp -> . compexp1 sumexp
    (86) sumexp -> . mulexp
    (87) sumexp -> . mulexp PLUS mulexp
    (88) sumexp -> . mulexp MINUS mulexp
    (81) compexp1 -> . sumexp GT sumexp
    (82) compexp1 -> . sumexp LT sumexp
    (83) compexp1 -> . sumexp GTE sumexp
    (84) compexp1 -> . sumexp LTE sumexp
    (85) compexp1 -> . sumexp NE sumexp
    (89) mulexp -> . pexp
    (90) mulexp -> . pexp MUL pexp
    (91) mulexp -> . pexp DIV pexp
    (92) pexp -> . var1
    (93) pexp -> . CTEI
    (94) pexp -> . CTEF
    (95) pexp -> . CTEC
    (96) pexp -> . llamada
    (97) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1
    (19) var1 -> . ID mat COMMA var1
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (59) llamada -> . ID LPAREN exp RPAREN
    (98) empty -> .

    CTEI            shift and go to state 92
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 98 (empty -> .)
    DIV             reduce using rule 98 (empty -> .)
    PLUS            reduce using rule 98 (empty -> .)
    MINUS           reduce using rule 98 (empty -> .)
    GT              reduce using rule 98 (empty -> .)
    LT              reduce using rule 98 (empty -> .)
    GTE             reduce using rule 98 (empty -> .)
    LTE             reduce using rule 98 (empty -> .)
    NE              reduce using rule 98 (empty -> .)
    AND             reduce using rule 98 (empty -> .)
    OR              reduce using rule 98 (empty -> .)
    SEMICOLON       reduce using rule 98 (empty -> .)

    exp                            shift and go to state 203
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 43

state 199

    (64) for -> FOR LPAREN for1 RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 204


state 200

    (65) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 65 (for1 -> FROM asignacion TO exp .)


state 201

    (60) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY
    (61) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY else

    RCURLY          shift and go to state 205


state 202

    (66) while -> WHILE LPAREN exp RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 206


state 203

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 207


state 204

    (64) for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 64 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)


state 205

    (60) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .
    (61) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY . else
    (62) else -> . ELSE LCURLY statement RCURLY
    (63) else -> . empty
    (98) empty -> .

  ! reduce/reduce conflict for ID resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for READ resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for PRINT resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for FOR resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for IF resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for WHILE resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RCURLY resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RETURN resolved using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ID              reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 60 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ELSE            shift and go to state 209

  ! ID              [ reduce using rule 98 (empty -> .) ]
  ! READ            [ reduce using rule 98 (empty -> .) ]
  ! PRINT           [ reduce using rule 98 (empty -> .) ]
  ! FOR             [ reduce using rule 98 (empty -> .) ]
  ! IF              [ reduce using rule 98 (empty -> .) ]
  ! WHILE           [ reduce using rule 98 (empty -> .) ]
  ! RCURLY          [ reduce using rule 98 (empty -> .) ]
  ! RETURN          [ reduce using rule 98 (empty -> .) ]

    else                           shift and go to state 208
    empty                          shift and go to state 210

state 206

    (66) while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 66 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)


state 207

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON . RCURLY

    RCURLY          shift and go to state 211


state 208

    (61) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .

    ID              reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    READ            reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    PRINT           reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    FOR             reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    IF              reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    WHILE           reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RCURLY          reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RETURN          reduce using rule 61 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)


state 209

    (62) else -> ELSE . LCURLY statement RCURLY

    LCURLY          shift and go to state 212


state 210

    (63) else -> empty .

    ID              reduce using rule 63 (else -> empty .)
    READ            reduce using rule 63 (else -> empty .)
    PRINT           reduce using rule 63 (else -> empty .)
    FOR             reduce using rule 63 (else -> empty .)
    IF              reduce using rule 63 (else -> empty .)
    WHILE           reduce using rule 63 (else -> empty .)
    RCURLY          reduce using rule 63 (else -> empty .)
    RETURN          reduce using rule 63 (else -> empty .)


state 211

    (41) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .

    FUN             reduce using rule 41 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 41 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    $end            reduce using rule 41 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)


state 212

    (62) else -> ELSE LCURLY . statement RCURLY
    (42) statement -> . statement1 statement
    (43) statement -> . empty
    (44) statement1 -> . asignacion SEMICOLON
    (45) statement1 -> . llamada SEMICOLON
    (46) statement1 -> . lectura SEMICOLON
    (47) statement1 -> . escritura SEMICOLON
    (48) statement1 -> . for
    (49) statement1 -> . if
    (50) statement1 -> . while
    (98) empty -> .
    (51) asignacion -> . ID EQUALS exp
    (52) asignacion -> . ID arr EQUALS exp
    (53) asignacion -> . ID mat EQUALS exp
    (59) llamada -> . ID LPAREN exp RPAREN
    (74) lectura -> . READ LPAREN var1 RPAREN
    (67) escritura -> . PRINT LPAREN escritura1 RPAREN
    (64) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (60) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (61) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (66) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 98 (empty -> .)
    ID              shift and go to state 130
    READ            shift and go to state 131
    PRINT           shift and go to state 132
    FOR             shift and go to state 133
    IF              shift and go to state 134
    WHILE           shift and go to state 135

    statement                      shift and go to state 213
    statement1                     shift and go to state 121
    empty                          shift and go to state 122
    asignacion                     shift and go to state 123
    llamada                        shift and go to state 124
    lectura                        shift and go to state 125
    escritura                      shift and go to state 126
    for                            shift and go to state 127
    if                             shift and go to state 128
    while                          shift and go to state 129

state 213

    (62) else -> ELSE LCURLY statement . RCURLY

    RCURLY          shift and go to state 214


state 214

    (62) else -> ELSE LCURLY statement RCURLY .

    ID              reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    READ            reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    PRINT           reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    FOR             reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    IF              reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    WHILE           reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    RCURLY          reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)
    RETURN          reduce using rule 62 (else -> ELSE LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 42 resolved as shift
WARNING: shift/reduce conflict for ID in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 56 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MUL in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for ID in state 76 resolved as shift
WARNING: shift/reduce conflict for ID in state 77 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 86 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 88 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 90 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 90 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 90 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 90 resolved as shift
WARNING: shift/reduce conflict for ID in state 90 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 93 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 93 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 93 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 93 resolved as shift
WARNING: shift/reduce conflict for ID in state 93 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 94 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 95 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 96 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 138 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 141 resolved as shift
WARNING: reduce/reduce conflict in state 171 resolved using rule (escritura2 -> CTEI)
WARNING: rejected rule (pexp -> CTEI) in state 171
WARNING: reduce/reduce conflict in state 172 resolved using rule (escritura2 -> CTEF)
WARNING: rejected rule (pexp -> CTEF) in state 172
WARNING: reduce/reduce conflict in state 205 resolved using rule (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY)
WARNING: rejected rule (empty -> <empty>) in state 205
