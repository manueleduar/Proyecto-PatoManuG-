Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT guardaTipoVar
Rule 9     tipo -> FLOAT guardaTipoVar
Rule 10    tipo -> CHAR guardaTipoVar
Rule 11    guardaTipoVar -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1 addV
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1 addV
Rule 19    var1 -> ID mat COMMA var1 addV
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    addV -> <empty>
Rule 24    var2 -> var2 tipo var1 SEMICOLON addV
Rule 25    var2 -> empty
Rule 26    especial -> TRANSPUESTA
Rule 27    especial -> INVERSA
Rule 28    especial -> DETERMINANTE
Rule 29    arr -> LBRACKET CTEI RBRACKET
Rule 30    arr -> LBRACKET exp RBRACKET
Rule 31    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 32    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 34    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 35    modules -> function modules
Rule 36    modules -> empty
Rule 37    save_fun -> <empty>
Rule 38    function -> FUN VOID function1 end_func
Rule 39    function -> FUN INT function2 end_func
Rule 40    function -> FUN CHAR function2 end_func
Rule 41    function -> FUN FLOAT function2 end_func
Rule 42    function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 43    function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
Rule 44    end_func -> <empty>
Rule 45    operadorReturn -> <empty>
Rule 46    quad_return -> <empty>
Rule 47    statement -> statement1 statement
Rule 48    statement -> empty
Rule 49    statement1 -> asignacion SEMICOLON
Rule 50    statement1 -> llamada SEMICOLON
Rule 51    statement1 -> lectura SEMICOLON
Rule 52    statement1 -> escritura SEMICOLON
Rule 53    statement1 -> for
Rule 54    statement1 -> if
Rule 55    statement1 -> while
Rule 56    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 57    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 58    asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 59    genera_quad_asignacion -> <empty>
Rule 60    addOperadorName -> <empty>
Rule 61    param1 -> ID
Rule 62    param1 -> ID COMMA var1
Rule 63    param1 -> ID arr
Rule 64    param1 -> ID arr COMMA var1
Rule 65    param1 -> ID mat COMMA var1
Rule 66    param1 -> ID mat
Rule 67    param1 -> ID mat especial
Rule 68    param1 -> empty
Rule 69    addParam -> <empty>
Rule 70    param2 -> param2 tipo param1 addParam
Rule 71    param2 -> empty
Rule 72    verifica_parametros -> <empty>
Rule 73    cuenta_parametros -> <empty>
Rule 74    llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
Rule 75    aux_exp -> exp
Rule 76    aux_exp -> exp quad_param COMMA cuenta_parametros aux_exp
Rule 77    aux_exp -> empty ZeroParameters
Rule 78    ZeroParameters -> <empty>
Rule 79    era_call -> <empty>
Rule 80    quad_param -> <empty>
Rule 81    gosub_quad -> <empty>
Rule 82    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 83    else -> ELSE else_quad LCURLY statement RCURLY
Rule 84    else -> empty
Rule 85    for_op -> <empty>
Rule 86    for_quad -> <empty>
Rule 87    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
Rule 88    for1 -> FROM asignacion TO exp
Rule 89    loop_end -> <empty>
Rule 90    while_quad -> <empty>
Rule 91    while_op -> <empty>
Rule 92    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
Rule 93    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 94    escritura1 -> escritura2 COMMA escritura2
Rule 95    escritura1 -> escritura2
Rule 96    escritura2 -> COMILLA CTESTRING COMILLA
Rule 97    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 98    escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 99    escritura2 -> exp
Rule 100   lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN
Rule 101   exp -> nexp
Rule 102   exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 103   genera_quad_or -> <empty>
Rule 104   genera_quad_and -> <empty>
Rule 105   compare_quad -> <empty>
Rule 106   if_quad -> <empty>
Rule 107   end_if -> <empty>
Rule 108   else_quad -> <empty>
Rule 109   nexp -> compexp
Rule 110   nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 111   compexp -> sumexp
Rule 112   compexp -> compexp1 sumexp
Rule 113   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 114   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 115   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 116   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 117   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 118   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 119   sumexp -> mulexp
Rule 120   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 121   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 122   genera_sum_quad -> <empty>
Rule 123   genera_mul_quad -> <empty>
Rule 124   operadorPrint -> <empty>
Rule 125   operatorPrintQuad -> <empty>
Rule 126   operatorRead -> <empty>
Rule 127   operatorReadQuad -> <empty>
Rule 128   mulexp -> pexp
Rule 129   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 130   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 131   pexp -> var1 saveId
Rule 132   pexp -> CTEI saveCTE
Rule 133   pexp -> CTEF saveCTE
Rule 134   pexp -> CTEC saveCTE
Rule 135   pexp -> CTESTRING saveCTE
Rule 136   pexp -> llamada
Rule 137   pexp -> LPAREN exp RPAREN
Rule 138   empty -> <empty>
Rule 139   saveId -> <empty>
Rule 140   saveId2 -> <empty>
Rule 141   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 110
CHAR                 : 10 40
COMILLA              : 96 96
COMMA                : 16 18 19 62 64 65 76 94
COMPARE              : 118
CTEC                 : 134
CTEF                 : 98 133
CTEI                 : 29 31 31 33 34 97 132
CTESTRING            : 96 135
DETERMINANTE         : 28
DIV                  : 130
ELSE                 : 83
END                  : 7
EQUALS               : 56 57 58
FLOAT                : 9 41
FOR                  : 87
FROM                 : 88
FUN                  : 38 39 40 41
GT                   : 113
GTE                  : 115
ID                   : 1 15 16 17 18 19 20 21 42 43 56 57 58 61 62 63 64 65 66 67 74
IF                   : 82
INT                  : 8 39
INVERSA              : 27
LBRACKET             : 29 30 31 31 32 32 33 33 34 34
LCURLY               : 7 42 43 82 83 87 92
LPAREN               : 7 42 43 74 82 87 92 93 100 137
LT                   : 114
LTE                  : 116
MAIN                 : 7
MINUS                : 121
MUL                  : 129
NE                   : 117
OR                   : 102
PLUS                 : 120
PRINT                : 93
PROGRAM              : 1
RBRACKET             : 29 30 31 31 32 32 33 33 34 34
RCURLY               : 7 42 43 82 83 87 92
READ                 : 100
RETURN               : 43
RPAREN               : 7 42 43 74 82 87 92 93 100 137
SEMICOLON            : 1 24 42 43 43 49 50 51 52
TO                   : 88
TRANSPUESTA          : 26
VAR                  : 14
VOID                 : 38
WHILE                : 92
error                : 

Nonterminals, with rules where they appear

ZeroParameters       : 77
addOperadorName      : 56 57 58 102 110 113 114 115 116 117 118 120 121 129 130
addP                 : 1
addParam             : 70
addV                 : 16 18 19 24
arr                  : 17 18 57 63 64
asignacion           : 49 88
aux_exp              : 74 76
compare_quad         : 113 114 115 116 117 118
compexp              : 109 110 110
compexp1             : 112
cuenta_parametros    : 76
else                 : 82
else_quad            : 83
empty                : 13 22 25 36 48 68 71 77 84
end_func             : 38 39 40 41
end_if               : 82
era_call             : 74
escritura            : 52
escritura1           : 93
escritura2           : 94 94 95
especial             : 21 67
exp                  : 30 32 32 33 34 43 56 57 58 75 76 82 88 92 99 137
for                  : 53
for1                 : 87
for_op               : 87
for_quad             : 87
function             : 35
function1            : 38
function2            : 39 40 41
genera_mul_quad      : 129 130
genera_quad_and      : 110
genera_quad_asignacion : 56 57 58
genera_quad_or       : 102
genera_sum_quad      : 120 121
gosub_quad           : 74
guardaTipoVar        : 8 9 10
if                   : 54
if_quad              : 82
lectura              : 51
llamada              : 50 136
loop_end             : 87 92
main                 : 6
mat                  : 19 20 21 58 65 66 67
modules              : 3 4 35
mulexp               : 119 120 120 121 121
nexp                 : 101 102 102
operadorPrint        : 93
operadorReturn       : 43
operatorPrintQuad    : 93 97 98
operatorRead         : 100
operatorReadQuad     : 100
param1               : 70
param2               : 7 42 43 70
pexp                 : 128 129 129 130 130
programa             : 0
programa1            : 1
programa2            : 3 5
quad_param           : 76
quad_return          : 43
saveCTE              : 97 98 132 133 134 135
saveId               : 131
saveId2              : 56 57 58
save_fun             : 7 42 43
statement            : 7 42 43 47 82 83 87 92
statement1           : 47
sumexp               : 111 112 113 113 114 114 115 115 116 116 117 117 118 118
tipo                 : 24 70
var                  : 12
var1                 : 16 18 19 24 62 64 65 100 131
var2                 : 14 24
vars                 : 3 4 7 42 43
verifica_parametros  : 74
while                : 55
while_op             : 92
while_quad           : 92

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUN             reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars modules programa2
    (4) programa1 -> . vars modules
    (5) programa1 -> . programa2
    (12) vars -> . var
    (13) vars -> . empty
    (6) programa2 -> . main
    (14) var -> . VAR var2
    (138) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 138 (empty -> .)
    $end            reduce using rule 138 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 138 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . modules programa2
    (4) programa1 -> vars . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1 end_func
    (39) function -> . FUN INT function2 end_func
    (40) function -> . FUN CHAR function2 end_func
    (41) function -> . FUN FLOAT function2 end_func
    (138) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 138 (empty -> .)
    $end            reduce using rule 138 (empty -> .)

    modules                        shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (12) vars -> var .

    FUN             reduce using rule 12 (vars -> var .)
    MAIN            reduce using rule 12 (vars -> var .)
    $end            reduce using rule 12 (vars -> var .)
    ID              reduce using rule 12 (vars -> var .)
    READ            reduce using rule 12 (vars -> var .)
    PRINT           reduce using rule 12 (vars -> var .)
    FOR             reduce using rule 12 (vars -> var .)
    IF              reduce using rule 12 (vars -> var .)
    WHILE           reduce using rule 12 (vars -> var .)
    RCURLY          reduce using rule 12 (vars -> var .)
    RETURN          reduce using rule 12 (vars -> var .)


state 10

    (13) vars -> empty .

    FUN             reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    $end            reduce using rule 13 (vars -> empty .)
    ID              reduce using rule 13 (vars -> empty .)
    READ            reduce using rule 13 (vars -> empty .)
    PRINT           reduce using rule 13 (vars -> empty .)
    FOR             reduce using rule 13 (vars -> empty .)
    IF              reduce using rule 13 (vars -> empty .)
    WHILE           reduce using rule 13 (vars -> empty .)
    RCURLY          reduce using rule 13 (vars -> empty .)
    RETURN          reduce using rule 13 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (14) var -> VAR . var2
    (24) var2 -> . var2 tipo var1 SEMICOLON addV
    (25) var2 -> . empty
    (138) empty -> .

    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    FUN             reduce using rule 138 (empty -> .)
    MAIN            reduce using rule 138 (empty -> .)
    $end            reduce using rule 138 (empty -> .)
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    RCURLY          reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)

    var2                           shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 20

state 14

    (3) programa1 -> vars modules . programa2
    (4) programa1 -> vars modules .
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 21
    main                           shift and go to state 11

state 15

    (35) modules -> function . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1 end_func
    (39) function -> . FUN INT function2 end_func
    (40) function -> . FUN CHAR function2 end_func
    (41) function -> . FUN FLOAT function2 end_func
    (138) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 138 (empty -> .)
    $end            reduce using rule 138 (empty -> .)

    function                       shift and go to state 15
    modules                        shift and go to state 22
    empty                          shift and go to state 16

state 16

    (36) modules -> empty .

    MAIN            reduce using rule 36 (modules -> empty .)
    $end            reduce using rule 36 (modules -> empty .)


state 17

    (38) function -> FUN . VOID function1 end_func
    (39) function -> FUN . INT function2 end_func
    (40) function -> FUN . CHAR function2 end_func
    (41) function -> FUN . FLOAT function2 end_func

    VOID            shift and go to state 23
    INT             shift and go to state 24
    CHAR            shift and go to state 25
    FLOAT           shift and go to state 26


state 18

    (14) var -> VAR var2 .
    (24) var2 -> var2 . tipo var1 SEMICOLON addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 14 (var -> VAR var2 .)
    MAIN            reduce using rule 14 (var -> VAR var2 .)
    $end            reduce using rule 14 (var -> VAR var2 .)
    ID              reduce using rule 14 (var -> VAR var2 .)
    READ            reduce using rule 14 (var -> VAR var2 .)
    PRINT           reduce using rule 14 (var -> VAR var2 .)
    FOR             reduce using rule 14 (var -> VAR var2 .)
    IF              reduce using rule 14 (var -> VAR var2 .)
    WHILE           reduce using rule 14 (var -> VAR var2 .)
    RCURLY          reduce using rule 14 (var -> VAR var2 .)
    RETURN          reduce using rule 14 (var -> VAR var2 .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 27

state 19

    (25) var2 -> empty .

    INT             reduce using rule 25 (var2 -> empty .)
    FLOAT           reduce using rule 25 (var2 -> empty .)
    CHAR            reduce using rule 25 (var2 -> empty .)
    FUN             reduce using rule 25 (var2 -> empty .)
    MAIN            reduce using rule 25 (var2 -> empty .)
    $end            reduce using rule 25 (var2 -> empty .)
    ID              reduce using rule 25 (var2 -> empty .)
    READ            reduce using rule 25 (var2 -> empty .)
    PRINT           reduce using rule 25 (var2 -> empty .)
    FOR             reduce using rule 25 (var2 -> empty .)
    IF              reduce using rule 25 (var2 -> empty .)
    WHILE           reduce using rule 25 (var2 -> empty .)
    RCURLY          reduce using rule 25 (var2 -> empty .)
    RETURN          reduce using rule 25 (var2 -> empty .)


state 20

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 31


state 21

    (3) programa1 -> vars modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars modules programa2 .)


state 22

    (35) modules -> function modules .

    MAIN            reduce using rule 35 (modules -> function modules .)
    $end            reduce using rule 35 (modules -> function modules .)


state 23

    (38) function -> FUN VOID . function1 end_func
    (42) function1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 33

    function1                      shift and go to state 32

state 24

    (39) function -> FUN INT . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 34

state 25

    (40) function -> FUN CHAR . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 36

state 26

    (41) function -> FUN FLOAT . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 37

state 27

    (24) var2 -> var2 tipo . var1 SEMICOLON addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

    ID              shift and go to state 39
    SEMICOLON       reduce using rule 138 (empty -> .)

    var1                           shift and go to state 38
    empty                          shift and go to state 40

state 28

    (8) tipo -> INT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 41

state 29

    (9) tipo -> FLOAT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 42

state 30

    (10) tipo -> CHAR . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 43

state 31

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (70) param2 -> . param2 tipo param1 addParam
    (71) param2 -> . empty
    (138) empty -> .

    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    param2                         shift and go to state 44
    empty                          shift and go to state 45

state 32

    (38) function -> FUN VOID function1 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 46

state 33

    (42) function1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 47

state 34

    (39) function -> FUN INT function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 48

state 35

    (43) function2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 49

state 36

    (40) function -> FUN CHAR function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 50

state 37

    (41) function -> FUN FLOAT function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 51

state 38

    (24) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 52


state 39

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    INT             reduce using rule 15 (var1 -> ID .)
    FLOAT           reduce using rule 15 (var1 -> ID .)
    CHAR            reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55

state 40

    (22) var1 -> empty .

    SEMICOLON       reduce using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    COMPARE         reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    RBRACKET        reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    TO              reduce using rule 22 (var1 -> empty .)
    INT             reduce using rule 22 (var1 -> empty .)
    FLOAT           reduce using rule 22 (var1 -> empty .)
    CHAR            reduce using rule 22 (var1 -> empty .)
    CTEI            reduce using rule 22 (var1 -> empty .)
    CTEF            reduce using rule 22 (var1 -> empty .)
    CTEC            reduce using rule 22 (var1 -> empty .)
    CTESTRING       reduce using rule 22 (var1 -> empty .)
    LPAREN          reduce using rule 22 (var1 -> empty .)
    ID              reduce using rule 22 (var1 -> empty .)


state 41

    (8) tipo -> INT guardaTipoVar .

    ID              reduce using rule 8 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 8 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 8 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 8 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 8 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 8 (tipo -> INT guardaTipoVar .)


state 42

    (9) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)


state 43

    (10) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> CHAR guardaTipoVar .)


state 44

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (70) param2 -> param2 . tipo param1 addParam
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 57
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 45

    (71) param2 -> empty .

    RPAREN          reduce using rule 71 (param2 -> empty .)
    INT             reduce using rule 71 (param2 -> empty .)
    FLOAT           reduce using rule 71 (param2 -> empty .)
    CHAR            reduce using rule 71 (param2 -> empty .)


state 46

    (38) function -> FUN VOID function1 end_func .

    FUN             reduce using rule 38 (function -> FUN VOID function1 end_func .)
    MAIN            reduce using rule 38 (function -> FUN VOID function1 end_func .)
    $end            reduce using rule 38 (function -> FUN VOID function1 end_func .)


state 47

    (42) function1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 59


state 48

    (39) function -> FUN INT function2 end_func .

    FUN             reduce using rule 39 (function -> FUN INT function2 end_func .)
    MAIN            reduce using rule 39 (function -> FUN INT function2 end_func .)
    $end            reduce using rule 39 (function -> FUN INT function2 end_func .)


state 49

    (43) function2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LPAREN          shift and go to state 60


state 50

    (40) function -> FUN CHAR function2 end_func .

    FUN             reduce using rule 40 (function -> FUN CHAR function2 end_func .)
    MAIN            reduce using rule 40 (function -> FUN CHAR function2 end_func .)
    $end            reduce using rule 40 (function -> FUN CHAR function2 end_func .)


state 51

    (41) function -> FUN FLOAT function2 end_func .

    FUN             reduce using rule 41 (function -> FUN FLOAT function2 end_func .)
    MAIN            reduce using rule 41 (function -> FUN FLOAT function2 end_func .)
    $end            reduce using rule 41 (function -> FUN FLOAT function2 end_func .)


state 52

    (24) var2 -> var2 tipo var1 SEMICOLON . addV
    (23) addV -> .

    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    FUN             reduce using rule 23 (addV -> .)
    MAIN            reduce using rule 23 (addV -> .)
    $end            reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)
    READ            reduce using rule 23 (addV -> .)
    PRINT           reduce using rule 23 (addV -> .)
    FOR             reduce using rule 23 (addV -> .)
    IF              reduce using rule 23 (addV -> .)
    WHILE           reduce using rule 23 (addV -> .)
    RCURLY          reduce using rule 23 (addV -> .)
    RETURN          reduce using rule 23 (addV -> .)

    addV                           shift and go to state 61

state 53

    (16) var1 -> ID COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    CTEI            reduce using rule 138 (empty -> .)
    CTEF            reduce using rule 138 (empty -> .)
    CTEC            reduce using rule 138 (empty -> .)
    CTESTRING       reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

  ! ID              [ reduce using rule 138 (empty -> .) ]

    var1                           shift and go to state 62
    empty                          shift and go to state 40

state 54

    (17) var1 -> ID arr .
    (18) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID arr .)
    MUL             reduce using rule 17 (var1 -> ID arr .)
    DIV             reduce using rule 17 (var1 -> ID arr .)
    PLUS            reduce using rule 17 (var1 -> ID arr .)
    MINUS           reduce using rule 17 (var1 -> ID arr .)
    GT              reduce using rule 17 (var1 -> ID arr .)
    LT              reduce using rule 17 (var1 -> ID arr .)
    GTE             reduce using rule 17 (var1 -> ID arr .)
    LTE             reduce using rule 17 (var1 -> ID arr .)
    NE              reduce using rule 17 (var1 -> ID arr .)
    COMPARE         reduce using rule 17 (var1 -> ID arr .)
    AND             reduce using rule 17 (var1 -> ID arr .)
    OR              reduce using rule 17 (var1 -> ID arr .)
    RBRACKET        reduce using rule 17 (var1 -> ID arr .)
    RPAREN          reduce using rule 17 (var1 -> ID arr .)
    TO              reduce using rule 17 (var1 -> ID arr .)
    INT             reduce using rule 17 (var1 -> ID arr .)
    FLOAT           reduce using rule 17 (var1 -> ID arr .)
    CHAR            reduce using rule 17 (var1 -> ID arr .)
    CTEI            reduce using rule 17 (var1 -> ID arr .)
    CTEF            reduce using rule 17 (var1 -> ID arr .)
    CTEC            reduce using rule 17 (var1 -> ID arr .)
    CTESTRING       reduce using rule 17 (var1 -> ID arr .)
    LPAREN          reduce using rule 17 (var1 -> ID arr .)
    ID              reduce using rule 17 (var1 -> ID arr .)
    COMMA           shift and go to state 63

  ! COMMA           [ reduce using rule 17 (var1 -> ID arr .) ]


state 55

    (19) var1 -> ID mat . COMMA var1 addV
    (20) var1 -> ID mat .
    (21) var1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 20 (var1 -> ID mat .)
    MUL             reduce using rule 20 (var1 -> ID mat .)
    DIV             reduce using rule 20 (var1 -> ID mat .)
    PLUS            reduce using rule 20 (var1 -> ID mat .)
    MINUS           reduce using rule 20 (var1 -> ID mat .)
    GT              reduce using rule 20 (var1 -> ID mat .)
    LT              reduce using rule 20 (var1 -> ID mat .)
    GTE             reduce using rule 20 (var1 -> ID mat .)
    LTE             reduce using rule 20 (var1 -> ID mat .)
    NE              reduce using rule 20 (var1 -> ID mat .)
    COMPARE         reduce using rule 20 (var1 -> ID mat .)
    AND             reduce using rule 20 (var1 -> ID mat .)
    OR              reduce using rule 20 (var1 -> ID mat .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat .)
    RPAREN          reduce using rule 20 (var1 -> ID mat .)
    TO              reduce using rule 20 (var1 -> ID mat .)
    INT             reduce using rule 20 (var1 -> ID mat .)
    FLOAT           reduce using rule 20 (var1 -> ID mat .)
    CHAR            reduce using rule 20 (var1 -> ID mat .)
    CTEI            reduce using rule 20 (var1 -> ID mat .)
    CTEF            reduce using rule 20 (var1 -> ID mat .)
    CTEC            reduce using rule 20 (var1 -> ID mat .)
    CTESTRING       reduce using rule 20 (var1 -> ID mat .)
    LPAREN          reduce using rule 20 (var1 -> ID mat .)
    ID              reduce using rule 20 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 66
    INVERSA         shift and go to state 67
    DETERMINANTE    shift and go to state 68

  ! COMMA           [ reduce using rule 20 (var1 -> ID mat .) ]

    especial                       shift and go to state 65

state 56

    (29) arr -> LBRACKET . CTEI RBRACKET
    (30) arr -> LBRACKET . exp RBRACKET
    (31) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 69
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)

    exp                            shift and go to state 70
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 57

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 84


state 58

    (70) param2 -> param2 tipo . param1 addParam
    (61) param1 -> . ID
    (62) param1 -> . ID COMMA var1
    (63) param1 -> . ID arr
    (64) param1 -> . ID arr COMMA var1
    (65) param1 -> . ID mat COMMA var1
    (66) param1 -> . ID mat
    (67) param1 -> . ID mat especial
    (68) param1 -> . empty
    (138) empty -> .

    ID              shift and go to state 86
    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    param1                         shift and go to state 85
    empty                          shift and go to state 87

state 59

    (42) function1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (70) param2 -> . param2 tipo param1 addParam
    (71) param2 -> . empty
    (138) empty -> .

    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    param2                         shift and go to state 88
    empty                          shift and go to state 45

state 60

    (43) function2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (70) param2 -> . param2 tipo param1 addParam
    (71) param2 -> . empty
    (138) empty -> .

    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    param2                         shift and go to state 89
    empty                          shift and go to state 45

state 61

    (24) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 62

    (16) var1 -> ID COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 90

state 63

    (18) var1 -> ID arr COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    CTEI            reduce using rule 138 (empty -> .)
    CTEF            reduce using rule 138 (empty -> .)
    CTEC            reduce using rule 138 (empty -> .)
    CTESTRING       reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

  ! ID              [ reduce using rule 138 (empty -> .) ]

    var1                           shift and go to state 91
    empty                          shift and go to state 40

state 64

    (19) var1 -> ID mat COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)
    CTEI            reduce using rule 138 (empty -> .)
    CTEF            reduce using rule 138 (empty -> .)
    CTEC            reduce using rule 138 (empty -> .)
    CTESTRING       reduce using rule 138 (empty -> .)
    LPAREN          reduce using rule 138 (empty -> .)

  ! ID              [ reduce using rule 138 (empty -> .) ]

    var1                           shift and go to state 92
    empty                          shift and go to state 40

state 65

    (21) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat especial .)
    MUL             reduce using rule 21 (var1 -> ID mat especial .)
    DIV             reduce using rule 21 (var1 -> ID mat especial .)
    PLUS            reduce using rule 21 (var1 -> ID mat especial .)
    MINUS           reduce using rule 21 (var1 -> ID mat especial .)
    GT              reduce using rule 21 (var1 -> ID mat especial .)
    LT              reduce using rule 21 (var1 -> ID mat especial .)
    GTE             reduce using rule 21 (var1 -> ID mat especial .)
    LTE             reduce using rule 21 (var1 -> ID mat especial .)
    NE              reduce using rule 21 (var1 -> ID mat especial .)
    COMPARE         reduce using rule 21 (var1 -> ID mat especial .)
    AND             reduce using rule 21 (var1 -> ID mat especial .)
    OR              reduce using rule 21 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    COMMA           reduce using rule 21 (var1 -> ID mat especial .)
    TO              reduce using rule 21 (var1 -> ID mat especial .)
    INT             reduce using rule 21 (var1 -> ID mat especial .)
    FLOAT           reduce using rule 21 (var1 -> ID mat especial .)
    CHAR            reduce using rule 21 (var1 -> ID mat especial .)
    CTEI            reduce using rule 21 (var1 -> ID mat especial .)
    CTEF            reduce using rule 21 (var1 -> ID mat especial .)
    CTEC            reduce using rule 21 (var1 -> ID mat especial .)
    CTESTRING       reduce using rule 21 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    ID              reduce using rule 21 (var1 -> ID mat especial .)


state 66

    (26) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 26 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 26 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 26 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 26 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 26 (especial -> TRANSPUESTA .)
    GT              reduce using rule 26 (especial -> TRANSPUESTA .)
    LT              reduce using rule 26 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    NE              reduce using rule 26 (especial -> TRANSPUESTA .)
    COMPARE         reduce using rule 26 (especial -> TRANSPUESTA .)
    AND             reduce using rule 26 (especial -> TRANSPUESTA .)
    OR              reduce using rule 26 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 26 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 26 (especial -> TRANSPUESTA .)
    TO              reduce using rule 26 (especial -> TRANSPUESTA .)
    INT             reduce using rule 26 (especial -> TRANSPUESTA .)
    FLOAT           reduce using rule 26 (especial -> TRANSPUESTA .)
    CHAR            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTESTRING       reduce using rule 26 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    ID              reduce using rule 26 (especial -> TRANSPUESTA .)


state 67

    (27) especial -> INVERSA .

    SEMICOLON       reduce using rule 27 (especial -> INVERSA .)
    MUL             reduce using rule 27 (especial -> INVERSA .)
    DIV             reduce using rule 27 (especial -> INVERSA .)
    PLUS            reduce using rule 27 (especial -> INVERSA .)
    MINUS           reduce using rule 27 (especial -> INVERSA .)
    GT              reduce using rule 27 (especial -> INVERSA .)
    LT              reduce using rule 27 (especial -> INVERSA .)
    GTE             reduce using rule 27 (especial -> INVERSA .)
    LTE             reduce using rule 27 (especial -> INVERSA .)
    NE              reduce using rule 27 (especial -> INVERSA .)
    COMPARE         reduce using rule 27 (especial -> INVERSA .)
    AND             reduce using rule 27 (especial -> INVERSA .)
    OR              reduce using rule 27 (especial -> INVERSA .)
    RBRACKET        reduce using rule 27 (especial -> INVERSA .)
    RPAREN          reduce using rule 27 (especial -> INVERSA .)
    COMMA           reduce using rule 27 (especial -> INVERSA .)
    TO              reduce using rule 27 (especial -> INVERSA .)
    INT             reduce using rule 27 (especial -> INVERSA .)
    FLOAT           reduce using rule 27 (especial -> INVERSA .)
    CHAR            reduce using rule 27 (especial -> INVERSA .)
    CTEI            reduce using rule 27 (especial -> INVERSA .)
    CTEF            reduce using rule 27 (especial -> INVERSA .)
    CTEC            reduce using rule 27 (especial -> INVERSA .)
    CTESTRING       reduce using rule 27 (especial -> INVERSA .)
    LPAREN          reduce using rule 27 (especial -> INVERSA .)
    ID              reduce using rule 27 (especial -> INVERSA .)


state 68

    (28) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 28 (especial -> DETERMINANTE .)
    MUL             reduce using rule 28 (especial -> DETERMINANTE .)
    DIV             reduce using rule 28 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 28 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 28 (especial -> DETERMINANTE .)
    GT              reduce using rule 28 (especial -> DETERMINANTE .)
    LT              reduce using rule 28 (especial -> DETERMINANTE .)
    GTE             reduce using rule 28 (especial -> DETERMINANTE .)
    LTE             reduce using rule 28 (especial -> DETERMINANTE .)
    NE              reduce using rule 28 (especial -> DETERMINANTE .)
    COMPARE         reduce using rule 28 (especial -> DETERMINANTE .)
    AND             reduce using rule 28 (especial -> DETERMINANTE .)
    OR              reduce using rule 28 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 28 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 28 (especial -> DETERMINANTE .)
    TO              reduce using rule 28 (especial -> DETERMINANTE .)
    INT             reduce using rule 28 (especial -> DETERMINANTE .)
    FLOAT           reduce using rule 28 (especial -> DETERMINANTE .)
    CHAR            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 28 (especial -> DETERMINANTE .)
    CTESTRING       reduce using rule 28 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    ID              reduce using rule 28 (especial -> DETERMINANTE .)


state 69

    (29) arr -> LBRACKET CTEI . RBRACKET
    (31) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (132) pexp -> CTEI . saveCTE
    (141) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 93
    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 141 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 70

    (30) arr -> LBRACKET exp . RBRACKET
    (32) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 95


state 71

    (101) exp -> nexp .
    (102) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 101 (exp -> nexp .)
    RPAREN          reduce using rule 101 (exp -> nexp .)
    COMMA           reduce using rule 101 (exp -> nexp .)
    SEMICOLON       reduce using rule 101 (exp -> nexp .)
    TO              reduce using rule 101 (exp -> nexp .)
    OR              shift and go to state 96


state 72

    (109) nexp -> compexp .
    (110) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 109 (nexp -> compexp .)
    RBRACKET        reduce using rule 109 (nexp -> compexp .)
    RPAREN          reduce using rule 109 (nexp -> compexp .)
    COMMA           reduce using rule 109 (nexp -> compexp .)
    SEMICOLON       reduce using rule 109 (nexp -> compexp .)
    TO              reduce using rule 109 (nexp -> compexp .)
    AND             shift and go to state 97


state 73

    (111) compexp -> sumexp .
    (113) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (114) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (115) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (118) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 111 (compexp -> sumexp .)
    OR              reduce using rule 111 (compexp -> sumexp .)
    RBRACKET        reduce using rule 111 (compexp -> sumexp .)
    RPAREN          reduce using rule 111 (compexp -> sumexp .)
    COMMA           reduce using rule 111 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 111 (compexp -> sumexp .)
    TO              reduce using rule 111 (compexp -> sumexp .)
    GT              shift and go to state 98
    LT              shift and go to state 99
    GTE             shift and go to state 100
    LTE             shift and go to state 101
    NE              shift and go to state 102
    COMPARE         shift and go to state 103


state 74

    (112) compexp -> compexp1 . sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    sumexp                         shift and go to state 104
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 75

    (119) sumexp -> mulexp .
    (120) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 119 (sumexp -> mulexp .)
    LT              reduce using rule 119 (sumexp -> mulexp .)
    GTE             reduce using rule 119 (sumexp -> mulexp .)
    LTE             reduce using rule 119 (sumexp -> mulexp .)
    NE              reduce using rule 119 (sumexp -> mulexp .)
    COMPARE         reduce using rule 119 (sumexp -> mulexp .)
    AND             reduce using rule 119 (sumexp -> mulexp .)
    OR              reduce using rule 119 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 119 (sumexp -> mulexp .)
    RPAREN          reduce using rule 119 (sumexp -> mulexp .)
    COMMA           reduce using rule 119 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 119 (sumexp -> mulexp .)
    TO              reduce using rule 119 (sumexp -> mulexp .)
    CTEI            reduce using rule 119 (sumexp -> mulexp .)
    CTEF            reduce using rule 119 (sumexp -> mulexp .)
    CTEC            reduce using rule 119 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 119 (sumexp -> mulexp .)
    LPAREN          reduce using rule 119 (sumexp -> mulexp .)
    ID              reduce using rule 119 (sumexp -> mulexp .)
    MUL             reduce using rule 119 (sumexp -> mulexp .)
    DIV             reduce using rule 119 (sumexp -> mulexp .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! PLUS            [ reduce using rule 119 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 119 (sumexp -> mulexp .) ]


state 76

    (128) mulexp -> pexp .
    (129) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 128 (mulexp -> pexp .)
    MINUS           reduce using rule 128 (mulexp -> pexp .)
    GT              reduce using rule 128 (mulexp -> pexp .)
    LT              reduce using rule 128 (mulexp -> pexp .)
    GTE             reduce using rule 128 (mulexp -> pexp .)
    LTE             reduce using rule 128 (mulexp -> pexp .)
    NE              reduce using rule 128 (mulexp -> pexp .)
    COMPARE         reduce using rule 128 (mulexp -> pexp .)
    AND             reduce using rule 128 (mulexp -> pexp .)
    OR              reduce using rule 128 (mulexp -> pexp .)
    RBRACKET        reduce using rule 128 (mulexp -> pexp .)
    RPAREN          reduce using rule 128 (mulexp -> pexp .)
    COMMA           reduce using rule 128 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 128 (mulexp -> pexp .)
    TO              reduce using rule 128 (mulexp -> pexp .)
    CTEI            reduce using rule 128 (mulexp -> pexp .)
    CTEF            reduce using rule 128 (mulexp -> pexp .)
    CTEC            reduce using rule 128 (mulexp -> pexp .)
    CTESTRING       reduce using rule 128 (mulexp -> pexp .)
    LPAREN          reduce using rule 128 (mulexp -> pexp .)
    ID              reduce using rule 128 (mulexp -> pexp .)
    MUL             shift and go to state 108
    DIV             shift and go to state 109

  ! MUL             [ reduce using rule 128 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 128 (mulexp -> pexp .) ]


state 77

    (131) pexp -> var1 . saveId
    (139) saveId -> .

    MUL             reduce using rule 139 (saveId -> .)
    DIV             reduce using rule 139 (saveId -> .)
    PLUS            reduce using rule 139 (saveId -> .)
    MINUS           reduce using rule 139 (saveId -> .)
    GT              reduce using rule 139 (saveId -> .)
    LT              reduce using rule 139 (saveId -> .)
    GTE             reduce using rule 139 (saveId -> .)
    LTE             reduce using rule 139 (saveId -> .)
    NE              reduce using rule 139 (saveId -> .)
    COMPARE         reduce using rule 139 (saveId -> .)
    AND             reduce using rule 139 (saveId -> .)
    OR              reduce using rule 139 (saveId -> .)
    RBRACKET        reduce using rule 139 (saveId -> .)
    RPAREN          reduce using rule 139 (saveId -> .)
    COMMA           reduce using rule 139 (saveId -> .)
    SEMICOLON       reduce using rule 139 (saveId -> .)
    TO              reduce using rule 139 (saveId -> .)
    CTEI            reduce using rule 139 (saveId -> .)
    CTEF            reduce using rule 139 (saveId -> .)
    CTEC            reduce using rule 139 (saveId -> .)
    CTESTRING       reduce using rule 139 (saveId -> .)
    LPAREN          reduce using rule 139 (saveId -> .)
    ID              reduce using rule 139 (saveId -> .)

    saveId                         shift and go to state 110

state 78

    (133) pexp -> CTEF . saveCTE
    (141) saveCTE -> .

    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)
    RBRACKET        reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    COMMA           reduce using rule 141 (saveCTE -> .)
    SEMICOLON       reduce using rule 141 (saveCTE -> .)
    TO              reduce using rule 141 (saveCTE -> .)
    CTEI            reduce using rule 141 (saveCTE -> .)
    CTEF            reduce using rule 141 (saveCTE -> .)
    CTEC            reduce using rule 141 (saveCTE -> .)
    CTESTRING       reduce using rule 141 (saveCTE -> .)
    LPAREN          reduce using rule 141 (saveCTE -> .)
    ID              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 111

state 79

    (134) pexp -> CTEC . saveCTE
    (141) saveCTE -> .

    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)
    RBRACKET        reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    COMMA           reduce using rule 141 (saveCTE -> .)
    SEMICOLON       reduce using rule 141 (saveCTE -> .)
    TO              reduce using rule 141 (saveCTE -> .)
    CTEI            reduce using rule 141 (saveCTE -> .)
    CTEF            reduce using rule 141 (saveCTE -> .)
    CTEC            reduce using rule 141 (saveCTE -> .)
    CTESTRING       reduce using rule 141 (saveCTE -> .)
    LPAREN          reduce using rule 141 (saveCTE -> .)
    ID              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 112

state 80

    (135) pexp -> CTESTRING . saveCTE
    (141) saveCTE -> .

    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)
    RBRACKET        reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    COMMA           reduce using rule 141 (saveCTE -> .)
    SEMICOLON       reduce using rule 141 (saveCTE -> .)
    TO              reduce using rule 141 (saveCTE -> .)
    CTEI            reduce using rule 141 (saveCTE -> .)
    CTEF            reduce using rule 141 (saveCTE -> .)
    CTEC            reduce using rule 141 (saveCTE -> .)
    CTESTRING       reduce using rule 141 (saveCTE -> .)
    LPAREN          reduce using rule 141 (saveCTE -> .)
    ID              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 113

state 81

    (136) pexp -> llamada .

    MUL             reduce using rule 136 (pexp -> llamada .)
    DIV             reduce using rule 136 (pexp -> llamada .)
    PLUS            reduce using rule 136 (pexp -> llamada .)
    MINUS           reduce using rule 136 (pexp -> llamada .)
    GT              reduce using rule 136 (pexp -> llamada .)
    LT              reduce using rule 136 (pexp -> llamada .)
    GTE             reduce using rule 136 (pexp -> llamada .)
    LTE             reduce using rule 136 (pexp -> llamada .)
    NE              reduce using rule 136 (pexp -> llamada .)
    COMPARE         reduce using rule 136 (pexp -> llamada .)
    AND             reduce using rule 136 (pexp -> llamada .)
    OR              reduce using rule 136 (pexp -> llamada .)
    RBRACKET        reduce using rule 136 (pexp -> llamada .)
    RPAREN          reduce using rule 136 (pexp -> llamada .)
    COMMA           reduce using rule 136 (pexp -> llamada .)
    SEMICOLON       reduce using rule 136 (pexp -> llamada .)
    TO              reduce using rule 136 (pexp -> llamada .)
    CTEI            reduce using rule 136 (pexp -> llamada .)
    CTEF            reduce using rule 136 (pexp -> llamada .)
    CTEC            reduce using rule 136 (pexp -> llamada .)
    CTESTRING       reduce using rule 136 (pexp -> llamada .)
    LPAREN          reduce using rule 136 (pexp -> llamada .)
    ID              reduce using rule 136 (pexp -> llamada .)


state 82

    (137) pexp -> LPAREN . exp RPAREN
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    exp                            shift and go to state 114
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 83

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (74) llamada -> ID . era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (79) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 79 (era_call -> .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55
    era_call                       shift and go to state 115

state 84

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (138) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    RCURLY          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 116
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 85

    (70) param2 -> param2 tipo param1 . addParam
    (69) addParam -> .

    RPAREN          reduce using rule 69 (addParam -> .)
    INT             reduce using rule 69 (addParam -> .)
    FLOAT           reduce using rule 69 (addParam -> .)
    CHAR            reduce using rule 69 (addParam -> .)

    addParam                       shift and go to state 117

state 86

    (61) param1 -> ID .
    (62) param1 -> ID . COMMA var1
    (63) param1 -> ID . arr
    (64) param1 -> ID . arr COMMA var1
    (65) param1 -> ID . mat COMMA var1
    (66) param1 -> ID . mat
    (67) param1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    RPAREN          reduce using rule 61 (param1 -> ID .)
    INT             reduce using rule 61 (param1 -> ID .)
    FLOAT           reduce using rule 61 (param1 -> ID .)
    CHAR            reduce using rule 61 (param1 -> ID .)
    COMMA           shift and go to state 118
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 119
    mat                            shift and go to state 120

state 87

    (68) param1 -> empty .

    RPAREN          reduce using rule 68 (param1 -> empty .)
    INT             reduce using rule 68 (param1 -> empty .)
    FLOAT           reduce using rule 68 (param1 -> empty .)
    CHAR            reduce using rule 68 (param1 -> empty .)


state 88

    (42) function1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RCURLY
    (70) param2 -> param2 . tipo param1 addParam
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 121
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 89

    (43) function2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (70) param2 -> param2 . tipo param1 addParam
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 122
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 90

    (16) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    INT             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 16 (var1 -> ID COMMA var1 addV .)


state 91

    (18) var1 -> ID arr COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 123

state 92

    (19) var1 -> ID mat COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 124

state 93

    (29) arr -> LBRACKET CTEI RBRACKET .
    (31) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 125


state 94

    (132) pexp -> CTEI saveCTE .

    MUL             reduce using rule 132 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 132 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 132 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 132 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 132 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 132 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 132 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 132 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 132 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 132 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 132 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 132 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 132 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 132 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 132 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 132 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 132 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 132 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 132 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 132 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 132 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 132 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 132 (pexp -> CTEI saveCTE .)


state 95

    (30) arr -> LBRACKET exp RBRACKET .
    (32) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 126


state 96

    (102) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 127

state 97

    (110) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 128

state 98

    (113) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 129

state 99

    (114) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 130

state 100

    (115) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 131

state 101

    (116) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 132

state 102

    (117) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 133

state 103

    (118) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 134

state 104

    (112) compexp -> compexp1 sumexp .

    AND             reduce using rule 112 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 112 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 112 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 112 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 112 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 112 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 112 (compexp -> compexp1 sumexp .)


state 105

    (132) pexp -> CTEI . saveCTE
    (141) saveCTE -> .

    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)
    RBRACKET        reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    COMMA           reduce using rule 141 (saveCTE -> .)
    SEMICOLON       reduce using rule 141 (saveCTE -> .)
    TO              reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    CTEI            reduce using rule 141 (saveCTE -> .)
    CTEF            reduce using rule 141 (saveCTE -> .)
    CTEC            reduce using rule 141 (saveCTE -> .)
    CTESTRING       reduce using rule 141 (saveCTE -> .)
    LPAREN          reduce using rule 141 (saveCTE -> .)
    ID              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 94

state 106

    (120) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 135

state 107

    (121) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 136

state 108

    (129) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 137

state 109

    (130) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 138

state 110

    (131) pexp -> var1 saveId .

    MUL             reduce using rule 131 (pexp -> var1 saveId .)
    DIV             reduce using rule 131 (pexp -> var1 saveId .)
    PLUS            reduce using rule 131 (pexp -> var1 saveId .)
    MINUS           reduce using rule 131 (pexp -> var1 saveId .)
    GT              reduce using rule 131 (pexp -> var1 saveId .)
    LT              reduce using rule 131 (pexp -> var1 saveId .)
    GTE             reduce using rule 131 (pexp -> var1 saveId .)
    LTE             reduce using rule 131 (pexp -> var1 saveId .)
    NE              reduce using rule 131 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 131 (pexp -> var1 saveId .)
    AND             reduce using rule 131 (pexp -> var1 saveId .)
    OR              reduce using rule 131 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 131 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 131 (pexp -> var1 saveId .)
    COMMA           reduce using rule 131 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 131 (pexp -> var1 saveId .)
    TO              reduce using rule 131 (pexp -> var1 saveId .)
    CTEI            reduce using rule 131 (pexp -> var1 saveId .)
    CTEF            reduce using rule 131 (pexp -> var1 saveId .)
    CTEC            reduce using rule 131 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 131 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 131 (pexp -> var1 saveId .)
    ID              reduce using rule 131 (pexp -> var1 saveId .)


state 111

    (133) pexp -> CTEF saveCTE .

    MUL             reduce using rule 133 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 133 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 133 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 133 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 133 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 133 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 133 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 133 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 133 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 133 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 133 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 133 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 133 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 133 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 133 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 133 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 133 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 133 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 133 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 133 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 133 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 133 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 133 (pexp -> CTEF saveCTE .)


state 112

    (134) pexp -> CTEC saveCTE .

    MUL             reduce using rule 134 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 134 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 134 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 134 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 134 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 134 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 134 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 134 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 134 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 134 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 134 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 134 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 134 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 134 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 134 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 134 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 134 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 134 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 134 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 134 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 134 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 134 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 134 (pexp -> CTEC saveCTE .)


state 113

    (135) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 135 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 135 (pexp -> CTESTRING saveCTE .)


state 114

    (137) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 139


state 115

    (74) llamada -> ID era_call . LPAREN aux_exp verifica_parametros RPAREN gosub_quad

    LPAREN          shift and go to state 140


state 116

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 141
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 117

    (70) param2 -> param2 tipo param1 addParam .

    RPAREN          reduce using rule 70 (param2 -> param2 tipo param1 addParam .)
    INT             reduce using rule 70 (param2 -> param2 tipo param1 addParam .)
    FLOAT           reduce using rule 70 (param2 -> param2 tipo param1 addParam .)
    CHAR            reduce using rule 70 (param2 -> param2 tipo param1 addParam .)


state 118

    (62) param1 -> ID COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    var1                           shift and go to state 157
    empty                          shift and go to state 40

state 119

    (63) param1 -> ID arr .
    (64) param1 -> ID arr . COMMA var1

    RPAREN          reduce using rule 63 (param1 -> ID arr .)
    INT             reduce using rule 63 (param1 -> ID arr .)
    FLOAT           reduce using rule 63 (param1 -> ID arr .)
    CHAR            reduce using rule 63 (param1 -> ID arr .)
    COMMA           shift and go to state 158


state 120

    (65) param1 -> ID mat . COMMA var1
    (66) param1 -> ID mat .
    (67) param1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

    COMMA           shift and go to state 159
    RPAREN          reduce using rule 66 (param1 -> ID mat .)
    INT             reduce using rule 66 (param1 -> ID mat .)
    FLOAT           reduce using rule 66 (param1 -> ID mat .)
    CHAR            reduce using rule 66 (param1 -> ID mat .)
    TRANSPUESTA     shift and go to state 66
    INVERSA         shift and go to state 67
    DETERMINANTE    shift and go to state 68

    especial                       shift and go to state 160

state 121

    (42) function1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 161


state 122

    (43) function2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    SEMICOLON       shift and go to state 162


state 123

    (18) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)


state 124

    (19) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMPARE         reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTESTRING       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)


state 125

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 163
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)

    exp                            shift and go to state 164
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 126

    (32) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 166
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)

    exp                            shift and go to state 165
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 127

    (102) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    nexp                           shift and go to state 167
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 128

    (110) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    compexp                        shift and go to state 168
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 129

    (113) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 169
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 130

    (114) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 131

    (115) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 132

    (116) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 172
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 133

    (117) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 173
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 134

    (118) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    sumexp                         shift and go to state 174
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 135

    (120) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    mulexp                         shift and go to state 175
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 136

    (121) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    mulexp                         shift and go to state 176
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 137

    (129) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    pexp                           shift and go to state 177
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 138

    (130) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RBRACKET        reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)

  ! CTEI            [ reduce using rule 138 (empty -> .) ]
  ! CTEF            [ reduce using rule 138 (empty -> .) ]
  ! CTEC            [ reduce using rule 138 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 138 (empty -> .) ]
  ! LPAREN          [ reduce using rule 138 (empty -> .) ]
  ! ID              [ reduce using rule 138 (empty -> .) ]

    pexp                           shift and go to state 178
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 139

    (137) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 137 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 137 (pexp -> LPAREN exp RPAREN .)


state 140

    (74) llamada -> ID era_call LPAREN . aux_exp verifica_parametros RPAREN gosub_quad
    (75) aux_exp -> . exp
    (76) aux_exp -> . exp quad_param COMMA cuenta_parametros aux_exp
    (77) aux_exp -> . empty ZeroParameters
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (138) empty -> .
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad

    RPAREN          reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83

    aux_exp                        shift and go to state 179
    exp                            shift and go to state 180
    empty                          shift and go to state 181
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81

state 141

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 182


state 142

    (47) statement -> statement1 . statement
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement1                     shift and go to state 142
    statement                      shift and go to state 183
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 143

    (48) statement -> empty .

    RCURLY          reduce using rule 48 (statement -> empty .)
    RETURN          reduce using rule 48 (statement -> empty .)


state 144

    (49) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 184


state 145

    (50) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 185


state 146

    (51) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 186


state 147

    (52) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 187


state 148

    (53) statement1 -> for .

    ID              reduce using rule 53 (statement1 -> for .)
    READ            reduce using rule 53 (statement1 -> for .)
    PRINT           reduce using rule 53 (statement1 -> for .)
    FOR             reduce using rule 53 (statement1 -> for .)
    IF              reduce using rule 53 (statement1 -> for .)
    WHILE           reduce using rule 53 (statement1 -> for .)
    RCURLY          reduce using rule 53 (statement1 -> for .)
    RETURN          reduce using rule 53 (statement1 -> for .)


state 149

    (54) statement1 -> if .

    ID              reduce using rule 54 (statement1 -> if .)
    READ            reduce using rule 54 (statement1 -> if .)
    PRINT           reduce using rule 54 (statement1 -> if .)
    FOR             reduce using rule 54 (statement1 -> if .)
    IF              reduce using rule 54 (statement1 -> if .)
    WHILE           reduce using rule 54 (statement1 -> if .)
    RCURLY          reduce using rule 54 (statement1 -> if .)
    RETURN          reduce using rule 54 (statement1 -> if .)


state 150

    (55) statement1 -> while .

    ID              reduce using rule 55 (statement1 -> while .)
    READ            reduce using rule 55 (statement1 -> while .)
    PRINT           reduce using rule 55 (statement1 -> while .)
    FOR             reduce using rule 55 (statement1 -> while .)
    IF              reduce using rule 55 (statement1 -> while .)
    WHILE           reduce using rule 55 (statement1 -> while .)
    RCURLY          reduce using rule 55 (statement1 -> while .)
    RETURN          reduce using rule 55 (statement1 -> while .)


state 151

    (56) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> ID . era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (140) saveId2 -> .
    (79) era_call -> .

    EQUALS          reduce using rule 140 (saveId2 -> .)
    LBRACKET        reduce using rule 140 (saveId2 -> .)
    LPAREN          reduce using rule 79 (era_call -> .)

    saveId2                        shift and go to state 188
    era_call                       shift and go to state 115

state 152

    (100) lectura -> READ . operatorRead LPAREN var1 operatorReadQuad RPAREN
    (126) operatorRead -> .

    LPAREN          reduce using rule 126 (operatorRead -> .)

    operatorRead                   shift and go to state 189

state 153

    (93) escritura -> PRINT . LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN

    LPAREN          shift and go to state 190


state 154

    (87) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (85) for_op -> .

    LPAREN          reduce using rule 85 (for_op -> .)

    for_op                         shift and go to state 191

state 155

    (82) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 192


state 156

    (92) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (91) while_op -> .

    LPAREN          reduce using rule 91 (while_op -> .)

    while_op                       shift and go to state 193

state 157

    (62) param1 -> ID COMMA var1 .

    RPAREN          reduce using rule 62 (param1 -> ID COMMA var1 .)
    INT             reduce using rule 62 (param1 -> ID COMMA var1 .)
    FLOAT           reduce using rule 62 (param1 -> ID COMMA var1 .)
    CHAR            reduce using rule 62 (param1 -> ID COMMA var1 .)


state 158

    (64) param1 -> ID arr COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    var1                           shift and go to state 194
    empty                          shift and go to state 40

state 159

    (65) param1 -> ID mat COMMA . var1
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 138 (empty -> .)
    INT             reduce using rule 138 (empty -> .)
    FLOAT           reduce using rule 138 (empty -> .)
    CHAR            reduce using rule 138 (empty -> .)

    var1                           shift and go to state 195
    empty                          shift and go to state 40

state 160

    (67) param1 -> ID mat especial .

    RPAREN          reduce using rule 67 (param1 -> ID mat especial .)
    INT             reduce using rule 67 (param1 -> ID mat especial .)
    FLOAT           reduce using rule 67 (param1 -> ID mat especial .)
    CHAR            reduce using rule 67 (param1 -> ID mat especial .)


state 161

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 196


state 162

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LCURLY          shift and go to state 197


state 163

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (132) pexp -> CTEI . saveCTE
    (141) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 198
    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 141 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 164

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 199


state 165

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 200


state 166

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (132) pexp -> CTEI . saveCTE
    (141) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 201
    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 141 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 167

    (102) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (103) genera_quad_or -> .

    RBRACKET        reduce using rule 103 (genera_quad_or -> .)
    RPAREN          reduce using rule 103 (genera_quad_or -> .)
    COMMA           reduce using rule 103 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 103 (genera_quad_or -> .)
    TO              reduce using rule 103 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 202

state 168

    (110) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (104) genera_quad_and -> .

    OR              reduce using rule 104 (genera_quad_and -> .)
    RBRACKET        reduce using rule 104 (genera_quad_and -> .)
    RPAREN          reduce using rule 104 (genera_quad_and -> .)
    COMMA           reduce using rule 104 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 104 (genera_quad_and -> .)
    TO              reduce using rule 104 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 203

state 169

    (113) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 204

state 170

    (114) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 205

state 171

    (115) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 206

state 172

    (116) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 207

state 173

    (117) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 208

state 174

    (118) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (105) compare_quad -> .

    CTEI            reduce using rule 105 (compare_quad -> .)
    CTEF            reduce using rule 105 (compare_quad -> .)
    CTEC            reduce using rule 105 (compare_quad -> .)
    CTESTRING       reduce using rule 105 (compare_quad -> .)
    LPAREN          reduce using rule 105 (compare_quad -> .)
    ID              reduce using rule 105 (compare_quad -> .)
    PLUS            reduce using rule 105 (compare_quad -> .)
    MINUS           reduce using rule 105 (compare_quad -> .)
    MUL             reduce using rule 105 (compare_quad -> .)
    DIV             reduce using rule 105 (compare_quad -> .)
    AND             reduce using rule 105 (compare_quad -> .)
    OR              reduce using rule 105 (compare_quad -> .)
    RBRACKET        reduce using rule 105 (compare_quad -> .)
    RPAREN          reduce using rule 105 (compare_quad -> .)
    COMMA           reduce using rule 105 (compare_quad -> .)
    SEMICOLON       reduce using rule 105 (compare_quad -> .)
    TO              reduce using rule 105 (compare_quad -> .)

    compare_quad                   shift and go to state 209

state 175

    (120) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (122) genera_sum_quad -> .

    GT              reduce using rule 122 (genera_sum_quad -> .)
    LT              reduce using rule 122 (genera_sum_quad -> .)
    GTE             reduce using rule 122 (genera_sum_quad -> .)
    LTE             reduce using rule 122 (genera_sum_quad -> .)
    NE              reduce using rule 122 (genera_sum_quad -> .)
    COMPARE         reduce using rule 122 (genera_sum_quad -> .)
    AND             reduce using rule 122 (genera_sum_quad -> .)
    OR              reduce using rule 122 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 122 (genera_sum_quad -> .)
    RPAREN          reduce using rule 122 (genera_sum_quad -> .)
    COMMA           reduce using rule 122 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 122 (genera_sum_quad -> .)
    TO              reduce using rule 122 (genera_sum_quad -> .)
    CTEI            reduce using rule 122 (genera_sum_quad -> .)
    CTEF            reduce using rule 122 (genera_sum_quad -> .)
    CTEC            reduce using rule 122 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 122 (genera_sum_quad -> .)
    LPAREN          reduce using rule 122 (genera_sum_quad -> .)
    ID              reduce using rule 122 (genera_sum_quad -> .)
    PLUS            reduce using rule 122 (genera_sum_quad -> .)
    MINUS           reduce using rule 122 (genera_sum_quad -> .)
    MUL             reduce using rule 122 (genera_sum_quad -> .)
    DIV             reduce using rule 122 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 210

state 176

    (121) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (122) genera_sum_quad -> .

    GT              reduce using rule 122 (genera_sum_quad -> .)
    LT              reduce using rule 122 (genera_sum_quad -> .)
    GTE             reduce using rule 122 (genera_sum_quad -> .)
    LTE             reduce using rule 122 (genera_sum_quad -> .)
    NE              reduce using rule 122 (genera_sum_quad -> .)
    COMPARE         reduce using rule 122 (genera_sum_quad -> .)
    AND             reduce using rule 122 (genera_sum_quad -> .)
    OR              reduce using rule 122 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 122 (genera_sum_quad -> .)
    RPAREN          reduce using rule 122 (genera_sum_quad -> .)
    COMMA           reduce using rule 122 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 122 (genera_sum_quad -> .)
    TO              reduce using rule 122 (genera_sum_quad -> .)
    CTEI            reduce using rule 122 (genera_sum_quad -> .)
    CTEF            reduce using rule 122 (genera_sum_quad -> .)
    CTEC            reduce using rule 122 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 122 (genera_sum_quad -> .)
    LPAREN          reduce using rule 122 (genera_sum_quad -> .)
    ID              reduce using rule 122 (genera_sum_quad -> .)
    PLUS            reduce using rule 122 (genera_sum_quad -> .)
    MINUS           reduce using rule 122 (genera_sum_quad -> .)
    MUL             reduce using rule 122 (genera_sum_quad -> .)
    DIV             reduce using rule 122 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 211

state 177

    (129) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (123) genera_mul_quad -> .

    PLUS            reduce using rule 123 (genera_mul_quad -> .)
    MINUS           reduce using rule 123 (genera_mul_quad -> .)
    GT              reduce using rule 123 (genera_mul_quad -> .)
    LT              reduce using rule 123 (genera_mul_quad -> .)
    GTE             reduce using rule 123 (genera_mul_quad -> .)
    LTE             reduce using rule 123 (genera_mul_quad -> .)
    NE              reduce using rule 123 (genera_mul_quad -> .)
    COMPARE         reduce using rule 123 (genera_mul_quad -> .)
    AND             reduce using rule 123 (genera_mul_quad -> .)
    OR              reduce using rule 123 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 123 (genera_mul_quad -> .)
    RPAREN          reduce using rule 123 (genera_mul_quad -> .)
    COMMA           reduce using rule 123 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 123 (genera_mul_quad -> .)
    TO              reduce using rule 123 (genera_mul_quad -> .)
    CTEI            reduce using rule 123 (genera_mul_quad -> .)
    CTEF            reduce using rule 123 (genera_mul_quad -> .)
    CTEC            reduce using rule 123 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 123 (genera_mul_quad -> .)
    LPAREN          reduce using rule 123 (genera_mul_quad -> .)
    ID              reduce using rule 123 (genera_mul_quad -> .)
    MUL             reduce using rule 123 (genera_mul_quad -> .)
    DIV             reduce using rule 123 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 212

state 178

    (130) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (123) genera_mul_quad -> .

    PLUS            reduce using rule 123 (genera_mul_quad -> .)
    MINUS           reduce using rule 123 (genera_mul_quad -> .)
    GT              reduce using rule 123 (genera_mul_quad -> .)
    LT              reduce using rule 123 (genera_mul_quad -> .)
    GTE             reduce using rule 123 (genera_mul_quad -> .)
    LTE             reduce using rule 123 (genera_mul_quad -> .)
    NE              reduce using rule 123 (genera_mul_quad -> .)
    COMPARE         reduce using rule 123 (genera_mul_quad -> .)
    AND             reduce using rule 123 (genera_mul_quad -> .)
    OR              reduce using rule 123 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 123 (genera_mul_quad -> .)
    RPAREN          reduce using rule 123 (genera_mul_quad -> .)
    COMMA           reduce using rule 123 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 123 (genera_mul_quad -> .)
    TO              reduce using rule 123 (genera_mul_quad -> .)
    CTEI            reduce using rule 123 (genera_mul_quad -> .)
    CTEF            reduce using rule 123 (genera_mul_quad -> .)
    CTEC            reduce using rule 123 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 123 (genera_mul_quad -> .)
    LPAREN          reduce using rule 123 (genera_mul_quad -> .)
    ID              reduce using rule 123 (genera_mul_quad -> .)
    MUL             reduce using rule 123 (genera_mul_quad -> .)
    DIV             reduce using rule 123 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 213

state 179

    (74) llamada -> ID era_call LPAREN aux_exp . verifica_parametros RPAREN gosub_quad
    (72) verifica_parametros -> .

    RPAREN          reduce using rule 72 (verifica_parametros -> .)

    verifica_parametros            shift and go to state 214

state 180

    (75) aux_exp -> exp .
    (76) aux_exp -> exp . quad_param COMMA cuenta_parametros aux_exp
    (80) quad_param -> .

    RPAREN          reduce using rule 75 (aux_exp -> exp .)
    COMMA           reduce using rule 80 (quad_param -> .)

    quad_param                     shift and go to state 215

state 181

    (77) aux_exp -> empty . ZeroParameters
    (22) var1 -> empty .
    (78) ZeroParameters -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    COMPARE         reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 78 (ZeroParameters -> .) ]

    ZeroParameters                 shift and go to state 216

state 182

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 217


state 183

    (47) statement -> statement1 statement .

    RCURLY          reduce using rule 47 (statement -> statement1 statement .)
    RETURN          reduce using rule 47 (statement -> statement1 statement .)


state 184

    (49) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 49 (statement1 -> asignacion SEMICOLON .)


state 185

    (50) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 50 (statement1 -> llamada SEMICOLON .)


state 186

    (51) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 51 (statement1 -> lectura SEMICOLON .)


state 187

    (52) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 52 (statement1 -> escritura SEMICOLON .)


state 188

    (56) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID saveId2 . mat EQUALS addOperadorName exp genera_quad_asignacion
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 218
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 219
    mat                            shift and go to state 220

state 189

    (100) lectura -> READ operatorRead . LPAREN var1 operatorReadQuad RPAREN

    LPAREN          shift and go to state 221


state 190

    (93) escritura -> PRINT LPAREN . operadorPrint escritura1 operatorPrintQuad RPAREN
    (124) operadorPrint -> .

    COMILLA         reduce using rule 124 (operadorPrint -> .)
    CTEI            reduce using rule 124 (operadorPrint -> .)
    CTEF            reduce using rule 124 (operadorPrint -> .)
    CTEC            reduce using rule 124 (operadorPrint -> .)
    CTESTRING       reduce using rule 124 (operadorPrint -> .)
    LPAREN          reduce using rule 124 (operadorPrint -> .)
    ID              reduce using rule 124 (operadorPrint -> .)
    RPAREN          reduce using rule 124 (operadorPrint -> .)
    COMMA           reduce using rule 124 (operadorPrint -> .)
    OR              reduce using rule 124 (operadorPrint -> .)
    AND             reduce using rule 124 (operadorPrint -> .)
    GT              reduce using rule 124 (operadorPrint -> .)
    LT              reduce using rule 124 (operadorPrint -> .)
    GTE             reduce using rule 124 (operadorPrint -> .)
    LTE             reduce using rule 124 (operadorPrint -> .)
    NE              reduce using rule 124 (operadorPrint -> .)
    COMPARE         reduce using rule 124 (operadorPrint -> .)
    PLUS            reduce using rule 124 (operadorPrint -> .)
    MINUS           reduce using rule 124 (operadorPrint -> .)
    MUL             reduce using rule 124 (operadorPrint -> .)
    DIV             reduce using rule 124 (operadorPrint -> .)

    operadorPrint                  shift and go to state 222

state 191

    (87) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 223


state 192

    (82) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    exp                            shift and go to state 224
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 193

    (92) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 225


state 194

    (64) param1 -> ID arr COMMA var1 .

    RPAREN          reduce using rule 64 (param1 -> ID arr COMMA var1 .)
    INT             reduce using rule 64 (param1 -> ID arr COMMA var1 .)
    FLOAT           reduce using rule 64 (param1 -> ID arr COMMA var1 .)
    CHAR            reduce using rule 64 (param1 -> ID arr COMMA var1 .)


state 195

    (65) param1 -> ID mat COMMA var1 .

    RPAREN          reduce using rule 65 (param1 -> ID mat COMMA var1 .)
    INT             reduce using rule 65 (param1 -> ID mat COMMA var1 .)
    FLOAT           reduce using rule 65 (param1 -> ID mat COMMA var1 .)
    CHAR            reduce using rule 65 (param1 -> ID mat COMMA var1 .)


state 196

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (138) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    RCURLY          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 226
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 197

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (138) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)

    vars                           shift and go to state 227
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 198

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 199

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 200

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 201

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 202

    (102) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 102 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 102 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 102 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 102 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 102 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 203

    (110) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 110 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 204

    (113) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 113 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 205

    (114) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 114 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 206

    (115) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 115 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 207

    (116) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 116 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 208

    (117) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 117 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 209

    (118) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 118 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 210

    (120) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 120 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 211

    (121) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 121 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 212

    (129) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 129 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 213

    (130) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 130 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 214

    (74) llamada -> ID era_call LPAREN aux_exp verifica_parametros . RPAREN gosub_quad

    RPAREN          shift and go to state 228


state 215

    (76) aux_exp -> exp quad_param . COMMA cuenta_parametros aux_exp

    COMMA           shift and go to state 229


state 216

    (77) aux_exp -> empty ZeroParameters .

    RPAREN          reduce using rule 77 (aux_exp -> empty ZeroParameters .)


state 217

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 218

    (56) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 230

state 219

    (57) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 231


state 220

    (58) asignacion -> ID saveId2 mat . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 232


state 221

    (100) lectura -> READ operatorRead LPAREN . var1 operatorReadQuad RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (138) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 138 (empty -> .)

    var1                           shift and go to state 233
    empty                          shift and go to state 40

state 222

    (93) escritura -> PRINT LPAREN operadorPrint . escritura1 operatorPrintQuad RPAREN
    (94) escritura1 -> . escritura2 COMMA escritura2
    (95) escritura1 -> . escritura2
    (96) escritura2 -> . COMILLA CTESTRING COMILLA
    (97) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (98) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (99) escritura2 -> . exp
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    COMILLA         shift and go to state 236
    CTEI            shift and go to state 237
    CTEF            shift and go to state 238
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    escritura1                     shift and go to state 234
    escritura2                     shift and go to state 235
    exp                            shift and go to state 239
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 223

    (87) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (88) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 241

    for1                           shift and go to state 240

state 224

    (82) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 242


state 225

    (92) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    exp                            shift and go to state 243
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 226

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 244
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 227

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RETURN          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 245
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 228

    (74) llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN . gosub_quad
    (81) gosub_quad -> .

    MUL             reduce using rule 81 (gosub_quad -> .)
    DIV             reduce using rule 81 (gosub_quad -> .)
    PLUS            reduce using rule 81 (gosub_quad -> .)
    MINUS           reduce using rule 81 (gosub_quad -> .)
    GT              reduce using rule 81 (gosub_quad -> .)
    LT              reduce using rule 81 (gosub_quad -> .)
    GTE             reduce using rule 81 (gosub_quad -> .)
    LTE             reduce using rule 81 (gosub_quad -> .)
    NE              reduce using rule 81 (gosub_quad -> .)
    COMPARE         reduce using rule 81 (gosub_quad -> .)
    AND             reduce using rule 81 (gosub_quad -> .)
    OR              reduce using rule 81 (gosub_quad -> .)
    RBRACKET        reduce using rule 81 (gosub_quad -> .)
    RPAREN          reduce using rule 81 (gosub_quad -> .)
    COMMA           reduce using rule 81 (gosub_quad -> .)
    SEMICOLON       reduce using rule 81 (gosub_quad -> .)
    TO              reduce using rule 81 (gosub_quad -> .)
    CTEI            reduce using rule 81 (gosub_quad -> .)
    CTEF            reduce using rule 81 (gosub_quad -> .)
    CTEC            reduce using rule 81 (gosub_quad -> .)
    CTESTRING       reduce using rule 81 (gosub_quad -> .)
    LPAREN          reduce using rule 81 (gosub_quad -> .)
    ID              reduce using rule 81 (gosub_quad -> .)

    gosub_quad                     shift and go to state 246

state 229

    (76) aux_exp -> exp quad_param COMMA . cuenta_parametros aux_exp
    (73) cuenta_parametros -> .

    CTEI            reduce using rule 73 (cuenta_parametros -> .)
    CTEF            reduce using rule 73 (cuenta_parametros -> .)
    CTEC            reduce using rule 73 (cuenta_parametros -> .)
    CTESTRING       reduce using rule 73 (cuenta_parametros -> .)
    LPAREN          reduce using rule 73 (cuenta_parametros -> .)
    ID              reduce using rule 73 (cuenta_parametros -> .)
    COMMA           reduce using rule 73 (cuenta_parametros -> .)
    OR              reduce using rule 73 (cuenta_parametros -> .)
    AND             reduce using rule 73 (cuenta_parametros -> .)
    GT              reduce using rule 73 (cuenta_parametros -> .)
    LT              reduce using rule 73 (cuenta_parametros -> .)
    GTE             reduce using rule 73 (cuenta_parametros -> .)
    LTE             reduce using rule 73 (cuenta_parametros -> .)
    NE              reduce using rule 73 (cuenta_parametros -> .)
    COMPARE         reduce using rule 73 (cuenta_parametros -> .)
    PLUS            reduce using rule 73 (cuenta_parametros -> .)
    MINUS           reduce using rule 73 (cuenta_parametros -> .)
    MUL             reduce using rule 73 (cuenta_parametros -> .)
    DIV             reduce using rule 73 (cuenta_parametros -> .)
    RPAREN          reduce using rule 73 (cuenta_parametros -> .)

    cuenta_parametros              shift and go to state 247

state 230

    (56) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    exp                            shift and go to state 248
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 231

    (57) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 249

state 232

    (58) asignacion -> ID saveId2 mat EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 250

state 233

    (100) lectura -> READ operatorRead LPAREN var1 . operatorReadQuad RPAREN
    (127) operatorReadQuad -> .

    RPAREN          reduce using rule 127 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 251

state 234

    (93) escritura -> PRINT LPAREN operadorPrint escritura1 . operatorPrintQuad RPAREN
    (125) operatorPrintQuad -> .

    RPAREN          reduce using rule 125 (operatorPrintQuad -> .)

    operatorPrintQuad              shift and go to state 252

state 235

    (94) escritura1 -> escritura2 . COMMA escritura2
    (95) escritura1 -> escritura2 .

    COMMA           shift and go to state 253
    RPAREN          reduce using rule 95 (escritura1 -> escritura2 .)


state 236

    (96) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 254


state 237

    (97) escritura2 -> CTEI . saveCTE operatorPrintQuad
    (132) pexp -> CTEI . saveCTE
    (141) saveCTE -> .

    COMMA           reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 255

state 238

    (98) escritura2 -> CTEF . saveCTE operatorPrintQuad
    (133) pexp -> CTEF . saveCTE
    (141) saveCTE -> .

    COMMA           reduce using rule 141 (saveCTE -> .)
    RPAREN          reduce using rule 141 (saveCTE -> .)
    MUL             reduce using rule 141 (saveCTE -> .)
    DIV             reduce using rule 141 (saveCTE -> .)
    PLUS            reduce using rule 141 (saveCTE -> .)
    MINUS           reduce using rule 141 (saveCTE -> .)
    GT              reduce using rule 141 (saveCTE -> .)
    LT              reduce using rule 141 (saveCTE -> .)
    GTE             reduce using rule 141 (saveCTE -> .)
    LTE             reduce using rule 141 (saveCTE -> .)
    NE              reduce using rule 141 (saveCTE -> .)
    COMPARE         reduce using rule 141 (saveCTE -> .)
    AND             reduce using rule 141 (saveCTE -> .)
    OR              reduce using rule 141 (saveCTE -> .)

    saveCTE                        shift and go to state 256

state 239

    (99) escritura2 -> exp .

    COMMA           reduce using rule 99 (escritura2 -> exp .)
    RPAREN          reduce using rule 99 (escritura2 -> exp .)


state 240

    (87) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 257


state 241

    (88) for1 -> FROM . asignacion TO exp
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 259

    asignacion                     shift and go to state 258

state 242

    (82) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (106) if_quad -> .

    LCURLY          reduce using rule 106 (if_quad -> .)

    if_quad                        shift and go to state 260

state 243

    (92) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 261


state 244

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 262


state 245

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    RETURN          shift and go to state 263


state 246

    (74) llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .

    MUL             reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    DIV             reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    PLUS            reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    MINUS           reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    GT              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    LT              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    GTE             reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    LTE             reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    NE              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    COMPARE         reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    AND             reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    OR              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    RBRACKET        reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    RPAREN          reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    COMMA           reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    SEMICOLON       reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    TO              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    CTEI            reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    CTEF            reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    CTEC            reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    CTESTRING       reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    LPAREN          reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)
    ID              reduce using rule 74 (llamada -> ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad .)


state 247

    (76) aux_exp -> exp quad_param COMMA cuenta_parametros . aux_exp
    (75) aux_exp -> . exp
    (76) aux_exp -> . exp quad_param COMMA cuenta_parametros aux_exp
    (77) aux_exp -> . empty ZeroParameters
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (138) empty -> .
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad

    RPAREN          reduce using rule 138 (empty -> .)
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    COMMA           reduce using rule 138 (empty -> .)
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83

    exp                            shift and go to state 180
    aux_exp                        shift and go to state 264
    empty                          shift and go to state 181
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81

state 248

    (56) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 265

state 249

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    exp                            shift and go to state 266
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 250

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName . exp genera_quad_asignacion
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)
    TO              reduce using rule 138 (empty -> .)

    exp                            shift and go to state 267
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 251

    (100) lectura -> READ operatorRead LPAREN var1 operatorReadQuad . RPAREN

    RPAREN          shift and go to state 268


state 252

    (93) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad . RPAREN

    RPAREN          shift and go to state 269


state 253

    (94) escritura1 -> escritura2 COMMA . escritura2
    (96) escritura2 -> . COMILLA CTESTRING COMILLA
    (97) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (98) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (99) escritura2 -> . exp
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    COMILLA         shift and go to state 236
    CTEI            shift and go to state 237
    CTEF            shift and go to state 238
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    escritura2                     shift and go to state 270
    exp                            shift and go to state 239
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 254

    (96) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 271


state 255

    (97) escritura2 -> CTEI saveCTE . operatorPrintQuad
    (132) pexp -> CTEI saveCTE .
    (125) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 125 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 125 (operatorPrintQuad -> .)
    MUL             reduce using rule 132 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 132 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 132 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 132 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 132 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 132 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 132 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 132 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 132 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 132 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 132 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 132 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 125 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 125 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 132 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 132 (pexp -> CTEI saveCTE .) ]

    operatorPrintQuad              shift and go to state 272

state 256

    (98) escritura2 -> CTEF saveCTE . operatorPrintQuad
    (133) pexp -> CTEF saveCTE .
    (125) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 125 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 125 (operatorPrintQuad -> .)
    MUL             reduce using rule 133 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 133 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 133 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 133 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 133 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 133 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 133 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 133 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 133 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 133 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 133 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 133 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 125 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 125 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 133 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 133 (pexp -> CTEF saveCTE .) ]

    operatorPrintQuad              shift and go to state 273

state 257

    (87) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY loop_end
    (86) for_quad -> .

    LCURLY          reduce using rule 86 (for_quad -> .)

    for_quad                       shift and go to state 274

state 258

    (88) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 275


state 259

    (56) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (140) saveId2 -> .

    EQUALS          reduce using rule 140 (saveId2 -> .)
    LBRACKET        reduce using rule 140 (saveId2 -> .)

    saveId2                        shift and go to state 188

state 260

    (82) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 276


state 261

    (92) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement RCURLY loop_end
    (90) while_quad -> .

    LCURLY          reduce using rule 90 (while_quad -> .)

    while_quad                     shift and go to state 277

state 262

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 263

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY
    (45) operadorReturn -> .

    CTEI            reduce using rule 45 (operadorReturn -> .)
    CTEF            reduce using rule 45 (operadorReturn -> .)
    CTEC            reduce using rule 45 (operadorReturn -> .)
    CTESTRING       reduce using rule 45 (operadorReturn -> .)
    LPAREN          reduce using rule 45 (operadorReturn -> .)
    ID              reduce using rule 45 (operadorReturn -> .)
    SEMICOLON       reduce using rule 45 (operadorReturn -> .)
    OR              reduce using rule 45 (operadorReturn -> .)
    AND             reduce using rule 45 (operadorReturn -> .)
    GT              reduce using rule 45 (operadorReturn -> .)
    LT              reduce using rule 45 (operadorReturn -> .)
    GTE             reduce using rule 45 (operadorReturn -> .)
    LTE             reduce using rule 45 (operadorReturn -> .)
    NE              reduce using rule 45 (operadorReturn -> .)
    COMPARE         reduce using rule 45 (operadorReturn -> .)
    PLUS            reduce using rule 45 (operadorReturn -> .)
    MINUS           reduce using rule 45 (operadorReturn -> .)
    MUL             reduce using rule 45 (operadorReturn -> .)
    DIV             reduce using rule 45 (operadorReturn -> .)

    operadorReturn                 shift and go to state 278

state 264

    (76) aux_exp -> exp quad_param COMMA cuenta_parametros aux_exp .

    RPAREN          reduce using rule 76 (aux_exp -> exp quad_param COMMA cuenta_parametros aux_exp .)


state 265

    (56) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 56 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 56 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 266

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 279

state 267

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 280

state 268

    (100) lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 100 (lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .)


state 269

    (93) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .

    SEMICOLON       reduce using rule 93 (escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .)


state 270

    (94) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 94 (escritura1 -> escritura2 COMMA escritura2 .)


state 271

    (96) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 96 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 96 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 272

    (97) escritura2 -> CTEI saveCTE operatorPrintQuad .

    COMMA           reduce using rule 97 (escritura2 -> CTEI saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 97 (escritura2 -> CTEI saveCTE operatorPrintQuad .)


state 273

    (98) escritura2 -> CTEF saveCTE operatorPrintQuad .

    COMMA           reduce using rule 98 (escritura2 -> CTEF saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 98 (escritura2 -> CTEF saveCTE operatorPrintQuad .)


state 274

    (87) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 281


state 275

    (88) for1 -> FROM asignacion TO . exp
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    RPAREN          reduce using rule 138 (empty -> .)

    exp                            shift and go to state 282
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 276

    (82) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 283
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 277

    (92) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 284


state 278

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY
    (101) exp -> . nexp
    (102) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (109) nexp -> . compexp
    (110) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (111) compexp -> . sumexp
    (112) compexp -> . compexp1 sumexp
    (119) sumexp -> . mulexp
    (120) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (121) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (113) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (128) mulexp -> . pexp
    (129) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (130) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (131) pexp -> . var1 saveId
    (132) pexp -> . CTEI saveCTE
    (133) pexp -> . CTEF saveCTE
    (134) pexp -> . CTEC saveCTE
    (135) pexp -> . CTESTRING saveCTE
    (136) pexp -> . llamada
    (137) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (138) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 138 (empty -> .)
    DIV             reduce using rule 138 (empty -> .)
    PLUS            reduce using rule 138 (empty -> .)
    MINUS           reduce using rule 138 (empty -> .)
    GT              reduce using rule 138 (empty -> .)
    LT              reduce using rule 138 (empty -> .)
    GTE             reduce using rule 138 (empty -> .)
    LTE             reduce using rule 138 (empty -> .)
    NE              reduce using rule 138 (empty -> .)
    COMPARE         reduce using rule 138 (empty -> .)
    AND             reduce using rule 138 (empty -> .)
    OR              reduce using rule 138 (empty -> .)
    SEMICOLON       reduce using rule 138 (empty -> .)

    exp                            shift and go to state 285
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 279

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 57 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 57 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 280

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 58 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 58 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)


state 281

    (87) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY loop_end
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 286
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 282

    (88) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 88 (for1 -> FROM asignacion TO exp .)


state 283

    (82) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 287


state 284

    (92) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement RCURLY loop_end
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 288
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 285

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY
    (46) quad_return -> .

    SEMICOLON       reduce using rule 46 (quad_return -> .)

    quad_return                    shift and go to state 289

state 286

    (87) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 290


state 287

    (82) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (83) else -> . ELSE else_quad LCURLY statement RCURLY
    (84) else -> . empty
    (138) empty -> .

    ELSE            shift and go to state 292
    ID              reduce using rule 138 (empty -> .)
    READ            reduce using rule 138 (empty -> .)
    PRINT           reduce using rule 138 (empty -> .)
    FOR             reduce using rule 138 (empty -> .)
    IF              reduce using rule 138 (empty -> .)
    WHILE           reduce using rule 138 (empty -> .)
    RCURLY          reduce using rule 138 (empty -> .)
    RETURN          reduce using rule 138 (empty -> .)

    else                           shift and go to state 291
    empty                          shift and go to state 293

state 288

    (92) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 294


state 289

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 295


state 290

    (87) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . loop_end
    (89) loop_end -> .

    ID              reduce using rule 89 (loop_end -> .)
    READ            reduce using rule 89 (loop_end -> .)
    PRINT           reduce using rule 89 (loop_end -> .)
    FOR             reduce using rule 89 (loop_end -> .)
    IF              reduce using rule 89 (loop_end -> .)
    WHILE           reduce using rule 89 (loop_end -> .)
    RCURLY          reduce using rule 89 (loop_end -> .)
    RETURN          reduce using rule 89 (loop_end -> .)

    loop_end                       shift and go to state 296

state 291

    (82) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (107) end_if -> .

    ID              reduce using rule 107 (end_if -> .)
    READ            reduce using rule 107 (end_if -> .)
    PRINT           reduce using rule 107 (end_if -> .)
    FOR             reduce using rule 107 (end_if -> .)
    IF              reduce using rule 107 (end_if -> .)
    WHILE           reduce using rule 107 (end_if -> .)
    RCURLY          reduce using rule 107 (end_if -> .)
    RETURN          reduce using rule 107 (end_if -> .)

    end_if                         shift and go to state 297

state 292

    (83) else -> ELSE . else_quad LCURLY statement RCURLY
    (108) else_quad -> .

    LCURLY          reduce using rule 108 (else_quad -> .)

    else_quad                      shift and go to state 298

state 293

    (84) else -> empty .

    ID              reduce using rule 84 (else -> empty .)
    READ            reduce using rule 84 (else -> empty .)
    PRINT           reduce using rule 84 (else -> empty .)
    FOR             reduce using rule 84 (else -> empty .)
    IF              reduce using rule 84 (else -> empty .)
    WHILE           reduce using rule 84 (else -> empty .)
    RCURLY          reduce using rule 84 (else -> empty .)
    RETURN          reduce using rule 84 (else -> empty .)


state 294

    (92) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY . loop_end
    (89) loop_end -> .

    ID              reduce using rule 89 (loop_end -> .)
    READ            reduce using rule 89 (loop_end -> .)
    PRINT           reduce using rule 89 (loop_end -> .)
    FOR             reduce using rule 89 (loop_end -> .)
    IF              reduce using rule 89 (loop_end -> .)
    WHILE           reduce using rule 89 (loop_end -> .)
    RCURLY          reduce using rule 89 (loop_end -> .)
    RETURN          reduce using rule 89 (loop_end -> .)

    loop_end                       shift and go to state 299

state 295

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY

    RCURLY          shift and go to state 300


state 296

    (87) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 87 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)


state 297

    (82) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    PRINT           reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 82 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 298

    (83) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 301


state 299

    (92) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 92 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)


state 300

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .

    FUN             reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    MAIN            reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    $end            reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)


state 301

    (83) else -> ELSE else_quad LCURLY . statement RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (138) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (74) llamada -> . ID era_call LPAREN aux_exp verifica_parametros RPAREN gosub_quad
    (100) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (93) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (87) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (82) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (92) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 138 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 302
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 302

    (83) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 303


state 303

    (83) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    PRINT           reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 83 (else -> ELSE else_quad LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 129 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 130 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 131 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 131 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 132 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 133 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 134 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 135 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 135 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 136 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 136 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 137 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 137 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 138 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 138 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 163 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 166 resolved as shift
WARNING: reduce/reduce conflict in state 83 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 83
WARNING: reduce/reduce conflict in state 181 resolved using rule (var1 -> empty)
WARNING: rejected rule (ZeroParameters -> <empty>) in state 181
WARNING: reduce/reduce conflict in state 255 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 255
WARNING: reduce/reduce conflict in state 256 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 256
WARNING: Rule (ZeroParameters -> <empty>) is never reduced
