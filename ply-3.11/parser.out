Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT guardaTipoVar
Rule 9     tipo -> FLOAT guardaTipoVar
Rule 10    tipo -> CHAR guardaTipoVar
Rule 11    guardaTipoVar -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1 addV
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1 addV
Rule 19    var1 -> ID mat COMMA var1 addV
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    addV -> <empty>
Rule 24    var2 -> var2 tipo var1 SEMICOLON addV
Rule 25    var2 -> empty
Rule 26    especial -> TRANSPUESTA
Rule 27    especial -> INVERSA
Rule 28    especial -> DETERMINANTE
Rule 29    arr -> LBRACKET CTEI RBRACKET
Rule 30    arr -> LBRACKET exp RBRACKET
Rule 31    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 32    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 34    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 35    modules -> function modules
Rule 36    modules -> empty
Rule 37    save_fun -> <empty>
Rule 38    function -> FUN VOID function1
Rule 39    function -> FUN INT function2
Rule 40    function -> FUN CHAR function2
Rule 41    function -> FUN FLOAT function2
Rule 42    function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 43    function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 44    statement -> statement1 statement
Rule 45    statement -> empty
Rule 46    statement1 -> asignacion SEMICOLON
Rule 47    statement1 -> llamada SEMICOLON
Rule 48    statement1 -> lectura SEMICOLON
Rule 49    statement1 -> escritura SEMICOLON
Rule 50    statement1 -> for
Rule 51    statement1 -> if
Rule 52    statement1 -> while
Rule 53    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 54    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 55    asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 56    genera_quad_asignacion -> <empty>
Rule 57    addOperadorName -> <empty>
Rule 58    param -> <empty>
Rule 59    param -> empty
Rule 60    param1 -> ID
Rule 61    param1 -> ID COMMA var1 addV
Rule 62    param1 -> ID arr
Rule 63    param1 -> ID arr COMMA var1 addV
Rule 64    param1 -> ID mat COMMA var1 addV
Rule 65    param1 -> ID mat
Rule 66    param1 -> ID mat especial
Rule 67    param1 -> empty
Rule 68    param2 -> param2 tipo var1 addV
Rule 69    param2 -> empty
Rule 70    llamada -> ID LPAREN exp RPAREN
Rule 71    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 72    else -> ELSE else_quad LCURLY statement RCURLY
Rule 73    else -> empty
Rule 74    for_op -> <empty>
Rule 75    for_quad -> <empty>
Rule 76    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
Rule 77    for1 -> FROM asignacion TO exp
Rule 78    loop_end -> <empty>
Rule 79    while_quad -> <empty>
Rule 80    while_op -> <empty>
Rule 81    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
Rule 82    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 83    escritura1 -> escritura2 COMMA escritura2
Rule 84    escritura1 -> escritura2
Rule 85    escritura2 -> COMILLA CTESTRING COMILLA
Rule 86    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 87    escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 88    escritura2 -> exp
Rule 89    lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN
Rule 90    exp -> nexp
Rule 91    exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 92    genera_quad_or -> <empty>
Rule 93    genera_quad_and -> <empty>
Rule 94    compare_quad -> <empty>
Rule 95    if_quad -> <empty>
Rule 96    end_if -> <empty>
Rule 97    else_quad -> <empty>
Rule 98    nexp -> compexp
Rule 99    nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 100   compexp -> sumexp
Rule 101   compexp -> compexp1 sumexp
Rule 102   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 103   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 104   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 105   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 106   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 107   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 108   sumexp -> mulexp
Rule 109   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 110   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 111   genera_sum_quad -> <empty>
Rule 112   genera_mul_quad -> <empty>
Rule 113   operadorPrint -> <empty>
Rule 114   operatorPrintQuad -> <empty>
Rule 115   operatorRead -> <empty>
Rule 116   operatorReadQuad -> <empty>
Rule 117   mulexp -> pexp
Rule 118   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 119   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 120   pexp -> var1 saveId
Rule 121   pexp -> CTEI saveCTE
Rule 122   pexp -> CTEF saveCTE
Rule 123   pexp -> CTEC saveCTE
Rule 124   pexp -> CTESTRING saveCTE
Rule 125   pexp -> llamada
Rule 126   pexp -> LPAREN exp RPAREN
Rule 127   empty -> <empty>
Rule 128   saveId -> <empty>
Rule 129   saveId2 -> <empty>
Rule 130   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 99
CHAR                 : 10 40
COMILLA              : 85 85
COMMA                : 16 18 19 61 63 64 83
COMPARE              : 107
CTEC                 : 123
CTEF                 : 87 122
CTEI                 : 29 31 31 33 34 86 121
CTESTRING            : 85 124
DETERMINANTE         : 28
DIV                  : 119
ELSE                 : 72
END                  : 7
EQUALS               : 53 54 55
FLOAT                : 9 41
FOR                  : 76
FROM                 : 77
FUN                  : 38 39 40 41
GT                   : 102
GTE                  : 104
ID                   : 1 15 16 17 18 19 20 21 42 43 53 54 55 60 61 62 63 64 65 66 70
IF                   : 71
INT                  : 8 39
INVERSA              : 27
LBRACKET             : 29 30 31 31 32 32 33 33 34 34
LCURLY               : 7 42 43 71 72 76 81
LPAREN               : 7 42 43 70 71 76 81 82 89 126
LT                   : 103
LTE                  : 105
MAIN                 : 7
MINUS                : 110
MUL                  : 118
NE                   : 106
OR                   : 91
PLUS                 : 109
PRINT                : 82
PROGRAM              : 1
RBRACKET             : 29 30 31 31 32 32 33 33 34 34
RCURLY               : 7 42 43 71 72 76 81
READ                 : 89
RETURN               : 43
RPAREN               : 7 42 43 70 71 76 81 82 89 126
SEMICOLON            : 1 24 42 43 43 46 47 48 49
TO                   : 77
TRANSPUESTA          : 26
VAR                  : 14
VOID                 : 38
WHILE                : 81
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 53 54 55 91 99 102 103 104 105 106 107 109 110 118 119
addP                 : 1
addV                 : 16 18 19 24 61 63 64 68
arr                  : 17 18 54 62 63
asignacion           : 46 77
compare_quad         : 102 103 104 105 106 107
compexp              : 98 99 99
compexp1             : 101
else                 : 71
else_quad            : 72
empty                : 13 22 25 36 45 59 67 69 73
end_if               : 71
escritura            : 49
escritura1           : 82
escritura2           : 83 83 84
especial             : 21 66
exp                  : 30 32 32 33 34 43 53 54 55 70 71 77 81 88 126
for                  : 50
for1                 : 76
for_op               : 76
for_quad             : 76
function             : 35
function1            : 38
function2            : 39 40 41
genera_mul_quad      : 118 119
genera_quad_and      : 99
genera_quad_asignacion : 53 54 55
genera_quad_or       : 91
genera_sum_quad      : 109 110
guardaTipoVar        : 8 9 10
if                   : 51
if_quad              : 71
lectura              : 48
llamada              : 47 125
loop_end             : 76 81
main                 : 6
mat                  : 19 20 21 55 64 65 66
modules              : 3 4 35
mulexp               : 108 109 109 110 110
nexp                 : 90 91 91
operadorPrint        : 82
operatorPrintQuad    : 82 86 87
operatorRead         : 89
operatorReadQuad     : 89
param                : 43
param1               : 
param2               : 7 42 68
pexp                 : 117 118 118 119 119
programa             : 0
programa1            : 1
programa2            : 3 5
saveCTE              : 86 87 121 122 123 124
saveId               : 120
saveId2              : 53 54 55
save_fun             : 7 42 43
statement            : 7 42 43 44 71 72 76 81
statement1           : 44
sumexp               : 100 101 102 102 103 103 104 104 105 105 106 106 107 107
tipo                 : 24 68
var                  : 12
var1                 : 16 18 19 24 61 63 64 68 89 120
var2                 : 14 24
vars                 : 3 4 7 42 43
while                : 52
while_op             : 81
while_quad           : 81

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUN             reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars modules programa2
    (4) programa1 -> . vars modules
    (5) programa1 -> . programa2
    (12) vars -> . var
    (13) vars -> . empty
    (6) programa2 -> . main
    (14) var -> . VAR var2
    (127) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 127 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . modules programa2
    (4) programa1 -> vars . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1
    (39) function -> . FUN INT function2
    (40) function -> . FUN CHAR function2
    (41) function -> . FUN FLOAT function2
    (127) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)

    modules                        shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (12) vars -> var .

    FUN             reduce using rule 12 (vars -> var .)
    MAIN            reduce using rule 12 (vars -> var .)
    $end            reduce using rule 12 (vars -> var .)
    ID              reduce using rule 12 (vars -> var .)
    READ            reduce using rule 12 (vars -> var .)
    PRINT           reduce using rule 12 (vars -> var .)
    FOR             reduce using rule 12 (vars -> var .)
    IF              reduce using rule 12 (vars -> var .)
    WHILE           reduce using rule 12 (vars -> var .)
    RCURLY          reduce using rule 12 (vars -> var .)
    RETURN          reduce using rule 12 (vars -> var .)


state 10

    (13) vars -> empty .

    FUN             reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    $end            reduce using rule 13 (vars -> empty .)
    ID              reduce using rule 13 (vars -> empty .)
    READ            reduce using rule 13 (vars -> empty .)
    PRINT           reduce using rule 13 (vars -> empty .)
    FOR             reduce using rule 13 (vars -> empty .)
    IF              reduce using rule 13 (vars -> empty .)
    WHILE           reduce using rule 13 (vars -> empty .)
    RCURLY          reduce using rule 13 (vars -> empty .)
    RETURN          reduce using rule 13 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (14) var -> VAR . var2
    (24) var2 -> . var2 tipo var1 SEMICOLON addV
    (25) var2 -> . empty
    (127) empty -> .

    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    FUN             reduce using rule 127 (empty -> .)
    MAIN            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)
    ID              reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    RCURLY          reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)

    var2                           shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 20

state 14

    (3) programa1 -> vars modules . programa2
    (4) programa1 -> vars modules .
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 21
    main                           shift and go to state 11

state 15

    (35) modules -> function . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1
    (39) function -> . FUN INT function2
    (40) function -> . FUN CHAR function2
    (41) function -> . FUN FLOAT function2
    (127) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 127 (empty -> .)
    $end            reduce using rule 127 (empty -> .)

    function                       shift and go to state 15
    modules                        shift and go to state 22
    empty                          shift and go to state 16

state 16

    (36) modules -> empty .

    MAIN            reduce using rule 36 (modules -> empty .)
    $end            reduce using rule 36 (modules -> empty .)


state 17

    (38) function -> FUN . VOID function1
    (39) function -> FUN . INT function2
    (40) function -> FUN . CHAR function2
    (41) function -> FUN . FLOAT function2

    VOID            shift and go to state 23
    INT             shift and go to state 24
    CHAR            shift and go to state 25
    FLOAT           shift and go to state 26


state 18

    (14) var -> VAR var2 .
    (24) var2 -> var2 . tipo var1 SEMICOLON addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 14 (var -> VAR var2 .)
    MAIN            reduce using rule 14 (var -> VAR var2 .)
    $end            reduce using rule 14 (var -> VAR var2 .)
    ID              reduce using rule 14 (var -> VAR var2 .)
    READ            reduce using rule 14 (var -> VAR var2 .)
    PRINT           reduce using rule 14 (var -> VAR var2 .)
    FOR             reduce using rule 14 (var -> VAR var2 .)
    IF              reduce using rule 14 (var -> VAR var2 .)
    WHILE           reduce using rule 14 (var -> VAR var2 .)
    RCURLY          reduce using rule 14 (var -> VAR var2 .)
    RETURN          reduce using rule 14 (var -> VAR var2 .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 27

state 19

    (25) var2 -> empty .

    INT             reduce using rule 25 (var2 -> empty .)
    FLOAT           reduce using rule 25 (var2 -> empty .)
    CHAR            reduce using rule 25 (var2 -> empty .)
    FUN             reduce using rule 25 (var2 -> empty .)
    MAIN            reduce using rule 25 (var2 -> empty .)
    $end            reduce using rule 25 (var2 -> empty .)
    ID              reduce using rule 25 (var2 -> empty .)
    READ            reduce using rule 25 (var2 -> empty .)
    PRINT           reduce using rule 25 (var2 -> empty .)
    FOR             reduce using rule 25 (var2 -> empty .)
    IF              reduce using rule 25 (var2 -> empty .)
    WHILE           reduce using rule 25 (var2 -> empty .)
    RCURLY          reduce using rule 25 (var2 -> empty .)
    RETURN          reduce using rule 25 (var2 -> empty .)


state 20

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 31


state 21

    (3) programa1 -> vars modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars modules programa2 .)


state 22

    (35) modules -> function modules .

    MAIN            reduce using rule 35 (modules -> function modules .)
    $end            reduce using rule 35 (modules -> function modules .)


state 23

    (38) function -> FUN VOID . function1
    (42) function1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 33

    function1                      shift and go to state 32

state 24

    (39) function -> FUN INT . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 34

state 25

    (40) function -> FUN CHAR . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 36

state 26

    (41) function -> FUN FLOAT . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 37

state 27

    (24) var2 -> var2 tipo . var1 SEMICOLON addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

    ID              shift and go to state 39
    SEMICOLON       reduce using rule 127 (empty -> .)

    var1                           shift and go to state 38
    empty                          shift and go to state 40

state 28

    (8) tipo -> INT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 41

state 29

    (9) tipo -> FLOAT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 42

state 30

    (10) tipo -> CHAR . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 43

state 31

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (68) param2 -> . param2 tipo var1 addV
    (69) param2 -> . empty
    (127) empty -> .

    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)

    param2                         shift and go to state 44
    empty                          shift and go to state 45

state 32

    (38) function -> FUN VOID function1 .

    FUN             reduce using rule 38 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 38 (function -> FUN VOID function1 .)
    $end            reduce using rule 38 (function -> FUN VOID function1 .)


state 33

    (42) function1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 46

state 34

    (39) function -> FUN INT function2 .

    FUN             reduce using rule 39 (function -> FUN INT function2 .)
    MAIN            reduce using rule 39 (function -> FUN INT function2 .)
    $end            reduce using rule 39 (function -> FUN INT function2 .)


state 35

    (43) function2 -> ID . save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 47

state 36

    (40) function -> FUN CHAR function2 .

    FUN             reduce using rule 40 (function -> FUN CHAR function2 .)
    MAIN            reduce using rule 40 (function -> FUN CHAR function2 .)
    $end            reduce using rule 40 (function -> FUN CHAR function2 .)


state 37

    (41) function -> FUN FLOAT function2 .

    FUN             reduce using rule 41 (function -> FUN FLOAT function2 .)
    MAIN            reduce using rule 41 (function -> FUN FLOAT function2 .)
    $end            reduce using rule 41 (function -> FUN FLOAT function2 .)


state 38

    (24) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 48


state 39

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    INT             reduce using rule 15 (var1 -> ID .)
    FLOAT           reduce using rule 15 (var1 -> ID .)
    CHAR            reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 49
    LBRACKET        shift and go to state 52

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 50
    mat                            shift and go to state 51

state 40

    (22) var1 -> empty .

    SEMICOLON       reduce using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    COMPARE         reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    RBRACKET        reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)
    INT             reduce using rule 22 (var1 -> empty .)
    FLOAT           reduce using rule 22 (var1 -> empty .)
    CHAR            reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    TO              reduce using rule 22 (var1 -> empty .)
    CTEI            reduce using rule 22 (var1 -> empty .)
    CTEF            reduce using rule 22 (var1 -> empty .)
    CTEC            reduce using rule 22 (var1 -> empty .)
    CTESTRING       reduce using rule 22 (var1 -> empty .)
    LPAREN          reduce using rule 22 (var1 -> empty .)
    ID              reduce using rule 22 (var1 -> empty .)


state 41

    (8) tipo -> INT guardaTipoVar .

    ID              reduce using rule 8 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 8 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 8 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 8 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 8 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 8 (tipo -> INT guardaTipoVar .)


state 42

    (9) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)


state 43

    (10) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> CHAR guardaTipoVar .)


state 44

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (68) param2 -> param2 . tipo var1 addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 53
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 54

state 45

    (69) param2 -> empty .

    RPAREN          reduce using rule 69 (param2 -> empty .)
    INT             reduce using rule 69 (param2 -> empty .)
    FLOAT           reduce using rule 69 (param2 -> empty .)
    CHAR            reduce using rule 69 (param2 -> empty .)


state 46

    (42) function1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 55


state 47

    (43) function2 -> ID save_fun . LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LPAREN          shift and go to state 56


state 48

    (24) var2 -> var2 tipo var1 SEMICOLON . addV
    (23) addV -> .

    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    FUN             reduce using rule 23 (addV -> .)
    MAIN            reduce using rule 23 (addV -> .)
    $end            reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)
    READ            reduce using rule 23 (addV -> .)
    PRINT           reduce using rule 23 (addV -> .)
    FOR             reduce using rule 23 (addV -> .)
    IF              reduce using rule 23 (addV -> .)
    WHILE           reduce using rule 23 (addV -> .)
    RCURLY          reduce using rule 23 (addV -> .)
    RETURN          reduce using rule 23 (addV -> .)

    addV                           shift and go to state 57

state 49

    (16) var1 -> ID COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 127 (empty -> .)
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    CTEI            reduce using rule 127 (empty -> .)
    CTEF            reduce using rule 127 (empty -> .)
    CTEC            reduce using rule 127 (empty -> .)
    CTESTRING       reduce using rule 127 (empty -> .)
    LPAREN          reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]

    var1                           shift and go to state 58
    empty                          shift and go to state 40

state 50

    (17) var1 -> ID arr .
    (18) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID arr .)
    MUL             reduce using rule 17 (var1 -> ID arr .)
    DIV             reduce using rule 17 (var1 -> ID arr .)
    PLUS            reduce using rule 17 (var1 -> ID arr .)
    MINUS           reduce using rule 17 (var1 -> ID arr .)
    GT              reduce using rule 17 (var1 -> ID arr .)
    LT              reduce using rule 17 (var1 -> ID arr .)
    GTE             reduce using rule 17 (var1 -> ID arr .)
    LTE             reduce using rule 17 (var1 -> ID arr .)
    NE              reduce using rule 17 (var1 -> ID arr .)
    COMPARE         reduce using rule 17 (var1 -> ID arr .)
    AND             reduce using rule 17 (var1 -> ID arr .)
    OR              reduce using rule 17 (var1 -> ID arr .)
    RBRACKET        reduce using rule 17 (var1 -> ID arr .)
    RPAREN          reduce using rule 17 (var1 -> ID arr .)
    INT             reduce using rule 17 (var1 -> ID arr .)
    FLOAT           reduce using rule 17 (var1 -> ID arr .)
    CHAR            reduce using rule 17 (var1 -> ID arr .)
    TO              reduce using rule 17 (var1 -> ID arr .)
    CTEI            reduce using rule 17 (var1 -> ID arr .)
    CTEF            reduce using rule 17 (var1 -> ID arr .)
    CTEC            reduce using rule 17 (var1 -> ID arr .)
    CTESTRING       reduce using rule 17 (var1 -> ID arr .)
    LPAREN          reduce using rule 17 (var1 -> ID arr .)
    ID              reduce using rule 17 (var1 -> ID arr .)
    COMMA           shift and go to state 59

  ! COMMA           [ reduce using rule 17 (var1 -> ID arr .) ]


state 51

    (19) var1 -> ID mat . COMMA var1 addV
    (20) var1 -> ID mat .
    (21) var1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 60
    SEMICOLON       reduce using rule 20 (var1 -> ID mat .)
    MUL             reduce using rule 20 (var1 -> ID mat .)
    DIV             reduce using rule 20 (var1 -> ID mat .)
    PLUS            reduce using rule 20 (var1 -> ID mat .)
    MINUS           reduce using rule 20 (var1 -> ID mat .)
    GT              reduce using rule 20 (var1 -> ID mat .)
    LT              reduce using rule 20 (var1 -> ID mat .)
    GTE             reduce using rule 20 (var1 -> ID mat .)
    LTE             reduce using rule 20 (var1 -> ID mat .)
    NE              reduce using rule 20 (var1 -> ID mat .)
    COMPARE         reduce using rule 20 (var1 -> ID mat .)
    AND             reduce using rule 20 (var1 -> ID mat .)
    OR              reduce using rule 20 (var1 -> ID mat .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat .)
    RPAREN          reduce using rule 20 (var1 -> ID mat .)
    INT             reduce using rule 20 (var1 -> ID mat .)
    FLOAT           reduce using rule 20 (var1 -> ID mat .)
    CHAR            reduce using rule 20 (var1 -> ID mat .)
    TO              reduce using rule 20 (var1 -> ID mat .)
    CTEI            reduce using rule 20 (var1 -> ID mat .)
    CTEF            reduce using rule 20 (var1 -> ID mat .)
    CTEC            reduce using rule 20 (var1 -> ID mat .)
    CTESTRING       reduce using rule 20 (var1 -> ID mat .)
    LPAREN          reduce using rule 20 (var1 -> ID mat .)
    ID              reduce using rule 20 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 62
    INVERSA         shift and go to state 63
    DETERMINANTE    shift and go to state 64

  ! COMMA           [ reduce using rule 20 (var1 -> ID mat .) ]

    especial                       shift and go to state 61

state 52

    (29) arr -> LBRACKET . CTEI RBRACKET
    (30) arr -> LBRACKET . exp RBRACKET
    (31) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 65
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)

    exp                            shift and go to state 66
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 53

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 80


state 54

    (68) param2 -> param2 tipo . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)

    var1                           shift and go to state 81
    empty                          shift and go to state 40

state 55

    (42) function1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (68) param2 -> . param2 tipo var1 addV
    (69) param2 -> . empty
    (127) empty -> .

    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)

    param2                         shift and go to state 82
    empty                          shift and go to state 45

state 56

    (43) function2 -> ID save_fun LPAREN . param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (58) param -> .
    (59) param -> . empty
    (127) empty -> .

  ! reduce/reduce conflict for RPAREN resolved using rule 58 (param -> .)
    RPAREN          reduce using rule 58 (param -> .)

  ! RPAREN          [ reduce using rule 127 (empty -> .) ]

    param                          shift and go to state 83
    empty                          shift and go to state 84

state 57

    (24) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 58

    (16) var1 -> ID COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 85

state 59

    (18) var1 -> ID arr COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 127 (empty -> .)
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    CTEI            reduce using rule 127 (empty -> .)
    CTEF            reduce using rule 127 (empty -> .)
    CTEC            reduce using rule 127 (empty -> .)
    CTESTRING       reduce using rule 127 (empty -> .)
    LPAREN          reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]

    var1                           shift and go to state 86
    empty                          shift and go to state 40

state 60

    (19) var1 -> ID mat COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 127 (empty -> .)
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    INT             reduce using rule 127 (empty -> .)
    FLOAT           reduce using rule 127 (empty -> .)
    CHAR            reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    CTEI            reduce using rule 127 (empty -> .)
    CTEF            reduce using rule 127 (empty -> .)
    CTEC            reduce using rule 127 (empty -> .)
    CTESTRING       reduce using rule 127 (empty -> .)
    LPAREN          reduce using rule 127 (empty -> .)

  ! ID              [ reduce using rule 127 (empty -> .) ]

    var1                           shift and go to state 87
    empty                          shift and go to state 40

state 61

    (21) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat especial .)
    MUL             reduce using rule 21 (var1 -> ID mat especial .)
    DIV             reduce using rule 21 (var1 -> ID mat especial .)
    PLUS            reduce using rule 21 (var1 -> ID mat especial .)
    MINUS           reduce using rule 21 (var1 -> ID mat especial .)
    GT              reduce using rule 21 (var1 -> ID mat especial .)
    LT              reduce using rule 21 (var1 -> ID mat especial .)
    GTE             reduce using rule 21 (var1 -> ID mat especial .)
    LTE             reduce using rule 21 (var1 -> ID mat especial .)
    NE              reduce using rule 21 (var1 -> ID mat especial .)
    COMPARE         reduce using rule 21 (var1 -> ID mat especial .)
    AND             reduce using rule 21 (var1 -> ID mat especial .)
    OR              reduce using rule 21 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    INT             reduce using rule 21 (var1 -> ID mat especial .)
    FLOAT           reduce using rule 21 (var1 -> ID mat especial .)
    CHAR            reduce using rule 21 (var1 -> ID mat especial .)
    COMMA           reduce using rule 21 (var1 -> ID mat especial .)
    TO              reduce using rule 21 (var1 -> ID mat especial .)
    CTEI            reduce using rule 21 (var1 -> ID mat especial .)
    CTEF            reduce using rule 21 (var1 -> ID mat especial .)
    CTEC            reduce using rule 21 (var1 -> ID mat especial .)
    CTESTRING       reduce using rule 21 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    ID              reduce using rule 21 (var1 -> ID mat especial .)


state 62

    (26) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 26 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 26 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 26 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 26 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 26 (especial -> TRANSPUESTA .)
    GT              reduce using rule 26 (especial -> TRANSPUESTA .)
    LT              reduce using rule 26 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    NE              reduce using rule 26 (especial -> TRANSPUESTA .)
    COMPARE         reduce using rule 26 (especial -> TRANSPUESTA .)
    AND             reduce using rule 26 (especial -> TRANSPUESTA .)
    OR              reduce using rule 26 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 26 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    INT             reduce using rule 26 (especial -> TRANSPUESTA .)
    FLOAT           reduce using rule 26 (especial -> TRANSPUESTA .)
    CHAR            reduce using rule 26 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 26 (especial -> TRANSPUESTA .)
    TO              reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTESTRING       reduce using rule 26 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    ID              reduce using rule 26 (especial -> TRANSPUESTA .)


state 63

    (27) especial -> INVERSA .

    SEMICOLON       reduce using rule 27 (especial -> INVERSA .)
    MUL             reduce using rule 27 (especial -> INVERSA .)
    DIV             reduce using rule 27 (especial -> INVERSA .)
    PLUS            reduce using rule 27 (especial -> INVERSA .)
    MINUS           reduce using rule 27 (especial -> INVERSA .)
    GT              reduce using rule 27 (especial -> INVERSA .)
    LT              reduce using rule 27 (especial -> INVERSA .)
    GTE             reduce using rule 27 (especial -> INVERSA .)
    LTE             reduce using rule 27 (especial -> INVERSA .)
    NE              reduce using rule 27 (especial -> INVERSA .)
    COMPARE         reduce using rule 27 (especial -> INVERSA .)
    AND             reduce using rule 27 (especial -> INVERSA .)
    OR              reduce using rule 27 (especial -> INVERSA .)
    RBRACKET        reduce using rule 27 (especial -> INVERSA .)
    RPAREN          reduce using rule 27 (especial -> INVERSA .)
    INT             reduce using rule 27 (especial -> INVERSA .)
    FLOAT           reduce using rule 27 (especial -> INVERSA .)
    CHAR            reduce using rule 27 (especial -> INVERSA .)
    COMMA           reduce using rule 27 (especial -> INVERSA .)
    TO              reduce using rule 27 (especial -> INVERSA .)
    CTEI            reduce using rule 27 (especial -> INVERSA .)
    CTEF            reduce using rule 27 (especial -> INVERSA .)
    CTEC            reduce using rule 27 (especial -> INVERSA .)
    CTESTRING       reduce using rule 27 (especial -> INVERSA .)
    LPAREN          reduce using rule 27 (especial -> INVERSA .)
    ID              reduce using rule 27 (especial -> INVERSA .)


state 64

    (28) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 28 (especial -> DETERMINANTE .)
    MUL             reduce using rule 28 (especial -> DETERMINANTE .)
    DIV             reduce using rule 28 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 28 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 28 (especial -> DETERMINANTE .)
    GT              reduce using rule 28 (especial -> DETERMINANTE .)
    LT              reduce using rule 28 (especial -> DETERMINANTE .)
    GTE             reduce using rule 28 (especial -> DETERMINANTE .)
    LTE             reduce using rule 28 (especial -> DETERMINANTE .)
    NE              reduce using rule 28 (especial -> DETERMINANTE .)
    COMPARE         reduce using rule 28 (especial -> DETERMINANTE .)
    AND             reduce using rule 28 (especial -> DETERMINANTE .)
    OR              reduce using rule 28 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 28 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    INT             reduce using rule 28 (especial -> DETERMINANTE .)
    FLOAT           reduce using rule 28 (especial -> DETERMINANTE .)
    CHAR            reduce using rule 28 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 28 (especial -> DETERMINANTE .)
    TO              reduce using rule 28 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 28 (especial -> DETERMINANTE .)
    CTESTRING       reduce using rule 28 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    ID              reduce using rule 28 (especial -> DETERMINANTE .)


state 65

    (29) arr -> LBRACKET CTEI . RBRACKET
    (31) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (121) pexp -> CTEI . saveCTE
    (130) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 88
    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 130 (saveCTE -> .) ]

    saveCTE                        shift and go to state 89

state 66

    (30) arr -> LBRACKET exp . RBRACKET
    (32) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 90


state 67

    (90) exp -> nexp .
    (91) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 90 (exp -> nexp .)
    RPAREN          reduce using rule 90 (exp -> nexp .)
    COMMA           reduce using rule 90 (exp -> nexp .)
    SEMICOLON       reduce using rule 90 (exp -> nexp .)
    TO              reduce using rule 90 (exp -> nexp .)
    OR              shift and go to state 91


state 68

    (98) nexp -> compexp .
    (99) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 98 (nexp -> compexp .)
    RBRACKET        reduce using rule 98 (nexp -> compexp .)
    RPAREN          reduce using rule 98 (nexp -> compexp .)
    COMMA           reduce using rule 98 (nexp -> compexp .)
    SEMICOLON       reduce using rule 98 (nexp -> compexp .)
    TO              reduce using rule 98 (nexp -> compexp .)
    AND             shift and go to state 92


state 69

    (100) compexp -> sumexp .
    (102) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (103) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (104) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (107) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 100 (compexp -> sumexp .)
    OR              reduce using rule 100 (compexp -> sumexp .)
    RBRACKET        reduce using rule 100 (compexp -> sumexp .)
    RPAREN          reduce using rule 100 (compexp -> sumexp .)
    COMMA           reduce using rule 100 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 100 (compexp -> sumexp .)
    TO              reduce using rule 100 (compexp -> sumexp .)
    GT              shift and go to state 93
    LT              shift and go to state 94
    GTE             shift and go to state 95
    LTE             shift and go to state 96
    NE              shift and go to state 97
    COMPARE         shift and go to state 98


state 70

    (101) compexp -> compexp1 . sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    sumexp                         shift and go to state 99
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 71

    (108) sumexp -> mulexp .
    (109) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 108 (sumexp -> mulexp .)
    LT              reduce using rule 108 (sumexp -> mulexp .)
    GTE             reduce using rule 108 (sumexp -> mulexp .)
    LTE             reduce using rule 108 (sumexp -> mulexp .)
    NE              reduce using rule 108 (sumexp -> mulexp .)
    COMPARE         reduce using rule 108 (sumexp -> mulexp .)
    AND             reduce using rule 108 (sumexp -> mulexp .)
    OR              reduce using rule 108 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 108 (sumexp -> mulexp .)
    RPAREN          reduce using rule 108 (sumexp -> mulexp .)
    COMMA           reduce using rule 108 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 108 (sumexp -> mulexp .)
    TO              reduce using rule 108 (sumexp -> mulexp .)
    CTEI            reduce using rule 108 (sumexp -> mulexp .)
    CTEF            reduce using rule 108 (sumexp -> mulexp .)
    CTEC            reduce using rule 108 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 108 (sumexp -> mulexp .)
    LPAREN          reduce using rule 108 (sumexp -> mulexp .)
    ID              reduce using rule 108 (sumexp -> mulexp .)
    MUL             reduce using rule 108 (sumexp -> mulexp .)
    DIV             reduce using rule 108 (sumexp -> mulexp .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102

  ! PLUS            [ reduce using rule 108 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 108 (sumexp -> mulexp .) ]


state 72

    (117) mulexp -> pexp .
    (118) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 117 (mulexp -> pexp .)
    MINUS           reduce using rule 117 (mulexp -> pexp .)
    GT              reduce using rule 117 (mulexp -> pexp .)
    LT              reduce using rule 117 (mulexp -> pexp .)
    GTE             reduce using rule 117 (mulexp -> pexp .)
    LTE             reduce using rule 117 (mulexp -> pexp .)
    NE              reduce using rule 117 (mulexp -> pexp .)
    COMPARE         reduce using rule 117 (mulexp -> pexp .)
    AND             reduce using rule 117 (mulexp -> pexp .)
    OR              reduce using rule 117 (mulexp -> pexp .)
    RBRACKET        reduce using rule 117 (mulexp -> pexp .)
    RPAREN          reduce using rule 117 (mulexp -> pexp .)
    COMMA           reduce using rule 117 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 117 (mulexp -> pexp .)
    TO              reduce using rule 117 (mulexp -> pexp .)
    CTEI            reduce using rule 117 (mulexp -> pexp .)
    CTEF            reduce using rule 117 (mulexp -> pexp .)
    CTEC            reduce using rule 117 (mulexp -> pexp .)
    CTESTRING       reduce using rule 117 (mulexp -> pexp .)
    LPAREN          reduce using rule 117 (mulexp -> pexp .)
    ID              reduce using rule 117 (mulexp -> pexp .)
    MUL             shift and go to state 103
    DIV             shift and go to state 104

  ! MUL             [ reduce using rule 117 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 117 (mulexp -> pexp .) ]


state 73

    (120) pexp -> var1 . saveId
    (128) saveId -> .

    MUL             reduce using rule 128 (saveId -> .)
    DIV             reduce using rule 128 (saveId -> .)
    PLUS            reduce using rule 128 (saveId -> .)
    MINUS           reduce using rule 128 (saveId -> .)
    GT              reduce using rule 128 (saveId -> .)
    LT              reduce using rule 128 (saveId -> .)
    GTE             reduce using rule 128 (saveId -> .)
    LTE             reduce using rule 128 (saveId -> .)
    NE              reduce using rule 128 (saveId -> .)
    COMPARE         reduce using rule 128 (saveId -> .)
    AND             reduce using rule 128 (saveId -> .)
    OR              reduce using rule 128 (saveId -> .)
    RBRACKET        reduce using rule 128 (saveId -> .)
    RPAREN          reduce using rule 128 (saveId -> .)
    COMMA           reduce using rule 128 (saveId -> .)
    SEMICOLON       reduce using rule 128 (saveId -> .)
    TO              reduce using rule 128 (saveId -> .)
    CTEI            reduce using rule 128 (saveId -> .)
    CTEF            reduce using rule 128 (saveId -> .)
    CTEC            reduce using rule 128 (saveId -> .)
    CTESTRING       reduce using rule 128 (saveId -> .)
    LPAREN          reduce using rule 128 (saveId -> .)
    ID              reduce using rule 128 (saveId -> .)

    saveId                         shift and go to state 105

state 74

    (122) pexp -> CTEF . saveCTE
    (130) saveCTE -> .

    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)
    RBRACKET        reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    COMMA           reduce using rule 130 (saveCTE -> .)
    SEMICOLON       reduce using rule 130 (saveCTE -> .)
    TO              reduce using rule 130 (saveCTE -> .)
    CTEI            reduce using rule 130 (saveCTE -> .)
    CTEF            reduce using rule 130 (saveCTE -> .)
    CTEC            reduce using rule 130 (saveCTE -> .)
    CTESTRING       reduce using rule 130 (saveCTE -> .)
    LPAREN          reduce using rule 130 (saveCTE -> .)
    ID              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 106

state 75

    (123) pexp -> CTEC . saveCTE
    (130) saveCTE -> .

    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)
    RBRACKET        reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    COMMA           reduce using rule 130 (saveCTE -> .)
    SEMICOLON       reduce using rule 130 (saveCTE -> .)
    TO              reduce using rule 130 (saveCTE -> .)
    CTEI            reduce using rule 130 (saveCTE -> .)
    CTEF            reduce using rule 130 (saveCTE -> .)
    CTEC            reduce using rule 130 (saveCTE -> .)
    CTESTRING       reduce using rule 130 (saveCTE -> .)
    LPAREN          reduce using rule 130 (saveCTE -> .)
    ID              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 107

state 76

    (124) pexp -> CTESTRING . saveCTE
    (130) saveCTE -> .

    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)
    RBRACKET        reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    COMMA           reduce using rule 130 (saveCTE -> .)
    SEMICOLON       reduce using rule 130 (saveCTE -> .)
    TO              reduce using rule 130 (saveCTE -> .)
    CTEI            reduce using rule 130 (saveCTE -> .)
    CTEF            reduce using rule 130 (saveCTE -> .)
    CTEC            reduce using rule 130 (saveCTE -> .)
    CTESTRING       reduce using rule 130 (saveCTE -> .)
    LPAREN          reduce using rule 130 (saveCTE -> .)
    ID              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 108

state 77

    (125) pexp -> llamada .

    MUL             reduce using rule 125 (pexp -> llamada .)
    DIV             reduce using rule 125 (pexp -> llamada .)
    PLUS            reduce using rule 125 (pexp -> llamada .)
    MINUS           reduce using rule 125 (pexp -> llamada .)
    GT              reduce using rule 125 (pexp -> llamada .)
    LT              reduce using rule 125 (pexp -> llamada .)
    GTE             reduce using rule 125 (pexp -> llamada .)
    LTE             reduce using rule 125 (pexp -> llamada .)
    NE              reduce using rule 125 (pexp -> llamada .)
    COMPARE         reduce using rule 125 (pexp -> llamada .)
    AND             reduce using rule 125 (pexp -> llamada .)
    OR              reduce using rule 125 (pexp -> llamada .)
    RBRACKET        reduce using rule 125 (pexp -> llamada .)
    RPAREN          reduce using rule 125 (pexp -> llamada .)
    COMMA           reduce using rule 125 (pexp -> llamada .)
    SEMICOLON       reduce using rule 125 (pexp -> llamada .)
    TO              reduce using rule 125 (pexp -> llamada .)
    CTEI            reduce using rule 125 (pexp -> llamada .)
    CTEF            reduce using rule 125 (pexp -> llamada .)
    CTEC            reduce using rule 125 (pexp -> llamada .)
    CTESTRING       reduce using rule 125 (pexp -> llamada .)
    LPAREN          reduce using rule 125 (pexp -> llamada .)
    ID              reduce using rule 125 (pexp -> llamada .)


state 78

    (126) pexp -> LPAREN . exp RPAREN
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 109
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 79

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (70) llamada -> ID . LPAREN exp RPAREN
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 49
    LPAREN          shift and go to state 110
    LBRACKET        shift and go to state 52

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 50
    mat                            shift and go to state 51

state 80

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (127) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    RCURLY          reduce using rule 127 (empty -> .)

    vars                           shift and go to state 111
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 81

    (68) param2 -> param2 tipo var1 . addV
    (23) addV -> .

    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)

    addV                           shift and go to state 112

state 82

    (42) function1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RCURLY
    (68) param2 -> param2 . tipo var1 addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 113
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 54

state 83

    (43) function2 -> ID save_fun LPAREN param . RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    RPAREN          shift and go to state 114


state 84

    (59) param -> empty .

    RPAREN          reduce using rule 59 (param -> empty .)


state 85

    (16) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    INT             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 16 (var1 -> ID COMMA var1 addV .)


state 86

    (18) var1 -> ID arr COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 115

state 87

    (19) var1 -> ID mat COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 116

state 88

    (29) arr -> LBRACKET CTEI RBRACKET .
    (31) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 117


state 89

    (121) pexp -> CTEI saveCTE .

    MUL             reduce using rule 121 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 121 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 121 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 121 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 121 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 121 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 121 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 121 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 121 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 121 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 121 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 121 (pexp -> CTEI saveCTE .)


state 90

    (30) arr -> LBRACKET exp RBRACKET .
    (32) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 118


state 91

    (91) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 119

state 92

    (99) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 120

state 93

    (102) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 121

state 94

    (103) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 122

state 95

    (104) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 123

state 96

    (105) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 124

state 97

    (106) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 125

state 98

    (107) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 126

state 99

    (101) compexp -> compexp1 sumexp .

    AND             reduce using rule 101 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 101 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 101 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 101 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 101 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 101 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 101 (compexp -> compexp1 sumexp .)


state 100

    (121) pexp -> CTEI . saveCTE
    (130) saveCTE -> .

    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)
    RBRACKET        reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    COMMA           reduce using rule 130 (saveCTE -> .)
    SEMICOLON       reduce using rule 130 (saveCTE -> .)
    TO              reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    CTEI            reduce using rule 130 (saveCTE -> .)
    CTEF            reduce using rule 130 (saveCTE -> .)
    CTEC            reduce using rule 130 (saveCTE -> .)
    CTESTRING       reduce using rule 130 (saveCTE -> .)
    LPAREN          reduce using rule 130 (saveCTE -> .)
    ID              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 89

state 101

    (109) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 127

state 102

    (110) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 128

state 103

    (118) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 129

state 104

    (119) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    RBRACKET        reduce using rule 57 (addOperadorName -> .)
    RPAREN          reduce using rule 57 (addOperadorName -> .)
    COMMA           reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 130

state 105

    (120) pexp -> var1 saveId .

    MUL             reduce using rule 120 (pexp -> var1 saveId .)
    DIV             reduce using rule 120 (pexp -> var1 saveId .)
    PLUS            reduce using rule 120 (pexp -> var1 saveId .)
    MINUS           reduce using rule 120 (pexp -> var1 saveId .)
    GT              reduce using rule 120 (pexp -> var1 saveId .)
    LT              reduce using rule 120 (pexp -> var1 saveId .)
    GTE             reduce using rule 120 (pexp -> var1 saveId .)
    LTE             reduce using rule 120 (pexp -> var1 saveId .)
    NE              reduce using rule 120 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 120 (pexp -> var1 saveId .)
    AND             reduce using rule 120 (pexp -> var1 saveId .)
    OR              reduce using rule 120 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 120 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 120 (pexp -> var1 saveId .)
    COMMA           reduce using rule 120 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 120 (pexp -> var1 saveId .)
    TO              reduce using rule 120 (pexp -> var1 saveId .)
    CTEI            reduce using rule 120 (pexp -> var1 saveId .)
    CTEF            reduce using rule 120 (pexp -> var1 saveId .)
    CTEC            reduce using rule 120 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 120 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 120 (pexp -> var1 saveId .)
    ID              reduce using rule 120 (pexp -> var1 saveId .)


state 106

    (122) pexp -> CTEF saveCTE .

    MUL             reduce using rule 122 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 122 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 122 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 122 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 122 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 122 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 122 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 122 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 122 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 122 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 122 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 122 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 122 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 122 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 122 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 122 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 122 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 122 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 122 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 122 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 122 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 122 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 122 (pexp -> CTEF saveCTE .)


state 107

    (123) pexp -> CTEC saveCTE .

    MUL             reduce using rule 123 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 123 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 123 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 123 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 123 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 123 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 123 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 123 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 123 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 123 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 123 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 123 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 123 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 123 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 123 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 123 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 123 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 123 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 123 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 123 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 123 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 123 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 123 (pexp -> CTEC saveCTE .)


state 108

    (124) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 124 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 124 (pexp -> CTESTRING saveCTE .)


state 109

    (126) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 131


state 110

    (70) llamada -> ID LPAREN . exp RPAREN
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 132
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 111

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 133
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 112

    (68) param2 -> param2 tipo var1 addV .

    RPAREN          reduce using rule 68 (param2 -> param2 tipo var1 addV .)
    INT             reduce using rule 68 (param2 -> param2 tipo var1 addV .)
    FLOAT           reduce using rule 68 (param2 -> param2 tipo var1 addV .)
    CHAR            reduce using rule 68 (param2 -> param2 tipo var1 addV .)


state 113

    (42) function1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 149


state 114

    (43) function2 -> ID save_fun LPAREN param RPAREN . SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    SEMICOLON       shift and go to state 150


state 115

    (18) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)


state 116

    (19) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMPARE         reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTESTRING       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)


state 117

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 151
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)

    exp                            shift and go to state 152
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 118

    (32) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 154
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)

    exp                            shift and go to state 153
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 119

    (91) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    nexp                           shift and go to state 155
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 120

    (99) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    compexp                        shift and go to state 156
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 121

    (102) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 157
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 122

    (103) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 158
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 123

    (104) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 159
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 124

    (105) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 160
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 125

    (106) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 161
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 126

    (107) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    sumexp                         shift and go to state 162
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 127

    (109) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    mulexp                         shift and go to state 163
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 128

    (110) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    mulexp                         shift and go to state 164
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 129

    (118) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    pexp                           shift and go to state 165
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 130

    (119) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RBRACKET        reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)

  ! CTEI            [ reduce using rule 127 (empty -> .) ]
  ! CTEF            [ reduce using rule 127 (empty -> .) ]
  ! CTEC            [ reduce using rule 127 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 127 (empty -> .) ]
  ! LPAREN          [ reduce using rule 127 (empty -> .) ]
  ! ID              [ reduce using rule 127 (empty -> .) ]

    pexp                           shift and go to state 166
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 131

    (126) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 126 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 126 (pexp -> LPAREN exp RPAREN .)


state 132

    (70) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 167


state 133

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 168


state 134

    (44) statement -> statement1 . statement
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement1                     shift and go to state 134
    statement                      shift and go to state 169
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 135

    (45) statement -> empty .

    RCURLY          reduce using rule 45 (statement -> empty .)
    RETURN          reduce using rule 45 (statement -> empty .)


state 136

    (46) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 170


state 137

    (47) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 171


state 138

    (48) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 172


state 139

    (49) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 173


state 140

    (50) statement1 -> for .

    ID              reduce using rule 50 (statement1 -> for .)
    READ            reduce using rule 50 (statement1 -> for .)
    PRINT           reduce using rule 50 (statement1 -> for .)
    FOR             reduce using rule 50 (statement1 -> for .)
    IF              reduce using rule 50 (statement1 -> for .)
    WHILE           reduce using rule 50 (statement1 -> for .)
    RCURLY          reduce using rule 50 (statement1 -> for .)
    RETURN          reduce using rule 50 (statement1 -> for .)


state 141

    (51) statement1 -> if .

    ID              reduce using rule 51 (statement1 -> if .)
    READ            reduce using rule 51 (statement1 -> if .)
    PRINT           reduce using rule 51 (statement1 -> if .)
    FOR             reduce using rule 51 (statement1 -> if .)
    IF              reduce using rule 51 (statement1 -> if .)
    WHILE           reduce using rule 51 (statement1 -> if .)
    RCURLY          reduce using rule 51 (statement1 -> if .)
    RETURN          reduce using rule 51 (statement1 -> if .)


state 142

    (52) statement1 -> while .

    ID              reduce using rule 52 (statement1 -> while .)
    READ            reduce using rule 52 (statement1 -> while .)
    PRINT           reduce using rule 52 (statement1 -> while .)
    FOR             reduce using rule 52 (statement1 -> while .)
    IF              reduce using rule 52 (statement1 -> while .)
    WHILE           reduce using rule 52 (statement1 -> while .)
    RCURLY          reduce using rule 52 (statement1 -> while .)
    RETURN          reduce using rule 52 (statement1 -> while .)


state 143

    (53) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> ID . LPAREN exp RPAREN
    (129) saveId2 -> .

    LPAREN          shift and go to state 110
    EQUALS          reduce using rule 129 (saveId2 -> .)
    LBRACKET        reduce using rule 129 (saveId2 -> .)

    saveId2                        shift and go to state 174

state 144

    (89) lectura -> READ . operatorRead LPAREN var1 operatorReadQuad RPAREN
    (115) operatorRead -> .

    LPAREN          reduce using rule 115 (operatorRead -> .)

    operatorRead                   shift and go to state 175

state 145

    (82) escritura -> PRINT . LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN

    LPAREN          shift and go to state 176


state 146

    (76) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (74) for_op -> .

    LPAREN          reduce using rule 74 (for_op -> .)

    for_op                         shift and go to state 177

state 147

    (71) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 178


state 148

    (81) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (80) while_op -> .

    LPAREN          reduce using rule 80 (while_op -> .)

    while_op                       shift and go to state 179

state 149

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 180


state 150

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON . LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LCURLY          shift and go to state 181


state 151

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (121) pexp -> CTEI . saveCTE
    (130) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 182
    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 130 (saveCTE -> .) ]

    saveCTE                        shift and go to state 89

state 152

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 183


state 153

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 184


state 154

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (121) pexp -> CTEI . saveCTE
    (130) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 185
    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 130 (saveCTE -> .) ]

    saveCTE                        shift and go to state 89

state 155

    (91) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (92) genera_quad_or -> .

    RBRACKET        reduce using rule 92 (genera_quad_or -> .)
    RPAREN          reduce using rule 92 (genera_quad_or -> .)
    COMMA           reduce using rule 92 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 92 (genera_quad_or -> .)
    TO              reduce using rule 92 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 186

state 156

    (99) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (93) genera_quad_and -> .

    OR              reduce using rule 93 (genera_quad_and -> .)
    RBRACKET        reduce using rule 93 (genera_quad_and -> .)
    RPAREN          reduce using rule 93 (genera_quad_and -> .)
    COMMA           reduce using rule 93 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 93 (genera_quad_and -> .)
    TO              reduce using rule 93 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 187

state 157

    (102) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 188

state 158

    (103) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 189

state 159

    (104) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 190

state 160

    (105) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 191

state 161

    (106) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 192

state 162

    (107) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (94) compare_quad -> .

    CTEI            reduce using rule 94 (compare_quad -> .)
    CTEF            reduce using rule 94 (compare_quad -> .)
    CTEC            reduce using rule 94 (compare_quad -> .)
    CTESTRING       reduce using rule 94 (compare_quad -> .)
    LPAREN          reduce using rule 94 (compare_quad -> .)
    ID              reduce using rule 94 (compare_quad -> .)
    PLUS            reduce using rule 94 (compare_quad -> .)
    MINUS           reduce using rule 94 (compare_quad -> .)
    MUL             reduce using rule 94 (compare_quad -> .)
    DIV             reduce using rule 94 (compare_quad -> .)
    AND             reduce using rule 94 (compare_quad -> .)
    OR              reduce using rule 94 (compare_quad -> .)
    RBRACKET        reduce using rule 94 (compare_quad -> .)
    RPAREN          reduce using rule 94 (compare_quad -> .)
    COMMA           reduce using rule 94 (compare_quad -> .)
    SEMICOLON       reduce using rule 94 (compare_quad -> .)
    TO              reduce using rule 94 (compare_quad -> .)

    compare_quad                   shift and go to state 193

state 163

    (109) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (111) genera_sum_quad -> .

    GT              reduce using rule 111 (genera_sum_quad -> .)
    LT              reduce using rule 111 (genera_sum_quad -> .)
    GTE             reduce using rule 111 (genera_sum_quad -> .)
    LTE             reduce using rule 111 (genera_sum_quad -> .)
    NE              reduce using rule 111 (genera_sum_quad -> .)
    COMPARE         reduce using rule 111 (genera_sum_quad -> .)
    AND             reduce using rule 111 (genera_sum_quad -> .)
    OR              reduce using rule 111 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 111 (genera_sum_quad -> .)
    RPAREN          reduce using rule 111 (genera_sum_quad -> .)
    COMMA           reduce using rule 111 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 111 (genera_sum_quad -> .)
    TO              reduce using rule 111 (genera_sum_quad -> .)
    CTEI            reduce using rule 111 (genera_sum_quad -> .)
    CTEF            reduce using rule 111 (genera_sum_quad -> .)
    CTEC            reduce using rule 111 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 111 (genera_sum_quad -> .)
    LPAREN          reduce using rule 111 (genera_sum_quad -> .)
    ID              reduce using rule 111 (genera_sum_quad -> .)
    PLUS            reduce using rule 111 (genera_sum_quad -> .)
    MINUS           reduce using rule 111 (genera_sum_quad -> .)
    MUL             reduce using rule 111 (genera_sum_quad -> .)
    DIV             reduce using rule 111 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 194

state 164

    (110) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (111) genera_sum_quad -> .

    GT              reduce using rule 111 (genera_sum_quad -> .)
    LT              reduce using rule 111 (genera_sum_quad -> .)
    GTE             reduce using rule 111 (genera_sum_quad -> .)
    LTE             reduce using rule 111 (genera_sum_quad -> .)
    NE              reduce using rule 111 (genera_sum_quad -> .)
    COMPARE         reduce using rule 111 (genera_sum_quad -> .)
    AND             reduce using rule 111 (genera_sum_quad -> .)
    OR              reduce using rule 111 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 111 (genera_sum_quad -> .)
    RPAREN          reduce using rule 111 (genera_sum_quad -> .)
    COMMA           reduce using rule 111 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 111 (genera_sum_quad -> .)
    TO              reduce using rule 111 (genera_sum_quad -> .)
    CTEI            reduce using rule 111 (genera_sum_quad -> .)
    CTEF            reduce using rule 111 (genera_sum_quad -> .)
    CTEC            reduce using rule 111 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 111 (genera_sum_quad -> .)
    LPAREN          reduce using rule 111 (genera_sum_quad -> .)
    ID              reduce using rule 111 (genera_sum_quad -> .)
    PLUS            reduce using rule 111 (genera_sum_quad -> .)
    MINUS           reduce using rule 111 (genera_sum_quad -> .)
    MUL             reduce using rule 111 (genera_sum_quad -> .)
    DIV             reduce using rule 111 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 195

state 165

    (118) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (112) genera_mul_quad -> .

    PLUS            reduce using rule 112 (genera_mul_quad -> .)
    MINUS           reduce using rule 112 (genera_mul_quad -> .)
    GT              reduce using rule 112 (genera_mul_quad -> .)
    LT              reduce using rule 112 (genera_mul_quad -> .)
    GTE             reduce using rule 112 (genera_mul_quad -> .)
    LTE             reduce using rule 112 (genera_mul_quad -> .)
    NE              reduce using rule 112 (genera_mul_quad -> .)
    COMPARE         reduce using rule 112 (genera_mul_quad -> .)
    AND             reduce using rule 112 (genera_mul_quad -> .)
    OR              reduce using rule 112 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 112 (genera_mul_quad -> .)
    RPAREN          reduce using rule 112 (genera_mul_quad -> .)
    COMMA           reduce using rule 112 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 112 (genera_mul_quad -> .)
    TO              reduce using rule 112 (genera_mul_quad -> .)
    CTEI            reduce using rule 112 (genera_mul_quad -> .)
    CTEF            reduce using rule 112 (genera_mul_quad -> .)
    CTEC            reduce using rule 112 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 112 (genera_mul_quad -> .)
    LPAREN          reduce using rule 112 (genera_mul_quad -> .)
    ID              reduce using rule 112 (genera_mul_quad -> .)
    MUL             reduce using rule 112 (genera_mul_quad -> .)
    DIV             reduce using rule 112 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 196

state 166

    (119) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (112) genera_mul_quad -> .

    PLUS            reduce using rule 112 (genera_mul_quad -> .)
    MINUS           reduce using rule 112 (genera_mul_quad -> .)
    GT              reduce using rule 112 (genera_mul_quad -> .)
    LT              reduce using rule 112 (genera_mul_quad -> .)
    GTE             reduce using rule 112 (genera_mul_quad -> .)
    LTE             reduce using rule 112 (genera_mul_quad -> .)
    NE              reduce using rule 112 (genera_mul_quad -> .)
    COMPARE         reduce using rule 112 (genera_mul_quad -> .)
    AND             reduce using rule 112 (genera_mul_quad -> .)
    OR              reduce using rule 112 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 112 (genera_mul_quad -> .)
    RPAREN          reduce using rule 112 (genera_mul_quad -> .)
    COMMA           reduce using rule 112 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 112 (genera_mul_quad -> .)
    TO              reduce using rule 112 (genera_mul_quad -> .)
    CTEI            reduce using rule 112 (genera_mul_quad -> .)
    CTEF            reduce using rule 112 (genera_mul_quad -> .)
    CTEC            reduce using rule 112 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 112 (genera_mul_quad -> .)
    LPAREN          reduce using rule 112 (genera_mul_quad -> .)
    ID              reduce using rule 112 (genera_mul_quad -> .)
    MUL             reduce using rule 112 (genera_mul_quad -> .)
    DIV             reduce using rule 112 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 197

state 167

    (70) llamada -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    COMPARE         reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 70 (llamada -> ID LPAREN exp RPAREN .)


state 168

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 198


state 169

    (44) statement -> statement1 statement .

    RCURLY          reduce using rule 44 (statement -> statement1 statement .)
    RETURN          reduce using rule 44 (statement -> statement1 statement .)


state 170

    (46) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 46 (statement1 -> asignacion SEMICOLON .)


state 171

    (47) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 47 (statement1 -> llamada SEMICOLON .)


state 172

    (48) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 48 (statement1 -> lectura SEMICOLON .)


state 173

    (49) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 49 (statement1 -> escritura SEMICOLON .)


state 174

    (53) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> ID saveId2 . mat EQUALS addOperadorName exp genera_quad_asignacion
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 199
    LBRACKET        shift and go to state 52

    arr                            shift and go to state 200
    mat                            shift and go to state 201

state 175

    (89) lectura -> READ operatorRead . LPAREN var1 operatorReadQuad RPAREN

    LPAREN          shift and go to state 202


state 176

    (82) escritura -> PRINT LPAREN . operadorPrint escritura1 operatorPrintQuad RPAREN
    (113) operadorPrint -> .

    COMILLA         reduce using rule 113 (operadorPrint -> .)
    CTEI            reduce using rule 113 (operadorPrint -> .)
    CTEF            reduce using rule 113 (operadorPrint -> .)
    CTEC            reduce using rule 113 (operadorPrint -> .)
    CTESTRING       reduce using rule 113 (operadorPrint -> .)
    LPAREN          reduce using rule 113 (operadorPrint -> .)
    ID              reduce using rule 113 (operadorPrint -> .)
    RPAREN          reduce using rule 113 (operadorPrint -> .)
    COMMA           reduce using rule 113 (operadorPrint -> .)
    OR              reduce using rule 113 (operadorPrint -> .)
    AND             reduce using rule 113 (operadorPrint -> .)
    GT              reduce using rule 113 (operadorPrint -> .)
    LT              reduce using rule 113 (operadorPrint -> .)
    GTE             reduce using rule 113 (operadorPrint -> .)
    LTE             reduce using rule 113 (operadorPrint -> .)
    NE              reduce using rule 113 (operadorPrint -> .)
    COMPARE         reduce using rule 113 (operadorPrint -> .)
    PLUS            reduce using rule 113 (operadorPrint -> .)
    MINUS           reduce using rule 113 (operadorPrint -> .)
    MUL             reduce using rule 113 (operadorPrint -> .)
    DIV             reduce using rule 113 (operadorPrint -> .)

    operadorPrint                  shift and go to state 203

state 177

    (76) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 204


state 178

    (71) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 205
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 179

    (81) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 206


state 180

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (127) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    RCURLY          reduce using rule 127 (empty -> .)

    vars                           shift and go to state 207
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 181

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY . vars statement RETURN exp SEMICOLON RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (127) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)

    vars                           shift and go to state 208
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 182

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 183

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 184

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 185

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 186

    (91) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 91 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 91 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 91 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 91 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 91 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 187

    (99) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 99 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 188

    (102) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 102 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 189

    (103) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 103 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 190

    (104) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 104 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 191

    (105) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 105 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 192

    (106) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 106 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 193

    (107) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 107 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 194

    (109) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 109 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 195

    (110) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 110 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 196

    (118) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 118 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 197

    (119) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 119 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 198

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 199

    (53) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 209

state 200

    (54) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 210


state 201

    (55) asignacion -> ID saveId2 mat . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 211


state 202

    (89) lectura -> READ operatorRead LPAREN . var1 operatorReadQuad RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (127) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 127 (empty -> .)

    var1                           shift and go to state 212
    empty                          shift and go to state 40

state 203

    (82) escritura -> PRINT LPAREN operadorPrint . escritura1 operatorPrintQuad RPAREN
    (83) escritura1 -> . escritura2 COMMA escritura2
    (84) escritura1 -> . escritura2
    (85) escritura2 -> . COMILLA CTESTRING COMILLA
    (86) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (87) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (88) escritura2 -> . exp
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    COMILLA         shift and go to state 215
    CTEI            shift and go to state 216
    CTEF            shift and go to state 217
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    COMMA           reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    escritura1                     shift and go to state 213
    escritura2                     shift and go to state 214
    exp                            shift and go to state 218
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 204

    (76) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (77) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 220

    for1                           shift and go to state 219

state 205

    (71) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 221


state 206

    (81) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 222
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 207

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 223
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 208

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars . statement RETURN exp SEMICOLON RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RETURN          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 224
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 209

    (53) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    exp                            shift and go to state 225
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 210

    (54) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 226

state 211

    (55) asignacion -> ID saveId2 mat EQUALS . addOperadorName exp genera_quad_asignacion
    (57) addOperadorName -> .

    CTEI            reduce using rule 57 (addOperadorName -> .)
    CTEF            reduce using rule 57 (addOperadorName -> .)
    CTEC            reduce using rule 57 (addOperadorName -> .)
    CTESTRING       reduce using rule 57 (addOperadorName -> .)
    LPAREN          reduce using rule 57 (addOperadorName -> .)
    ID              reduce using rule 57 (addOperadorName -> .)
    OR              reduce using rule 57 (addOperadorName -> .)
    AND             reduce using rule 57 (addOperadorName -> .)
    GT              reduce using rule 57 (addOperadorName -> .)
    LT              reduce using rule 57 (addOperadorName -> .)
    GTE             reduce using rule 57 (addOperadorName -> .)
    LTE             reduce using rule 57 (addOperadorName -> .)
    NE              reduce using rule 57 (addOperadorName -> .)
    COMPARE         reduce using rule 57 (addOperadorName -> .)
    PLUS            reduce using rule 57 (addOperadorName -> .)
    MINUS           reduce using rule 57 (addOperadorName -> .)
    MUL             reduce using rule 57 (addOperadorName -> .)
    DIV             reduce using rule 57 (addOperadorName -> .)
    SEMICOLON       reduce using rule 57 (addOperadorName -> .)
    TO              reduce using rule 57 (addOperadorName -> .)

    addOperadorName                shift and go to state 227

state 212

    (89) lectura -> READ operatorRead LPAREN var1 . operatorReadQuad RPAREN
    (116) operatorReadQuad -> .

    RPAREN          reduce using rule 116 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 228

state 213

    (82) escritura -> PRINT LPAREN operadorPrint escritura1 . operatorPrintQuad RPAREN
    (114) operatorPrintQuad -> .

    RPAREN          reduce using rule 114 (operatorPrintQuad -> .)

    operatorPrintQuad              shift and go to state 229

state 214

    (83) escritura1 -> escritura2 . COMMA escritura2
    (84) escritura1 -> escritura2 .

    COMMA           shift and go to state 230
    RPAREN          reduce using rule 84 (escritura1 -> escritura2 .)


state 215

    (85) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 231


state 216

    (86) escritura2 -> CTEI . saveCTE operatorPrintQuad
    (121) pexp -> CTEI . saveCTE
    (130) saveCTE -> .

    COMMA           reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 232

state 217

    (87) escritura2 -> CTEF . saveCTE operatorPrintQuad
    (122) pexp -> CTEF . saveCTE
    (130) saveCTE -> .

    COMMA           reduce using rule 130 (saveCTE -> .)
    RPAREN          reduce using rule 130 (saveCTE -> .)
    MUL             reduce using rule 130 (saveCTE -> .)
    DIV             reduce using rule 130 (saveCTE -> .)
    PLUS            reduce using rule 130 (saveCTE -> .)
    MINUS           reduce using rule 130 (saveCTE -> .)
    GT              reduce using rule 130 (saveCTE -> .)
    LT              reduce using rule 130 (saveCTE -> .)
    GTE             reduce using rule 130 (saveCTE -> .)
    LTE             reduce using rule 130 (saveCTE -> .)
    NE              reduce using rule 130 (saveCTE -> .)
    COMPARE         reduce using rule 130 (saveCTE -> .)
    AND             reduce using rule 130 (saveCTE -> .)
    OR              reduce using rule 130 (saveCTE -> .)

    saveCTE                        shift and go to state 233

state 218

    (88) escritura2 -> exp .

    COMMA           reduce using rule 88 (escritura2 -> exp .)
    RPAREN          reduce using rule 88 (escritura2 -> exp .)


state 219

    (76) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 234


state 220

    (77) for1 -> FROM . asignacion TO exp
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 236

    asignacion                     shift and go to state 235

state 221

    (71) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (95) if_quad -> .

    LCURLY          reduce using rule 95 (if_quad -> .)

    if_quad                        shift and go to state 237

state 222

    (81) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 238


state 223

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 239


state 224

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement . RETURN exp SEMICOLON RCURLY

    RETURN          shift and go to state 240


state 225

    (53) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (56) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 56 (genera_quad_asignacion -> .)
    TO              reduce using rule 56 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 241

state 226

    (54) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    exp                            shift and go to state 242
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 227

    (55) asignacion -> ID saveId2 mat EQUALS addOperadorName . exp genera_quad_asignacion
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)
    TO              reduce using rule 127 (empty -> .)

    exp                            shift and go to state 243
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 228

    (89) lectura -> READ operatorRead LPAREN var1 operatorReadQuad . RPAREN

    RPAREN          shift and go to state 244


state 229

    (82) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad . RPAREN

    RPAREN          shift and go to state 245


state 230

    (83) escritura1 -> escritura2 COMMA . escritura2
    (85) escritura2 -> . COMILLA CTESTRING COMILLA
    (86) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (87) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (88) escritura2 -> . exp
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    COMILLA         shift and go to state 215
    CTEI            shift and go to state 216
    CTEF            shift and go to state 217
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    escritura2                     shift and go to state 246
    exp                            shift and go to state 218
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 231

    (85) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 247


state 232

    (86) escritura2 -> CTEI saveCTE . operatorPrintQuad
    (121) pexp -> CTEI saveCTE .
    (114) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 114 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 114 (operatorPrintQuad -> .)
    MUL             reduce using rule 121 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 121 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 121 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 121 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 121 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 121 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 121 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 121 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 121 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 121 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 121 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 121 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 114 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 114 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 121 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 121 (pexp -> CTEI saveCTE .) ]

    operatorPrintQuad              shift and go to state 248

state 233

    (87) escritura2 -> CTEF saveCTE . operatorPrintQuad
    (122) pexp -> CTEF saveCTE .
    (114) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 114 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 114 (operatorPrintQuad -> .)
    MUL             reduce using rule 122 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 122 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 122 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 122 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 122 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 122 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 122 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 122 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 122 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 122 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 122 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 122 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 114 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 114 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 122 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 122 (pexp -> CTEF saveCTE .) ]

    operatorPrintQuad              shift and go to state 249

state 234

    (76) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY loop_end
    (75) for_quad -> .

    LCURLY          reduce using rule 75 (for_quad -> .)

    for_quad                       shift and go to state 250

state 235

    (77) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 251


state 236

    (53) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (129) saveId2 -> .

    EQUALS          reduce using rule 129 (saveId2 -> .)
    LBRACKET        reduce using rule 129 (saveId2 -> .)

    saveId2                        shift and go to state 174

state 237

    (71) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 252


state 238

    (81) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement RCURLY loop_end
    (79) while_quad -> .

    LCURLY          reduce using rule 79 (while_quad -> .)

    while_quad                     shift and go to state 253

state 239

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 240

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN . exp SEMICOLON RCURLY
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    SEMICOLON       reduce using rule 127 (empty -> .)

    exp                            shift and go to state 254
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 241

    (53) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 53 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 53 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 242

    (54) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (56) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 56 (genera_quad_asignacion -> .)
    TO              reduce using rule 56 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 255

state 243

    (55) asignacion -> ID saveId2 mat EQUALS addOperadorName exp . genera_quad_asignacion
    (56) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 56 (genera_quad_asignacion -> .)
    TO              reduce using rule 56 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 256

state 244

    (89) lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 89 (lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .)


state 245

    (82) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .

    SEMICOLON       reduce using rule 82 (escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .)


state 246

    (83) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 83 (escritura1 -> escritura2 COMMA escritura2 .)


state 247

    (85) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 85 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 85 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 248

    (86) escritura2 -> CTEI saveCTE operatorPrintQuad .

    COMMA           reduce using rule 86 (escritura2 -> CTEI saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 86 (escritura2 -> CTEI saveCTE operatorPrintQuad .)


state 249

    (87) escritura2 -> CTEF saveCTE operatorPrintQuad .

    COMMA           reduce using rule 87 (escritura2 -> CTEF saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 87 (escritura2 -> CTEF saveCTE operatorPrintQuad .)


state 250

    (76) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 257


state 251

    (77) for1 -> FROM asignacion TO . exp
    (90) exp -> . nexp
    (91) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (98) nexp -> . compexp
    (99) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (100) compexp -> . sumexp
    (101) compexp -> . compexp1 sumexp
    (108) sumexp -> . mulexp
    (109) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (110) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (102) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (103) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (104) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (105) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (106) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (117) mulexp -> . pexp
    (118) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (119) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (120) pexp -> . var1 saveId
    (121) pexp -> . CTEI saveCTE
    (122) pexp -> . CTEF saveCTE
    (123) pexp -> . CTEC saveCTE
    (124) pexp -> . CTESTRING saveCTE
    (125) pexp -> . llamada
    (126) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (70) llamada -> . ID LPAREN exp RPAREN
    (127) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 127 (empty -> .)
    DIV             reduce using rule 127 (empty -> .)
    PLUS            reduce using rule 127 (empty -> .)
    MINUS           reduce using rule 127 (empty -> .)
    GT              reduce using rule 127 (empty -> .)
    LT              reduce using rule 127 (empty -> .)
    GTE             reduce using rule 127 (empty -> .)
    LTE             reduce using rule 127 (empty -> .)
    NE              reduce using rule 127 (empty -> .)
    COMPARE         reduce using rule 127 (empty -> .)
    AND             reduce using rule 127 (empty -> .)
    OR              reduce using rule 127 (empty -> .)
    RPAREN          reduce using rule 127 (empty -> .)

    exp                            shift and go to state 258
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 40

state 252

    (71) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 259
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 253

    (81) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 260


state 254

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 261


state 255

    (54) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 54 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 54 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 256

    (55) asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 55 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 55 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)


state 257

    (76) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY loop_end
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 262
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 258

    (77) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 77 (for1 -> FROM asignacion TO exp .)


state 259

    (71) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 263


state 260

    (81) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement RCURLY loop_end
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 264
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 261

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON . RCURLY

    RCURLY          shift and go to state 265


state 262

    (76) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 266


state 263

    (71) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (72) else -> . ELSE else_quad LCURLY statement RCURLY
    (73) else -> . empty
    (127) empty -> .

    ELSE            shift and go to state 268
    ID              reduce using rule 127 (empty -> .)
    READ            reduce using rule 127 (empty -> .)
    PRINT           reduce using rule 127 (empty -> .)
    FOR             reduce using rule 127 (empty -> .)
    IF              reduce using rule 127 (empty -> .)
    WHILE           reduce using rule 127 (empty -> .)
    RCURLY          reduce using rule 127 (empty -> .)
    RETURN          reduce using rule 127 (empty -> .)

    else                           shift and go to state 267
    empty                          shift and go to state 269

state 264

    (81) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 270


state 265

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .

    FUN             reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    $end            reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)


state 266

    (76) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . loop_end
    (78) loop_end -> .

    ID              reduce using rule 78 (loop_end -> .)
    READ            reduce using rule 78 (loop_end -> .)
    PRINT           reduce using rule 78 (loop_end -> .)
    FOR             reduce using rule 78 (loop_end -> .)
    IF              reduce using rule 78 (loop_end -> .)
    WHILE           reduce using rule 78 (loop_end -> .)
    RCURLY          reduce using rule 78 (loop_end -> .)
    RETURN          reduce using rule 78 (loop_end -> .)

    loop_end                       shift and go to state 271

state 267

    (71) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (96) end_if -> .

    ID              reduce using rule 96 (end_if -> .)
    READ            reduce using rule 96 (end_if -> .)
    PRINT           reduce using rule 96 (end_if -> .)
    FOR             reduce using rule 96 (end_if -> .)
    IF              reduce using rule 96 (end_if -> .)
    WHILE           reduce using rule 96 (end_if -> .)
    RCURLY          reduce using rule 96 (end_if -> .)
    RETURN          reduce using rule 96 (end_if -> .)

    end_if                         shift and go to state 272

state 268

    (72) else -> ELSE . else_quad LCURLY statement RCURLY
    (97) else_quad -> .

    LCURLY          reduce using rule 97 (else_quad -> .)

    else_quad                      shift and go to state 273

state 269

    (73) else -> empty .

    ID              reduce using rule 73 (else -> empty .)
    READ            reduce using rule 73 (else -> empty .)
    PRINT           reduce using rule 73 (else -> empty .)
    FOR             reduce using rule 73 (else -> empty .)
    IF              reduce using rule 73 (else -> empty .)
    WHILE           reduce using rule 73 (else -> empty .)
    RCURLY          reduce using rule 73 (else -> empty .)
    RETURN          reduce using rule 73 (else -> empty .)


state 270

    (81) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY . loop_end
    (78) loop_end -> .

    ID              reduce using rule 78 (loop_end -> .)
    READ            reduce using rule 78 (loop_end -> .)
    PRINT           reduce using rule 78 (loop_end -> .)
    FOR             reduce using rule 78 (loop_end -> .)
    IF              reduce using rule 78 (loop_end -> .)
    WHILE           reduce using rule 78 (loop_end -> .)
    RCURLY          reduce using rule 78 (loop_end -> .)
    RETURN          reduce using rule 78 (loop_end -> .)

    loop_end                       shift and go to state 274

state 271

    (76) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 76 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)


state 272

    (71) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    PRINT           reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 71 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 273

    (72) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 275


state 274

    (81) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 81 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)


state 275

    (72) else -> ELSE else_quad LCURLY . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (127) empty -> .
    (53) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (54) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (55) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (70) llamada -> . ID LPAREN exp RPAREN
    (89) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (82) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (76) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (71) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (81) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 127 (empty -> .)
    ID              shift and go to state 143
    READ            shift and go to state 144
    PRINT           shift and go to state 145
    FOR             shift and go to state 146
    IF              shift and go to state 147
    WHILE           shift and go to state 148

    statement                      shift and go to state 276
    statement1                     shift and go to state 134
    empty                          shift and go to state 135
    asignacion                     shift and go to state 136
    llamada                        shift and go to state 137
    lectura                        shift and go to state 138
    escritura                      shift and go to state 139
    for                            shift and go to state 140
    if                             shift and go to state 141
    while                          shift and go to state 142

state 276

    (72) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 277


state 277

    (72) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    PRINT           reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 72 (else -> ELSE else_quad LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 121 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 121 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 121 resolved as shift
WARNING: shift/reduce conflict for ID in state 121 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 122 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 122 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 122 resolved as shift
WARNING: shift/reduce conflict for ID in state 122 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 123 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 123 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 123 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 123 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 123 resolved as shift
WARNING: shift/reduce conflict for ID in state 123 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 124 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 124 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 124 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 124 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 124 resolved as shift
WARNING: shift/reduce conflict for ID in state 124 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 125 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 125 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 125 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 125 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 125 resolved as shift
WARNING: shift/reduce conflict for ID in state 125 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 126 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 126 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 127 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 128 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 128 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 129 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 130 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 151 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 154 resolved as shift
WARNING: reduce/reduce conflict in state 56 resolved using rule (param -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 56
WARNING: reduce/reduce conflict in state 232 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 232
WARNING: reduce/reduce conflict in state 233 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 233
