Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON programa1
Rule 2     programa1 -> vars modules programa2
Rule 3     programa1 -> vars modules
Rule 4     programa1 -> programa2
Rule 5     programa2 -> main
Rule 6     main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END
Rule 7     tipo -> INT
Rule 8     tipo -> FLOAT
Rule 9     tipo -> CHAR
Rule 10    vars -> var
Rule 11    vars -> empty
Rule 12    var -> VAR var2 var2
Rule 13    var1 -> ID
Rule 14    var1 -> ID COMMA var1
Rule 15    var1 -> ID arr var1
Rule 16    var1 -> ID mat var1
Rule 17    var1 -> ID especial
Rule 18    var1 -> empty
Rule 19    var2 -> tipo var1 SEMICOLON
Rule 20    var2 -> empty
Rule 21    especial -> TRANSPUESTA
Rule 22    especial -> INVERSA
Rule 23    especial -> DETERMINANTE
Rule 24    arr -> LBRACKET CTEI RBRACKET
Rule 25    arr -> LBRACKET exp RBRACKET
Rule 26    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 27    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 28    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 29    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 30    modules -> function modules
Rule 31    modules -> empty
Rule 32    function -> FUN VOID function1
Rule 33    function -> FUN tipo function2
Rule 34    function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 35    function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 36    statement -> statement1 statement
Rule 37    statement -> empty
Rule 38    statement1 -> asignacion SEMICOLON
Rule 39    statement1 -> llamada SEMICOLON
Rule 40    statement1 -> lectura SEMICOLON
Rule 41    statement1 -> escritura SEMICOLON
Rule 42    statement1 -> for
Rule 43    statement1 -> if
Rule 44    statement1 -> while
Rule 45    asignacion -> ID EQUALS exp
Rule 46    asignacion -> ID arr EQUALS exp
Rule 47    asignacion -> ID mat EQUALS exp
Rule 48    param -> tipo param1
Rule 49    param -> empty
Rule 50    param1 -> ID
Rule 51    param1 -> ID COMMA param1
Rule 52    param1 -> empty
Rule 53    llamada -> ID LPAREN exp RPAREN
Rule 54    if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET
Rule 55    if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
Rule 56    else -> ELSE LBRACKET statement LBRACKET
Rule 57    else -> empty
Rule 58    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 59    for1 -> FROM asignacion TO exp
Rule 60    while -> LPAREN exp RPAREN LCURLY statement RCURLY
Rule 61    escritura -> PRINT LPAREN escritura1 RPAREN
Rule 62    escritura1 -> escritura2 COMMA escritura2
Rule 63    escritura1 -> escritura2
Rule 64    escritura2 -> CTESTRING
Rule 65    escritura2 -> exp
Rule 66    lectura -> READ LPAREN var1 RPAREN
Rule 67    exp -> nexp
Rule 68    exp -> nexp OR nexp
Rule 69    nexp -> compexp
Rule 70    nexp -> compexp AND compexp
Rule 71    compexp -> sumexp
Rule 72    compexp -> compexp1 sumexp
Rule 73    compexp1 -> sumexp GT sumexp
Rule 74    compexp1 -> sumexp LT sumexp
Rule 75    compexp1 -> sumexp GTE sumexp
Rule 76    compexp1 -> sumexp LTE sumexp
Rule 77    compexp1 -> sumexp NE sumexp
Rule 78    sumexp -> mulexp
Rule 79    sumexp -> mulexp PLUS mulexp
Rule 80    sumexp -> mulexp MINUS mulexp
Rule 81    mulexp -> pexp
Rule 82    mulexp -> pexp MUL pexp
Rule 83    mulexp -> pexp DIV pexp
Rule 84    pexp -> var1
Rule 85    pexp -> CTEI
Rule 86    pexp -> CTEF
Rule 87    pexp -> CTEC
Rule 88    pexp -> llamada
Rule 89    pexp -> LPAREN exp RPAREN
Rule 90    empty -> <empty>

Terminals, with rules where they appear

AND                  : 70
CHAR                 : 9
COMMA                : 14 51 62
CTEC                 : 87
CTEF                 : 86
CTEI                 : 24 26 26 28 29 85
CTESTRING            : 64
DETERMINANTE         : 23
DIV                  : 83
ELSE                 : 56
END                  : 6
EQUALS               : 45 46 47
FLOAT                : 8
FOR                  : 58
FROM                 : 59
FUN                  : 32 33
GT                   : 73
GTE                  : 75
ID                   : 1 13 14 15 16 17 34 35 45 46 47 50 51 53
IF                   : 54 55
INT                  : 7
INVERSA              : 22
LBRACKET             : 24 25 26 26 27 27 28 28 29 29 54 55 56 56
LCURLY               : 6 34 35 58 60
LPAREN               : 6 34 35 53 54 55 58 60 61 66 89
LT                   : 74
LTE                  : 76
MAIN                 : 6
MINUS                : 80
MUL                  : 82
NE                   : 77
OR                   : 68
PLUS                 : 79
PRINT                : 61
PROGRAM              : 1
RBRACKET             : 24 25 26 26 27 27 28 28 29 29 54 55
RCURLY               : 6 34 35 58 60
READ                 : 66
RETURN               : 35
RPAREN               : 6 34 35 53 54 55 58 60 61 66 89
SEMICOLON            : 1 19 34 35 35 38 39 40 41
TO                   : 59
TRANSPUESTA          : 21
VAR                  : 12
VOID                 : 32
error                : 

Nonterminals, with rules where they appear

arr                  : 15 46
asignacion           : 38 59
compexp              : 69 70 70
compexp1             : 72
else                 : 55
empty                : 11 18 20 31 37 49 52 57
escritura            : 41
escritura1           : 61
escritura2           : 62 62 63
especial             : 17
exp                  : 25 27 27 28 29 35 45 46 47 53 54 55 59 60 65 89
for                  : 42
for1                 : 58
function             : 30
function1            : 32
function2            : 33
if                   : 43
lectura              : 40
llamada              : 39 88
main                 : 5
mat                  : 16 47
modules              : 2 3 30
mulexp               : 78 79 79 80 80
nexp                 : 67 68 68
param                : 6 34 35
param1               : 48 51
pexp                 : 81 82 82 83 83
programa             : 0
programa1            : 1
programa2            : 2 4
statement            : 6 34 35 36 54 55 56 58 60
statement1           : 36
sumexp               : 71 72 73 73 74 74 75 75 76 76 77 77
tipo                 : 19 33 48
var                  : 10
var1                 : 14 15 16 19 66 84
var2                 : 12 12
vars                 : 2 3 6 34 35
while                : 44

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . programa1
    (2) programa1 -> . vars modules programa2
    (3) programa1 -> . vars modules
    (4) programa1 -> . programa2
    (10) vars -> . var
    (11) vars -> . empty
    (5) programa2 -> . main
    (12) var -> . VAR var2 var2
    (90) empty -> .
    (6) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 11
    FUN             reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)
    MAIN            shift and go to state 12

  ! MAIN            [ reduce using rule 90 (empty -> .) ]

    programa1                      shift and go to state 5
    vars                           shift and go to state 6
    programa2                      shift and go to state 7
    var                            shift and go to state 8
    empty                          shift and go to state 9
    main                           shift and go to state 10

state 5

    (1) programa -> PROGRAM ID SEMICOLON programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON programa1 .)


state 6

    (2) programa1 -> vars . modules programa2
    (3) programa1 -> vars . modules
    (30) modules -> . function modules
    (31) modules -> . empty
    (32) function -> . FUN VOID function1
    (33) function -> . FUN tipo function2
    (90) empty -> .

    FUN             shift and go to state 16
    MAIN            reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)

    modules                        shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 7

    (4) programa1 -> programa2 .

    $end            reduce using rule 4 (programa1 -> programa2 .)


state 8

    (10) vars -> var .

    FUN             reduce using rule 10 (vars -> var .)
    MAIN            reduce using rule 10 (vars -> var .)
    $end            reduce using rule 10 (vars -> var .)
    ID              reduce using rule 10 (vars -> var .)
    READ            reduce using rule 10 (vars -> var .)
    PRINT           reduce using rule 10 (vars -> var .)
    FOR             reduce using rule 10 (vars -> var .)
    IF              reduce using rule 10 (vars -> var .)
    LPAREN          reduce using rule 10 (vars -> var .)
    RCURLY          reduce using rule 10 (vars -> var .)
    RETURN          reduce using rule 10 (vars -> var .)


state 9

    (11) vars -> empty .

    FUN             reduce using rule 11 (vars -> empty .)
    MAIN            reduce using rule 11 (vars -> empty .)
    $end            reduce using rule 11 (vars -> empty .)
    ID              reduce using rule 11 (vars -> empty .)
    READ            reduce using rule 11 (vars -> empty .)
    PRINT           reduce using rule 11 (vars -> empty .)
    FOR             reduce using rule 11 (vars -> empty .)
    IF              reduce using rule 11 (vars -> empty .)
    LPAREN          reduce using rule 11 (vars -> empty .)
    RCURLY          reduce using rule 11 (vars -> empty .)
    RETURN          reduce using rule 11 (vars -> empty .)


state 10

    (5) programa2 -> main .

    $end            reduce using rule 5 (programa2 -> main .)


state 11

    (12) var -> VAR . var2 var2
    (19) var2 -> . tipo var1 SEMICOLON
    (20) var2 -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (90) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    FUN             reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)
    RCURLY          reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)

  ! INT             [ reduce using rule 90 (empty -> .) ]
  ! FLOAT           [ reduce using rule 90 (empty -> .) ]
  ! CHAR            [ reduce using rule 90 (empty -> .) ]

    var2                           shift and go to state 17
    tipo                           shift and go to state 18
    empty                          shift and go to state 19

state 12

    (6) main -> MAIN . LPAREN param RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 23


state 13

    (2) programa1 -> vars modules . programa2
    (3) programa1 -> vars modules .
    (5) programa2 -> . main
    (6) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 3 (programa1 -> vars modules .)
    MAIN            shift and go to state 12

    programa2                      shift and go to state 24
    main                           shift and go to state 10

state 14

    (30) modules -> function . modules
    (30) modules -> . function modules
    (31) modules -> . empty
    (32) function -> . FUN VOID function1
    (33) function -> . FUN tipo function2
    (90) empty -> .

    FUN             shift and go to state 16
    MAIN            reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)

    function                       shift and go to state 14
    modules                        shift and go to state 25
    empty                          shift and go to state 15

state 15

    (31) modules -> empty .

    MAIN            reduce using rule 31 (modules -> empty .)
    $end            reduce using rule 31 (modules -> empty .)


state 16

    (32) function -> FUN . VOID function1
    (33) function -> FUN . tipo function2
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR

    VOID            shift and go to state 26
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 27

state 17

    (12) var -> VAR var2 . var2
    (19) var2 -> . tipo var1 SEMICOLON
    (20) var2 -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (90) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    FUN             reduce using rule 90 (empty -> .)
    MAIN            reduce using rule 90 (empty -> .)
    $end            reduce using rule 90 (empty -> .)
    ID              reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)
    RCURLY          reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)

    var2                           shift and go to state 28
    tipo                           shift and go to state 18
    empty                          shift and go to state 19

state 18

    (19) var2 -> tipo . var1 SEMICOLON
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (90) empty -> .

    ID              shift and go to state 30
    SEMICOLON       reduce using rule 90 (empty -> .)

    var1                           shift and go to state 29
    empty                          shift and go to state 31

state 19

    (20) var2 -> empty .

    INT             reduce using rule 20 (var2 -> empty .)
    FLOAT           reduce using rule 20 (var2 -> empty .)
    CHAR            reduce using rule 20 (var2 -> empty .)
    FUN             reduce using rule 20 (var2 -> empty .)
    MAIN            reduce using rule 20 (var2 -> empty .)
    $end            reduce using rule 20 (var2 -> empty .)
    ID              reduce using rule 20 (var2 -> empty .)
    READ            reduce using rule 20 (var2 -> empty .)
    PRINT           reduce using rule 20 (var2 -> empty .)
    FOR             reduce using rule 20 (var2 -> empty .)
    IF              reduce using rule 20 (var2 -> empty .)
    LPAREN          reduce using rule 20 (var2 -> empty .)
    RCURLY          reduce using rule 20 (var2 -> empty .)
    RETURN          reduce using rule 20 (var2 -> empty .)


state 20

    (7) tipo -> INT .

    ID              reduce using rule 7 (tipo -> INT .)
    SEMICOLON       reduce using rule 7 (tipo -> INT .)
    RPAREN          reduce using rule 7 (tipo -> INT .)


state 21

    (8) tipo -> FLOAT .

    ID              reduce using rule 8 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 8 (tipo -> FLOAT .)
    RPAREN          reduce using rule 8 (tipo -> FLOAT .)


state 22

    (9) tipo -> CHAR .

    ID              reduce using rule 9 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 9 (tipo -> CHAR .)
    RPAREN          reduce using rule 9 (tipo -> CHAR .)


state 23

    (6) main -> MAIN LPAREN . param RPAREN LCURLY vars statement RCURLY END
    (48) param -> . tipo param1
    (49) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (90) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 90 (empty -> .)

    param                          shift and go to state 32
    tipo                           shift and go to state 33
    empty                          shift and go to state 34

state 24

    (2) programa1 -> vars modules programa2 .

    $end            reduce using rule 2 (programa1 -> vars modules programa2 .)


state 25

    (30) modules -> function modules .

    MAIN            reduce using rule 30 (modules -> function modules .)
    $end            reduce using rule 30 (modules -> function modules .)


state 26

    (32) function -> FUN VOID . function1
    (34) function1 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 36

    function1                      shift and go to state 35

state 27

    (33) function -> FUN tipo . function2
    (35) function2 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 38

    function2                      shift and go to state 37

state 28

    (12) var -> VAR var2 var2 .

    FUN             reduce using rule 12 (var -> VAR var2 var2 .)
    MAIN            reduce using rule 12 (var -> VAR var2 var2 .)
    $end            reduce using rule 12 (var -> VAR var2 var2 .)
    ID              reduce using rule 12 (var -> VAR var2 var2 .)
    READ            reduce using rule 12 (var -> VAR var2 var2 .)
    PRINT           reduce using rule 12 (var -> VAR var2 var2 .)
    FOR             reduce using rule 12 (var -> VAR var2 var2 .)
    IF              reduce using rule 12 (var -> VAR var2 var2 .)
    LPAREN          reduce using rule 12 (var -> VAR var2 var2 .)
    RCURLY          reduce using rule 12 (var -> VAR var2 var2 .)
    RETURN          reduce using rule 12 (var -> VAR var2 var2 .)


state 29

    (19) var2 -> tipo var1 . SEMICOLON

    SEMICOLON       shift and go to state 39


state 30

    (13) var1 -> ID .
    (14) var1 -> ID . COMMA var1
    (15) var1 -> ID . arr var1
    (16) var1 -> ID . mat var1
    (17) var1 -> ID . especial
    (24) arr -> . LBRACKET CTEI RBRACKET
    (25) arr -> . LBRACKET exp RBRACKET
    (26) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (27) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (28) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (21) especial -> . TRANSPUESTA
    (22) especial -> . INVERSA
    (23) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 13 (var1 -> ID .)
    MUL             reduce using rule 13 (var1 -> ID .)
    DIV             reduce using rule 13 (var1 -> ID .)
    PLUS            reduce using rule 13 (var1 -> ID .)
    MINUS           reduce using rule 13 (var1 -> ID .)
    GT              reduce using rule 13 (var1 -> ID .)
    LT              reduce using rule 13 (var1 -> ID .)
    GTE             reduce using rule 13 (var1 -> ID .)
    LTE             reduce using rule 13 (var1 -> ID .)
    NE              reduce using rule 13 (var1 -> ID .)
    AND             reduce using rule 13 (var1 -> ID .)
    OR              reduce using rule 13 (var1 -> ID .)
    RBRACKET        reduce using rule 13 (var1 -> ID .)
    RPAREN          reduce using rule 13 (var1 -> ID .)
    TO              reduce using rule 13 (var1 -> ID .)
    CTEI            reduce using rule 13 (var1 -> ID .)
    CTEF            reduce using rule 13 (var1 -> ID .)
    CTEC            reduce using rule 13 (var1 -> ID .)
    LPAREN          reduce using rule 13 (var1 -> ID .)
    ID              reduce using rule 13 (var1 -> ID .)
    COMMA           shift and go to state 40
    LBRACKET        shift and go to state 44
    TRANSPUESTA     shift and go to state 45
    INVERSA         shift and go to state 46
    DETERMINANTE    shift and go to state 47

  ! COMMA           [ reduce using rule 13 (var1 -> ID .) ]

    arr                            shift and go to state 41
    mat                            shift and go to state 42
    especial                       shift and go to state 43

state 31

    (18) var1 -> empty .

    SEMICOLON       reduce using rule 18 (var1 -> empty .)
    MUL             reduce using rule 18 (var1 -> empty .)
    DIV             reduce using rule 18 (var1 -> empty .)
    PLUS            reduce using rule 18 (var1 -> empty .)
    MINUS           reduce using rule 18 (var1 -> empty .)
    GT              reduce using rule 18 (var1 -> empty .)
    LT              reduce using rule 18 (var1 -> empty .)
    GTE             reduce using rule 18 (var1 -> empty .)
    LTE             reduce using rule 18 (var1 -> empty .)
    NE              reduce using rule 18 (var1 -> empty .)
    AND             reduce using rule 18 (var1 -> empty .)
    OR              reduce using rule 18 (var1 -> empty .)
    RBRACKET        reduce using rule 18 (var1 -> empty .)
    RPAREN          reduce using rule 18 (var1 -> empty .)
    TO              reduce using rule 18 (var1 -> empty .)
    COMMA           reduce using rule 18 (var1 -> empty .)
    CTEI            reduce using rule 18 (var1 -> empty .)
    CTEF            reduce using rule 18 (var1 -> empty .)
    CTEC            reduce using rule 18 (var1 -> empty .)
    LPAREN          reduce using rule 18 (var1 -> empty .)
    ID              reduce using rule 18 (var1 -> empty .)


state 32

    (6) main -> MAIN LPAREN param . RPAREN LCURLY vars statement RCURLY END

    RPAREN          shift and go to state 48


state 33

    (48) param -> tipo . param1
    (50) param1 -> . ID
    (51) param1 -> . ID COMMA param1
    (52) param1 -> . empty
    (90) empty -> .

    ID              shift and go to state 50
    RPAREN          reduce using rule 90 (empty -> .)

    param1                         shift and go to state 49
    empty                          shift and go to state 51

state 34

    (49) param -> empty .

    RPAREN          reduce using rule 49 (param -> empty .)


state 35

    (32) function -> FUN VOID function1 .

    FUN             reduce using rule 32 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 32 (function -> FUN VOID function1 .)
    $end            reduce using rule 32 (function -> FUN VOID function1 .)


state 36

    (34) function1 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 52


state 37

    (33) function -> FUN tipo function2 .

    FUN             reduce using rule 33 (function -> FUN tipo function2 .)
    MAIN            reduce using rule 33 (function -> FUN tipo function2 .)
    $end            reduce using rule 33 (function -> FUN tipo function2 .)


state 38

    (35) function2 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LPAREN          shift and go to state 53


state 39

    (19) var2 -> tipo var1 SEMICOLON .

    INT             reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    FLOAT           reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    CHAR            reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    FUN             reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    MAIN            reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    $end            reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    ID              reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    READ            reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    PRINT           reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    FOR             reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    IF              reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    LPAREN          reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    RCURLY          reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)
    RETURN          reduce using rule 19 (var2 -> tipo var1 SEMICOLON .)


state 40

    (14) var1 -> ID COMMA . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (90) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 30
    SEMICOLON       reduce using rule 90 (empty -> .)
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    CTEI            reduce using rule 90 (empty -> .)
    CTEF            reduce using rule 90 (empty -> .)
    CTEC            reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)

  ! ID              [ reduce using rule 90 (empty -> .) ]

    var1                           shift and go to state 54
    empty                          shift and go to state 31

state 41

    (15) var1 -> ID arr . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (90) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 30
    SEMICOLON       reduce using rule 90 (empty -> .)
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    CTEI            reduce using rule 90 (empty -> .)
    CTEF            reduce using rule 90 (empty -> .)
    CTEC            reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)

  ! ID              [ reduce using rule 90 (empty -> .) ]

    var1                           shift and go to state 55
    empty                          shift and go to state 31

state 42

    (16) var1 -> ID mat . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (90) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 30
    SEMICOLON       reduce using rule 90 (empty -> .)
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    CTEI            reduce using rule 90 (empty -> .)
    CTEF            reduce using rule 90 (empty -> .)
    CTEC            reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)

  ! ID              [ reduce using rule 90 (empty -> .) ]

    var1                           shift and go to state 56
    empty                          shift and go to state 31

state 43

    (17) var1 -> ID especial .

    SEMICOLON       reduce using rule 17 (var1 -> ID especial .)
    MUL             reduce using rule 17 (var1 -> ID especial .)
    DIV             reduce using rule 17 (var1 -> ID especial .)
    PLUS            reduce using rule 17 (var1 -> ID especial .)
    MINUS           reduce using rule 17 (var1 -> ID especial .)
    GT              reduce using rule 17 (var1 -> ID especial .)
    LT              reduce using rule 17 (var1 -> ID especial .)
    GTE             reduce using rule 17 (var1 -> ID especial .)
    LTE             reduce using rule 17 (var1 -> ID especial .)
    NE              reduce using rule 17 (var1 -> ID especial .)
    AND             reduce using rule 17 (var1 -> ID especial .)
    OR              reduce using rule 17 (var1 -> ID especial .)
    RBRACKET        reduce using rule 17 (var1 -> ID especial .)
    RPAREN          reduce using rule 17 (var1 -> ID especial .)
    TO              reduce using rule 17 (var1 -> ID especial .)
    COMMA           reduce using rule 17 (var1 -> ID especial .)
    CTEI            reduce using rule 17 (var1 -> ID especial .)
    CTEF            reduce using rule 17 (var1 -> ID especial .)
    CTEC            reduce using rule 17 (var1 -> ID especial .)
    LPAREN          reduce using rule 17 (var1 -> ID especial .)
    ID              reduce using rule 17 (var1 -> ID especial .)


state 44

    (24) arr -> LBRACKET . CTEI RBRACKET
    (25) arr -> LBRACKET . exp RBRACKET
    (26) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (27) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (28) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 57
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)

    exp                            shift and go to state 58
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 45

    (21) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 21 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 21 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 21 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 21 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 21 (especial -> TRANSPUESTA .)
    GT              reduce using rule 21 (especial -> TRANSPUESTA .)
    LT              reduce using rule 21 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 21 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 21 (especial -> TRANSPUESTA .)
    NE              reduce using rule 21 (especial -> TRANSPUESTA .)
    AND             reduce using rule 21 (especial -> TRANSPUESTA .)
    OR              reduce using rule 21 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 21 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 21 (especial -> TRANSPUESTA .)
    TO              reduce using rule 21 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 21 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 21 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 21 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 21 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 21 (especial -> TRANSPUESTA .)
    ID              reduce using rule 21 (especial -> TRANSPUESTA .)


state 46

    (22) especial -> INVERSA .

    SEMICOLON       reduce using rule 22 (especial -> INVERSA .)
    MUL             reduce using rule 22 (especial -> INVERSA .)
    DIV             reduce using rule 22 (especial -> INVERSA .)
    PLUS            reduce using rule 22 (especial -> INVERSA .)
    MINUS           reduce using rule 22 (especial -> INVERSA .)
    GT              reduce using rule 22 (especial -> INVERSA .)
    LT              reduce using rule 22 (especial -> INVERSA .)
    GTE             reduce using rule 22 (especial -> INVERSA .)
    LTE             reduce using rule 22 (especial -> INVERSA .)
    NE              reduce using rule 22 (especial -> INVERSA .)
    AND             reduce using rule 22 (especial -> INVERSA .)
    OR              reduce using rule 22 (especial -> INVERSA .)
    RBRACKET        reduce using rule 22 (especial -> INVERSA .)
    RPAREN          reduce using rule 22 (especial -> INVERSA .)
    TO              reduce using rule 22 (especial -> INVERSA .)
    COMMA           reduce using rule 22 (especial -> INVERSA .)
    CTEI            reduce using rule 22 (especial -> INVERSA .)
    CTEF            reduce using rule 22 (especial -> INVERSA .)
    CTEC            reduce using rule 22 (especial -> INVERSA .)
    LPAREN          reduce using rule 22 (especial -> INVERSA .)
    ID              reduce using rule 22 (especial -> INVERSA .)


state 47

    (23) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 23 (especial -> DETERMINANTE .)
    MUL             reduce using rule 23 (especial -> DETERMINANTE .)
    DIV             reduce using rule 23 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 23 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 23 (especial -> DETERMINANTE .)
    GT              reduce using rule 23 (especial -> DETERMINANTE .)
    LT              reduce using rule 23 (especial -> DETERMINANTE .)
    GTE             reduce using rule 23 (especial -> DETERMINANTE .)
    LTE             reduce using rule 23 (especial -> DETERMINANTE .)
    NE              reduce using rule 23 (especial -> DETERMINANTE .)
    AND             reduce using rule 23 (especial -> DETERMINANTE .)
    OR              reduce using rule 23 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 23 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 23 (especial -> DETERMINANTE .)
    TO              reduce using rule 23 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 23 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 23 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 23 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 23 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 23 (especial -> DETERMINANTE .)
    ID              reduce using rule 23 (especial -> DETERMINANTE .)


state 48

    (6) main -> MAIN LPAREN param RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 71


state 49

    (48) param -> tipo param1 .

    RPAREN          reduce using rule 48 (param -> tipo param1 .)


state 50

    (50) param1 -> ID .
    (51) param1 -> ID . COMMA param1

    RPAREN          reduce using rule 50 (param1 -> ID .)
    COMMA           shift and go to state 72


state 51

    (52) param1 -> empty .

    RPAREN          reduce using rule 52 (param1 -> empty .)


state 52

    (34) function1 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RCURLY
    (48) param -> . tipo param1
    (49) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (90) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 90 (empty -> .)

    param                          shift and go to state 73
    tipo                           shift and go to state 33
    empty                          shift and go to state 34

state 53

    (35) function2 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (48) param -> . tipo param1
    (49) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (90) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 90 (empty -> .)

    param                          shift and go to state 74
    tipo                           shift and go to state 33
    empty                          shift and go to state 34

state 54

    (14) var1 -> ID COMMA var1 .

    SEMICOLON       reduce using rule 14 (var1 -> ID COMMA var1 .)
    MUL             reduce using rule 14 (var1 -> ID COMMA var1 .)
    DIV             reduce using rule 14 (var1 -> ID COMMA var1 .)
    PLUS            reduce using rule 14 (var1 -> ID COMMA var1 .)
    MINUS           reduce using rule 14 (var1 -> ID COMMA var1 .)
    GT              reduce using rule 14 (var1 -> ID COMMA var1 .)
    LT              reduce using rule 14 (var1 -> ID COMMA var1 .)
    GTE             reduce using rule 14 (var1 -> ID COMMA var1 .)
    LTE             reduce using rule 14 (var1 -> ID COMMA var1 .)
    NE              reduce using rule 14 (var1 -> ID COMMA var1 .)
    AND             reduce using rule 14 (var1 -> ID COMMA var1 .)
    OR              reduce using rule 14 (var1 -> ID COMMA var1 .)
    RBRACKET        reduce using rule 14 (var1 -> ID COMMA var1 .)
    RPAREN          reduce using rule 14 (var1 -> ID COMMA var1 .)
    TO              reduce using rule 14 (var1 -> ID COMMA var1 .)
    COMMA           reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEI            reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEF            reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEC            reduce using rule 14 (var1 -> ID COMMA var1 .)
    LPAREN          reduce using rule 14 (var1 -> ID COMMA var1 .)
    ID              reduce using rule 14 (var1 -> ID COMMA var1 .)


state 55

    (15) var1 -> ID arr var1 .

    SEMICOLON       reduce using rule 15 (var1 -> ID arr var1 .)
    MUL             reduce using rule 15 (var1 -> ID arr var1 .)
    DIV             reduce using rule 15 (var1 -> ID arr var1 .)
    PLUS            reduce using rule 15 (var1 -> ID arr var1 .)
    MINUS           reduce using rule 15 (var1 -> ID arr var1 .)
    GT              reduce using rule 15 (var1 -> ID arr var1 .)
    LT              reduce using rule 15 (var1 -> ID arr var1 .)
    GTE             reduce using rule 15 (var1 -> ID arr var1 .)
    LTE             reduce using rule 15 (var1 -> ID arr var1 .)
    NE              reduce using rule 15 (var1 -> ID arr var1 .)
    AND             reduce using rule 15 (var1 -> ID arr var1 .)
    OR              reduce using rule 15 (var1 -> ID arr var1 .)
    RBRACKET        reduce using rule 15 (var1 -> ID arr var1 .)
    RPAREN          reduce using rule 15 (var1 -> ID arr var1 .)
    TO              reduce using rule 15 (var1 -> ID arr var1 .)
    COMMA           reduce using rule 15 (var1 -> ID arr var1 .)
    CTEI            reduce using rule 15 (var1 -> ID arr var1 .)
    CTEF            reduce using rule 15 (var1 -> ID arr var1 .)
    CTEC            reduce using rule 15 (var1 -> ID arr var1 .)
    LPAREN          reduce using rule 15 (var1 -> ID arr var1 .)
    ID              reduce using rule 15 (var1 -> ID arr var1 .)


state 56

    (16) var1 -> ID mat var1 .

    SEMICOLON       reduce using rule 16 (var1 -> ID mat var1 .)
    MUL             reduce using rule 16 (var1 -> ID mat var1 .)
    DIV             reduce using rule 16 (var1 -> ID mat var1 .)
    PLUS            reduce using rule 16 (var1 -> ID mat var1 .)
    MINUS           reduce using rule 16 (var1 -> ID mat var1 .)
    GT              reduce using rule 16 (var1 -> ID mat var1 .)
    LT              reduce using rule 16 (var1 -> ID mat var1 .)
    GTE             reduce using rule 16 (var1 -> ID mat var1 .)
    LTE             reduce using rule 16 (var1 -> ID mat var1 .)
    NE              reduce using rule 16 (var1 -> ID mat var1 .)
    AND             reduce using rule 16 (var1 -> ID mat var1 .)
    OR              reduce using rule 16 (var1 -> ID mat var1 .)
    RBRACKET        reduce using rule 16 (var1 -> ID mat var1 .)
    RPAREN          reduce using rule 16 (var1 -> ID mat var1 .)
    TO              reduce using rule 16 (var1 -> ID mat var1 .)
    COMMA           reduce using rule 16 (var1 -> ID mat var1 .)
    CTEI            reduce using rule 16 (var1 -> ID mat var1 .)
    CTEF            reduce using rule 16 (var1 -> ID mat var1 .)
    CTEC            reduce using rule 16 (var1 -> ID mat var1 .)
    LPAREN          reduce using rule 16 (var1 -> ID mat var1 .)
    ID              reduce using rule 16 (var1 -> ID mat var1 .)


state 57

    (24) arr -> LBRACKET CTEI . RBRACKET
    (26) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (85) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 75
    MUL             reduce using rule 85 (pexp -> CTEI .)
    DIV             reduce using rule 85 (pexp -> CTEI .)
    PLUS            reduce using rule 85 (pexp -> CTEI .)
    MINUS           reduce using rule 85 (pexp -> CTEI .)
    GT              reduce using rule 85 (pexp -> CTEI .)
    LT              reduce using rule 85 (pexp -> CTEI .)
    GTE             reduce using rule 85 (pexp -> CTEI .)
    LTE             reduce using rule 85 (pexp -> CTEI .)
    NE              reduce using rule 85 (pexp -> CTEI .)
    AND             reduce using rule 85 (pexp -> CTEI .)
    OR              reduce using rule 85 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 85 (pexp -> CTEI .) ]


state 58

    (25) arr -> LBRACKET exp . RBRACKET
    (27) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (28) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 76


state 59

    (67) exp -> nexp .
    (68) exp -> nexp . OR nexp

    RBRACKET        reduce using rule 67 (exp -> nexp .)
    RPAREN          reduce using rule 67 (exp -> nexp .)
    SEMICOLON       reduce using rule 67 (exp -> nexp .)
    TO              reduce using rule 67 (exp -> nexp .)
    COMMA           reduce using rule 67 (exp -> nexp .)
    OR              shift and go to state 77


state 60

    (69) nexp -> compexp .
    (70) nexp -> compexp . AND compexp

    OR              reduce using rule 69 (nexp -> compexp .)
    RBRACKET        reduce using rule 69 (nexp -> compexp .)
    RPAREN          reduce using rule 69 (nexp -> compexp .)
    SEMICOLON       reduce using rule 69 (nexp -> compexp .)
    TO              reduce using rule 69 (nexp -> compexp .)
    COMMA           reduce using rule 69 (nexp -> compexp .)
    AND             shift and go to state 78


state 61

    (71) compexp -> sumexp .
    (73) compexp1 -> sumexp . GT sumexp
    (74) compexp1 -> sumexp . LT sumexp
    (75) compexp1 -> sumexp . GTE sumexp
    (76) compexp1 -> sumexp . LTE sumexp
    (77) compexp1 -> sumexp . NE sumexp

    AND             reduce using rule 71 (compexp -> sumexp .)
    OR              reduce using rule 71 (compexp -> sumexp .)
    RBRACKET        reduce using rule 71 (compexp -> sumexp .)
    RPAREN          reduce using rule 71 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 71 (compexp -> sumexp .)
    TO              reduce using rule 71 (compexp -> sumexp .)
    COMMA           reduce using rule 71 (compexp -> sumexp .)
    GT              shift and go to state 79
    LT              shift and go to state 80
    GTE             shift and go to state 81
    LTE             shift and go to state 82
    NE              shift and go to state 83


state 62

    (72) compexp -> compexp1 . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

    sumexp                         shift and go to state 84
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 63

    (78) sumexp -> mulexp .
    (79) sumexp -> mulexp . PLUS mulexp
    (80) sumexp -> mulexp . MINUS mulexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 78 (sumexp -> mulexp .)
    LT              reduce using rule 78 (sumexp -> mulexp .)
    GTE             reduce using rule 78 (sumexp -> mulexp .)
    LTE             reduce using rule 78 (sumexp -> mulexp .)
    NE              reduce using rule 78 (sumexp -> mulexp .)
    AND             reduce using rule 78 (sumexp -> mulexp .)
    OR              reduce using rule 78 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 78 (sumexp -> mulexp .)
    RPAREN          reduce using rule 78 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 78 (sumexp -> mulexp .)
    TO              reduce using rule 78 (sumexp -> mulexp .)
    COMMA           reduce using rule 78 (sumexp -> mulexp .)
    CTEI            reduce using rule 78 (sumexp -> mulexp .)
    CTEF            reduce using rule 78 (sumexp -> mulexp .)
    CTEC            reduce using rule 78 (sumexp -> mulexp .)
    LPAREN          reduce using rule 78 (sumexp -> mulexp .)
    ID              reduce using rule 78 (sumexp -> mulexp .)
    MUL             reduce using rule 78 (sumexp -> mulexp .)
    DIV             reduce using rule 78 (sumexp -> mulexp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! PLUS            [ reduce using rule 78 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 78 (sumexp -> mulexp .) ]


state 64

    (81) mulexp -> pexp .
    (82) mulexp -> pexp . MUL pexp
    (83) mulexp -> pexp . DIV pexp

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 81 (mulexp -> pexp .)
    MINUS           reduce using rule 81 (mulexp -> pexp .)
    GT              reduce using rule 81 (mulexp -> pexp .)
    LT              reduce using rule 81 (mulexp -> pexp .)
    GTE             reduce using rule 81 (mulexp -> pexp .)
    LTE             reduce using rule 81 (mulexp -> pexp .)
    NE              reduce using rule 81 (mulexp -> pexp .)
    AND             reduce using rule 81 (mulexp -> pexp .)
    OR              reduce using rule 81 (mulexp -> pexp .)
    RBRACKET        reduce using rule 81 (mulexp -> pexp .)
    RPAREN          reduce using rule 81 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 81 (mulexp -> pexp .)
    TO              reduce using rule 81 (mulexp -> pexp .)
    COMMA           reduce using rule 81 (mulexp -> pexp .)
    CTEI            reduce using rule 81 (mulexp -> pexp .)
    CTEF            reduce using rule 81 (mulexp -> pexp .)
    CTEC            reduce using rule 81 (mulexp -> pexp .)
    LPAREN          reduce using rule 81 (mulexp -> pexp .)
    ID              reduce using rule 81 (mulexp -> pexp .)
    MUL             shift and go to state 88
    DIV             shift and go to state 89

  ! MUL             [ reduce using rule 81 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 81 (mulexp -> pexp .) ]


state 65

    (84) pexp -> var1 .

    MUL             reduce using rule 84 (pexp -> var1 .)
    DIV             reduce using rule 84 (pexp -> var1 .)
    PLUS            reduce using rule 84 (pexp -> var1 .)
    MINUS           reduce using rule 84 (pexp -> var1 .)
    GT              reduce using rule 84 (pexp -> var1 .)
    LT              reduce using rule 84 (pexp -> var1 .)
    GTE             reduce using rule 84 (pexp -> var1 .)
    LTE             reduce using rule 84 (pexp -> var1 .)
    NE              reduce using rule 84 (pexp -> var1 .)
    AND             reduce using rule 84 (pexp -> var1 .)
    OR              reduce using rule 84 (pexp -> var1 .)
    RBRACKET        reduce using rule 84 (pexp -> var1 .)
    RPAREN          reduce using rule 84 (pexp -> var1 .)
    SEMICOLON       reduce using rule 84 (pexp -> var1 .)
    TO              reduce using rule 84 (pexp -> var1 .)
    COMMA           reduce using rule 84 (pexp -> var1 .)
    CTEI            reduce using rule 84 (pexp -> var1 .)
    CTEF            reduce using rule 84 (pexp -> var1 .)
    CTEC            reduce using rule 84 (pexp -> var1 .)
    LPAREN          reduce using rule 84 (pexp -> var1 .)
    ID              reduce using rule 84 (pexp -> var1 .)


state 66

    (86) pexp -> CTEF .

    MUL             reduce using rule 86 (pexp -> CTEF .)
    DIV             reduce using rule 86 (pexp -> CTEF .)
    PLUS            reduce using rule 86 (pexp -> CTEF .)
    MINUS           reduce using rule 86 (pexp -> CTEF .)
    GT              reduce using rule 86 (pexp -> CTEF .)
    LT              reduce using rule 86 (pexp -> CTEF .)
    GTE             reduce using rule 86 (pexp -> CTEF .)
    LTE             reduce using rule 86 (pexp -> CTEF .)
    NE              reduce using rule 86 (pexp -> CTEF .)
    AND             reduce using rule 86 (pexp -> CTEF .)
    OR              reduce using rule 86 (pexp -> CTEF .)
    RBRACKET        reduce using rule 86 (pexp -> CTEF .)
    RPAREN          reduce using rule 86 (pexp -> CTEF .)
    SEMICOLON       reduce using rule 86 (pexp -> CTEF .)
    TO              reduce using rule 86 (pexp -> CTEF .)
    COMMA           reduce using rule 86 (pexp -> CTEF .)
    CTEI            reduce using rule 86 (pexp -> CTEF .)
    CTEF            reduce using rule 86 (pexp -> CTEF .)
    CTEC            reduce using rule 86 (pexp -> CTEF .)
    LPAREN          reduce using rule 86 (pexp -> CTEF .)
    ID              reduce using rule 86 (pexp -> CTEF .)


state 67

    (87) pexp -> CTEC .

    MUL             reduce using rule 87 (pexp -> CTEC .)
    DIV             reduce using rule 87 (pexp -> CTEC .)
    PLUS            reduce using rule 87 (pexp -> CTEC .)
    MINUS           reduce using rule 87 (pexp -> CTEC .)
    GT              reduce using rule 87 (pexp -> CTEC .)
    LT              reduce using rule 87 (pexp -> CTEC .)
    GTE             reduce using rule 87 (pexp -> CTEC .)
    LTE             reduce using rule 87 (pexp -> CTEC .)
    NE              reduce using rule 87 (pexp -> CTEC .)
    AND             reduce using rule 87 (pexp -> CTEC .)
    OR              reduce using rule 87 (pexp -> CTEC .)
    RBRACKET        reduce using rule 87 (pexp -> CTEC .)
    RPAREN          reduce using rule 87 (pexp -> CTEC .)
    SEMICOLON       reduce using rule 87 (pexp -> CTEC .)
    TO              reduce using rule 87 (pexp -> CTEC .)
    COMMA           reduce using rule 87 (pexp -> CTEC .)
    CTEI            reduce using rule 87 (pexp -> CTEC .)
    CTEF            reduce using rule 87 (pexp -> CTEC .)
    CTEC            reduce using rule 87 (pexp -> CTEC .)
    LPAREN          reduce using rule 87 (pexp -> CTEC .)
    ID              reduce using rule 87 (pexp -> CTEC .)


state 68

    (88) pexp -> llamada .

    MUL             reduce using rule 88 (pexp -> llamada .)
    DIV             reduce using rule 88 (pexp -> llamada .)
    PLUS            reduce using rule 88 (pexp -> llamada .)
    MINUS           reduce using rule 88 (pexp -> llamada .)
    GT              reduce using rule 88 (pexp -> llamada .)
    LT              reduce using rule 88 (pexp -> llamada .)
    GTE             reduce using rule 88 (pexp -> llamada .)
    LTE             reduce using rule 88 (pexp -> llamada .)
    NE              reduce using rule 88 (pexp -> llamada .)
    AND             reduce using rule 88 (pexp -> llamada .)
    OR              reduce using rule 88 (pexp -> llamada .)
    RBRACKET        reduce using rule 88 (pexp -> llamada .)
    RPAREN          reduce using rule 88 (pexp -> llamada .)
    SEMICOLON       reduce using rule 88 (pexp -> llamada .)
    TO              reduce using rule 88 (pexp -> llamada .)
    COMMA           reduce using rule 88 (pexp -> llamada .)
    CTEI            reduce using rule 88 (pexp -> llamada .)
    CTEF            reduce using rule 88 (pexp -> llamada .)
    CTEC            reduce using rule 88 (pexp -> llamada .)
    LPAREN          reduce using rule 88 (pexp -> llamada .)
    ID              reduce using rule 88 (pexp -> llamada .)


state 69

    (89) pexp -> LPAREN . exp RPAREN
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    exp                            shift and go to state 90
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 70

    (13) var1 -> ID .
    (14) var1 -> ID . COMMA var1
    (15) var1 -> ID . arr var1
    (16) var1 -> ID . mat var1
    (17) var1 -> ID . especial
    (53) llamada -> ID . LPAREN exp RPAREN
    (24) arr -> . LBRACKET CTEI RBRACKET
    (25) arr -> . LBRACKET exp RBRACKET
    (26) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (27) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (28) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (21) especial -> . TRANSPUESTA
    (22) especial -> . INVERSA
    (23) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 13 (var1 -> ID .)
    DIV             reduce using rule 13 (var1 -> ID .)
    PLUS            reduce using rule 13 (var1 -> ID .)
    MINUS           reduce using rule 13 (var1 -> ID .)
    GT              reduce using rule 13 (var1 -> ID .)
    LT              reduce using rule 13 (var1 -> ID .)
    GTE             reduce using rule 13 (var1 -> ID .)
    LTE             reduce using rule 13 (var1 -> ID .)
    NE              reduce using rule 13 (var1 -> ID .)
    AND             reduce using rule 13 (var1 -> ID .)
    OR              reduce using rule 13 (var1 -> ID .)
    RBRACKET        reduce using rule 13 (var1 -> ID .)
    RPAREN          reduce using rule 13 (var1 -> ID .)
    SEMICOLON       reduce using rule 13 (var1 -> ID .)
    TO              reduce using rule 13 (var1 -> ID .)
    CTEI            reduce using rule 13 (var1 -> ID .)
    CTEF            reduce using rule 13 (var1 -> ID .)
    CTEC            reduce using rule 13 (var1 -> ID .)
    ID              reduce using rule 13 (var1 -> ID .)
    COMMA           shift and go to state 40
    LPAREN          shift and go to state 91
    LBRACKET        shift and go to state 44
    TRANSPUESTA     shift and go to state 45
    INVERSA         shift and go to state 46
    DETERMINANTE    shift and go to state 47

  ! COMMA           [ reduce using rule 13 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 13 (var1 -> ID .) ]

    arr                            shift and go to state 41
    mat                            shift and go to state 42
    especial                       shift and go to state 43

state 71

    (6) main -> MAIN LPAREN param RPAREN LCURLY . vars statement RCURLY END
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (90) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)
    RCURLY          reduce using rule 90 (empty -> .)

    vars                           shift and go to state 92
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 72

    (51) param1 -> ID COMMA . param1
    (50) param1 -> . ID
    (51) param1 -> . ID COMMA param1
    (52) param1 -> . empty
    (90) empty -> .

    ID              shift and go to state 50
    RPAREN          reduce using rule 90 (empty -> .)

    param1                         shift and go to state 93
    empty                          shift and go to state 51

state 73

    (34) function1 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RCURLY

    RPAREN          shift and go to state 94


state 74

    (35) function2 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    RPAREN          shift and go to state 95


state 75

    (24) arr -> LBRACKET CTEI RBRACKET .
    (26) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (29) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    ID              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 24 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 96


state 76

    (25) arr -> LBRACKET exp RBRACKET .
    (27) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (28) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    ID              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 25 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 97


state 77

    (68) exp -> nexp OR . nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

    nexp                           shift and go to state 98
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 78

    (70) nexp -> compexp AND . compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

    compexp                        shift and go to state 99
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 79

    (73) compexp1 -> sumexp GT . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    sumexp                         shift and go to state 100
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 80

    (74) compexp1 -> sumexp LT . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    sumexp                         shift and go to state 101
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 81

    (75) compexp1 -> sumexp GTE . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    sumexp                         shift and go to state 102
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 82

    (76) compexp1 -> sumexp LTE . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    sumexp                         shift and go to state 103
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 83

    (77) compexp1 -> sumexp NE . sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    sumexp                         shift and go to state 104
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 84

    (72) compexp -> compexp1 sumexp .

    AND             reduce using rule 72 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 72 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 72 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 72 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 72 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 72 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 72 (compexp -> compexp1 sumexp .)


state 85

    (85) pexp -> CTEI .

    MUL             reduce using rule 85 (pexp -> CTEI .)
    DIV             reduce using rule 85 (pexp -> CTEI .)
    PLUS            reduce using rule 85 (pexp -> CTEI .)
    MINUS           reduce using rule 85 (pexp -> CTEI .)
    AND             reduce using rule 85 (pexp -> CTEI .)
    OR              reduce using rule 85 (pexp -> CTEI .)
    RBRACKET        reduce using rule 85 (pexp -> CTEI .)
    RPAREN          reduce using rule 85 (pexp -> CTEI .)
    SEMICOLON       reduce using rule 85 (pexp -> CTEI .)
    TO              reduce using rule 85 (pexp -> CTEI .)
    COMMA           reduce using rule 85 (pexp -> CTEI .)
    GT              reduce using rule 85 (pexp -> CTEI .)
    LT              reduce using rule 85 (pexp -> CTEI .)
    GTE             reduce using rule 85 (pexp -> CTEI .)
    LTE             reduce using rule 85 (pexp -> CTEI .)
    NE              reduce using rule 85 (pexp -> CTEI .)
    CTEI            reduce using rule 85 (pexp -> CTEI .)
    CTEF            reduce using rule 85 (pexp -> CTEI .)
    CTEC            reduce using rule 85 (pexp -> CTEI .)
    LPAREN          reduce using rule 85 (pexp -> CTEI .)
    ID              reduce using rule 85 (pexp -> CTEI .)


state 86

    (79) sumexp -> mulexp PLUS . mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    mulexp                         shift and go to state 105
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 87

    (80) sumexp -> mulexp MINUS . mulexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    mulexp                         shift and go to state 106
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 88

    (82) mulexp -> pexp MUL . pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    pexp                           shift and go to state 107
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 89

    (83) mulexp -> pexp DIV . pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)

  ! CTEI            [ reduce using rule 90 (empty -> .) ]
  ! CTEF            [ reduce using rule 90 (empty -> .) ]
  ! CTEC            [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! ID              [ reduce using rule 90 (empty -> .) ]

    pexp                           shift and go to state 108
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 90

    (89) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 109


state 91

    (53) llamada -> ID LPAREN . exp RPAREN
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    exp                            shift and go to state 110
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 92

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars . statement RCURLY END
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 112
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 93

    (51) param1 -> ID COMMA param1 .

    RPAREN          reduce using rule 51 (param1 -> ID COMMA param1 .)


state 94

    (34) function1 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 127


state 95

    (35) function2 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    SEMICOLON       shift and go to state 128


state 96

    (26) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (29) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 129
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)

    exp                            shift and go to state 130
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 97

    (27) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (28) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 132
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)

    exp                            shift and go to state 131
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 98

    (68) exp -> nexp OR nexp .

    RBRACKET        reduce using rule 68 (exp -> nexp OR nexp .)
    RPAREN          reduce using rule 68 (exp -> nexp OR nexp .)
    SEMICOLON       reduce using rule 68 (exp -> nexp OR nexp .)
    TO              reduce using rule 68 (exp -> nexp OR nexp .)
    COMMA           reduce using rule 68 (exp -> nexp OR nexp .)


state 99

    (70) nexp -> compexp AND compexp .

    OR              reduce using rule 70 (nexp -> compexp AND compexp .)
    RBRACKET        reduce using rule 70 (nexp -> compexp AND compexp .)
    RPAREN          reduce using rule 70 (nexp -> compexp AND compexp .)
    SEMICOLON       reduce using rule 70 (nexp -> compexp AND compexp .)
    TO              reduce using rule 70 (nexp -> compexp AND compexp .)
    COMMA           reduce using rule 70 (nexp -> compexp AND compexp .)


state 100

    (73) compexp1 -> sumexp GT sumexp .

    CTEI            reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    CTEF            reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    CTEC            reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    LPAREN          reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    ID              reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    PLUS            reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    MINUS           reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    MUL             reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    DIV             reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    AND             reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    OR              reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    RBRACKET        reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    RPAREN          reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    SEMICOLON       reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    TO              reduce using rule 73 (compexp1 -> sumexp GT sumexp .)
    COMMA           reduce using rule 73 (compexp1 -> sumexp GT sumexp .)


state 101

    (74) compexp1 -> sumexp LT sumexp .

    CTEI            reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    CTEF            reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    CTEC            reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    LPAREN          reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    ID              reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    PLUS            reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    MINUS           reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    MUL             reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    DIV             reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    AND             reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    OR              reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    RBRACKET        reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    RPAREN          reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    SEMICOLON       reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    TO              reduce using rule 74 (compexp1 -> sumexp LT sumexp .)
    COMMA           reduce using rule 74 (compexp1 -> sumexp LT sumexp .)


state 102

    (75) compexp1 -> sumexp GTE sumexp .

    CTEI            reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    CTEF            reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    CTEC            reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    LPAREN          reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    ID              reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    PLUS            reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    MINUS           reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    MUL             reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    DIV             reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    AND             reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    OR              reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    RBRACKET        reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    RPAREN          reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    SEMICOLON       reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    TO              reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)
    COMMA           reduce using rule 75 (compexp1 -> sumexp GTE sumexp .)


state 103

    (76) compexp1 -> sumexp LTE sumexp .

    CTEI            reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    CTEF            reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    CTEC            reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    LPAREN          reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    ID              reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    PLUS            reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    MINUS           reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    MUL             reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    DIV             reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    AND             reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    OR              reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    RBRACKET        reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    RPAREN          reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    SEMICOLON       reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    TO              reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)
    COMMA           reduce using rule 76 (compexp1 -> sumexp LTE sumexp .)


state 104

    (77) compexp1 -> sumexp NE sumexp .

    CTEI            reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    CTEF            reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    CTEC            reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    LPAREN          reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    ID              reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    PLUS            reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    MINUS           reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    MUL             reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    DIV             reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    AND             reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    OR              reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    RBRACKET        reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    RPAREN          reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    SEMICOLON       reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    TO              reduce using rule 77 (compexp1 -> sumexp NE sumexp .)
    COMMA           reduce using rule 77 (compexp1 -> sumexp NE sumexp .)


state 105

    (79) sumexp -> mulexp PLUS mulexp .

    GT              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    LT              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    GTE             reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    LTE             reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    NE              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    AND             reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    OR              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    RBRACKET        reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    RPAREN          reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    SEMICOLON       reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    TO              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    COMMA           reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    CTEI            reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    CTEF            reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    CTEC            reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    LPAREN          reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    ID              reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    PLUS            reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    MINUS           reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    MUL             reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)
    DIV             reduce using rule 79 (sumexp -> mulexp PLUS mulexp .)


state 106

    (80) sumexp -> mulexp MINUS mulexp .

    GT              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    LT              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    GTE             reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    LTE             reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    NE              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    AND             reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    OR              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    RBRACKET        reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    RPAREN          reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    SEMICOLON       reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    TO              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    COMMA           reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    CTEI            reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    CTEF            reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    CTEC            reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    LPAREN          reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    ID              reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    PLUS            reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    MINUS           reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    MUL             reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)
    DIV             reduce using rule 80 (sumexp -> mulexp MINUS mulexp .)


state 107

    (82) mulexp -> pexp MUL pexp .

    PLUS            reduce using rule 82 (mulexp -> pexp MUL pexp .)
    MINUS           reduce using rule 82 (mulexp -> pexp MUL pexp .)
    GT              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    LT              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    GTE             reduce using rule 82 (mulexp -> pexp MUL pexp .)
    LTE             reduce using rule 82 (mulexp -> pexp MUL pexp .)
    NE              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    AND             reduce using rule 82 (mulexp -> pexp MUL pexp .)
    OR              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    RBRACKET        reduce using rule 82 (mulexp -> pexp MUL pexp .)
    RPAREN          reduce using rule 82 (mulexp -> pexp MUL pexp .)
    SEMICOLON       reduce using rule 82 (mulexp -> pexp MUL pexp .)
    TO              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    COMMA           reduce using rule 82 (mulexp -> pexp MUL pexp .)
    CTEI            reduce using rule 82 (mulexp -> pexp MUL pexp .)
    CTEF            reduce using rule 82 (mulexp -> pexp MUL pexp .)
    CTEC            reduce using rule 82 (mulexp -> pexp MUL pexp .)
    LPAREN          reduce using rule 82 (mulexp -> pexp MUL pexp .)
    ID              reduce using rule 82 (mulexp -> pexp MUL pexp .)
    MUL             reduce using rule 82 (mulexp -> pexp MUL pexp .)
    DIV             reduce using rule 82 (mulexp -> pexp MUL pexp .)


state 108

    (83) mulexp -> pexp DIV pexp .

    PLUS            reduce using rule 83 (mulexp -> pexp DIV pexp .)
    MINUS           reduce using rule 83 (mulexp -> pexp DIV pexp .)
    GT              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    LT              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    GTE             reduce using rule 83 (mulexp -> pexp DIV pexp .)
    LTE             reduce using rule 83 (mulexp -> pexp DIV pexp .)
    NE              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    AND             reduce using rule 83 (mulexp -> pexp DIV pexp .)
    OR              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    RBRACKET        reduce using rule 83 (mulexp -> pexp DIV pexp .)
    RPAREN          reduce using rule 83 (mulexp -> pexp DIV pexp .)
    SEMICOLON       reduce using rule 83 (mulexp -> pexp DIV pexp .)
    TO              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    COMMA           reduce using rule 83 (mulexp -> pexp DIV pexp .)
    CTEI            reduce using rule 83 (mulexp -> pexp DIV pexp .)
    CTEF            reduce using rule 83 (mulexp -> pexp DIV pexp .)
    CTEC            reduce using rule 83 (mulexp -> pexp DIV pexp .)
    LPAREN          reduce using rule 83 (mulexp -> pexp DIV pexp .)
    ID              reduce using rule 83 (mulexp -> pexp DIV pexp .)
    MUL             reduce using rule 83 (mulexp -> pexp DIV pexp .)
    DIV             reduce using rule 83 (mulexp -> pexp DIV pexp .)


state 109

    (89) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 89 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 89 (pexp -> LPAREN exp RPAREN .)


state 110

    (53) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 133


state 111

    (60) while -> LPAREN . exp RPAREN LCURLY statement RCURLY
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    exp                            shift and go to state 134
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 112

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 135


state 113

    (36) statement -> statement1 . statement
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)
    RBRACKET        reduce using rule 90 (empty -> .)
    LBRACKET        reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement1                     shift and go to state 113
    statement                      shift and go to state 136
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 114

    (37) statement -> empty .

    RCURLY          reduce using rule 37 (statement -> empty .)
    RETURN          reduce using rule 37 (statement -> empty .)
    RBRACKET        reduce using rule 37 (statement -> empty .)
    LBRACKET        reduce using rule 37 (statement -> empty .)


state 115

    (38) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 137


state 116

    (39) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 138


state 117

    (40) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 139


state 118

    (41) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 140


state 119

    (42) statement1 -> for .

    ID              reduce using rule 42 (statement1 -> for .)
    READ            reduce using rule 42 (statement1 -> for .)
    PRINT           reduce using rule 42 (statement1 -> for .)
    FOR             reduce using rule 42 (statement1 -> for .)
    IF              reduce using rule 42 (statement1 -> for .)
    LPAREN          reduce using rule 42 (statement1 -> for .)
    RCURLY          reduce using rule 42 (statement1 -> for .)
    RETURN          reduce using rule 42 (statement1 -> for .)
    RBRACKET        reduce using rule 42 (statement1 -> for .)
    LBRACKET        reduce using rule 42 (statement1 -> for .)


state 120

    (43) statement1 -> if .

    ID              reduce using rule 43 (statement1 -> if .)
    READ            reduce using rule 43 (statement1 -> if .)
    PRINT           reduce using rule 43 (statement1 -> if .)
    FOR             reduce using rule 43 (statement1 -> if .)
    IF              reduce using rule 43 (statement1 -> if .)
    LPAREN          reduce using rule 43 (statement1 -> if .)
    RCURLY          reduce using rule 43 (statement1 -> if .)
    RETURN          reduce using rule 43 (statement1 -> if .)
    RBRACKET        reduce using rule 43 (statement1 -> if .)
    LBRACKET        reduce using rule 43 (statement1 -> if .)


state 121

    (44) statement1 -> while .

    ID              reduce using rule 44 (statement1 -> while .)
    READ            reduce using rule 44 (statement1 -> while .)
    PRINT           reduce using rule 44 (statement1 -> while .)
    FOR             reduce using rule 44 (statement1 -> while .)
    IF              reduce using rule 44 (statement1 -> while .)
    LPAREN          reduce using rule 44 (statement1 -> while .)
    RCURLY          reduce using rule 44 (statement1 -> while .)
    RETURN          reduce using rule 44 (statement1 -> while .)
    RBRACKET        reduce using rule 44 (statement1 -> while .)
    LBRACKET        reduce using rule 44 (statement1 -> while .)


state 122

    (45) asignacion -> ID . EQUALS exp
    (46) asignacion -> ID . arr EQUALS exp
    (47) asignacion -> ID . mat EQUALS exp
    (53) llamada -> ID . LPAREN exp RPAREN
    (24) arr -> . LBRACKET CTEI RBRACKET
    (25) arr -> . LBRACKET exp RBRACKET
    (26) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (27) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (28) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 141
    LPAREN          shift and go to state 91
    LBRACKET        shift and go to state 44

    arr                            shift and go to state 142
    mat                            shift and go to state 143

state 123

    (66) lectura -> READ . LPAREN var1 RPAREN

    LPAREN          shift and go to state 144


state 124

    (61) escritura -> PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 145


state 125

    (58) for -> FOR . LPAREN for1 RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 146


state 126

    (54) if -> IF . LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> IF . LPAREN exp RPAREN LBRACKET statement RBRACKET else

    LPAREN          shift and go to state 147


state 127

    (34) function1 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 148


state 128

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LCURLY          shift and go to state 149


state 129

    (26) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (85) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 150
    MUL             reduce using rule 85 (pexp -> CTEI .)
    DIV             reduce using rule 85 (pexp -> CTEI .)
    PLUS            reduce using rule 85 (pexp -> CTEI .)
    MINUS           reduce using rule 85 (pexp -> CTEI .)
    GT              reduce using rule 85 (pexp -> CTEI .)
    LT              reduce using rule 85 (pexp -> CTEI .)
    GTE             reduce using rule 85 (pexp -> CTEI .)
    LTE             reduce using rule 85 (pexp -> CTEI .)
    NE              reduce using rule 85 (pexp -> CTEI .)
    AND             reduce using rule 85 (pexp -> CTEI .)
    OR              reduce using rule 85 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 85 (pexp -> CTEI .) ]


state 130

    (29) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 151


state 131

    (27) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 152


state 132

    (28) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (85) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 153
    MUL             reduce using rule 85 (pexp -> CTEI .)
    DIV             reduce using rule 85 (pexp -> CTEI .)
    PLUS            reduce using rule 85 (pexp -> CTEI .)
    MINUS           reduce using rule 85 (pexp -> CTEI .)
    GT              reduce using rule 85 (pexp -> CTEI .)
    LT              reduce using rule 85 (pexp -> CTEI .)
    GTE             reduce using rule 85 (pexp -> CTEI .)
    LTE             reduce using rule 85 (pexp -> CTEI .)
    NE              reduce using rule 85 (pexp -> CTEI .)
    AND             reduce using rule 85 (pexp -> CTEI .)
    OR              reduce using rule 85 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 85 (pexp -> CTEI .) ]


state 133

    (53) llamada -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 53 (llamada -> ID LPAREN exp RPAREN .)


state 134

    (60) while -> LPAREN exp . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 154


state 135

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 155


state 136

    (36) statement -> statement1 statement .

    RCURLY          reduce using rule 36 (statement -> statement1 statement .)
    RETURN          reduce using rule 36 (statement -> statement1 statement .)
    RBRACKET        reduce using rule 36 (statement -> statement1 statement .)
    LBRACKET        reduce using rule 36 (statement -> statement1 statement .)


state 137

    (38) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    LPAREN          reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 38 (statement1 -> asignacion SEMICOLON .)
    LBRACKET        reduce using rule 38 (statement1 -> asignacion SEMICOLON .)


state 138

    (39) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    LPAREN          reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    RBRACKET        reduce using rule 39 (statement1 -> llamada SEMICOLON .)
    LBRACKET        reduce using rule 39 (statement1 -> llamada SEMICOLON .)


state 139

    (40) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    LPAREN          reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    RBRACKET        reduce using rule 40 (statement1 -> lectura SEMICOLON .)
    LBRACKET        reduce using rule 40 (statement1 -> lectura SEMICOLON .)


state 140

    (41) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    LPAREN          reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 41 (statement1 -> escritura SEMICOLON .)
    LBRACKET        reduce using rule 41 (statement1 -> escritura SEMICOLON .)


state 141

    (45) asignacion -> ID EQUALS . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)

    exp                            shift and go to state 156
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 142

    (46) asignacion -> ID arr . EQUALS exp

    EQUALS          shift and go to state 157


state 143

    (47) asignacion -> ID mat . EQUALS exp

    EQUALS          shift and go to state 158


state 144

    (66) lectura -> READ LPAREN . var1 RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (90) empty -> .

    ID              shift and go to state 30
    RPAREN          reduce using rule 90 (empty -> .)

    var1                           shift and go to state 159
    empty                          shift and go to state 31

state 145

    (61) escritura -> PRINT LPAREN . escritura1 RPAREN
    (62) escritura1 -> . escritura2 COMMA escritura2
    (63) escritura1 -> . escritura2
    (64) escritura2 -> . CTESTRING
    (65) escritura2 -> . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTESTRING       shift and go to state 162
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    COMMA           reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    escritura1                     shift and go to state 160
    escritura2                     shift and go to state 161
    exp                            shift and go to state 163
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 146

    (58) for -> FOR LPAREN . for1 RPAREN LCURLY statement RCURLY
    (59) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 165

    for1                           shift and go to state 164

state 147

    (54) if -> IF LPAREN . exp RPAREN LBRACKET statement RBRACKET
    (55) if -> IF LPAREN . exp RPAREN LBRACKET statement RBRACKET else
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    exp                            shift and go to state 166
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 148

    (34) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (90) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)
    RCURLY          reduce using rule 90 (empty -> .)

    vars                           shift and go to state 167
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 149

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RETURN exp SEMICOLON RCURLY
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (90) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 90 (empty -> .)
    READ            reduce using rule 90 (empty -> .)
    PRINT           reduce using rule 90 (empty -> .)
    FOR             reduce using rule 90 (empty -> .)
    IF              reduce using rule 90 (empty -> .)
    LPAREN          reduce using rule 90 (empty -> .)
    RETURN          reduce using rule 90 (empty -> .)

    vars                           shift and go to state 168
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 150

    (26) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    ID              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 26 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 151

    (29) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    ID              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 29 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 152

    (27) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    ID              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 27 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 153

    (28) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    ID              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 28 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 154

    (60) while -> LPAREN exp RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 169


state 155

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 6 (main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .)


state 156

    (45) asignacion -> ID EQUALS exp .

    SEMICOLON       reduce using rule 45 (asignacion -> ID EQUALS exp .)
    TO              reduce using rule 45 (asignacion -> ID EQUALS exp .)


state 157

    (46) asignacion -> ID arr EQUALS . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)

    exp                            shift and go to state 170
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 158

    (47) asignacion -> ID mat EQUALS . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)
    TO              reduce using rule 90 (empty -> .)

    exp                            shift and go to state 171
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 159

    (66) lectura -> READ LPAREN var1 . RPAREN

    RPAREN          shift and go to state 172


state 160

    (61) escritura -> PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 173


state 161

    (62) escritura1 -> escritura2 . COMMA escritura2
    (63) escritura1 -> escritura2 .

    COMMA           shift and go to state 174
    RPAREN          reduce using rule 63 (escritura1 -> escritura2 .)


state 162

    (64) escritura2 -> CTESTRING .

    COMMA           reduce using rule 64 (escritura2 -> CTESTRING .)
    RPAREN          reduce using rule 64 (escritura2 -> CTESTRING .)


state 163

    (65) escritura2 -> exp .

    COMMA           reduce using rule 65 (escritura2 -> exp .)
    RPAREN          reduce using rule 65 (escritura2 -> exp .)


state 164

    (58) for -> FOR LPAREN for1 . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 175


state 165

    (59) for1 -> FROM . asignacion TO exp
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp

    ID              shift and go to state 177

    asignacion                     shift and go to state 176

state 166

    (54) if -> IF LPAREN exp . RPAREN LBRACKET statement RBRACKET
    (55) if -> IF LPAREN exp . RPAREN LBRACKET statement RBRACKET else

    RPAREN          shift and go to state 178


state 167

    (34) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 179
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 168

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RETURN exp SEMICOLON RCURLY
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RETURN          reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 180
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 169

    (60) while -> LPAREN exp RPAREN LCURLY . statement RCURLY
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 181
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 170

    (46) asignacion -> ID arr EQUALS exp .

    SEMICOLON       reduce using rule 46 (asignacion -> ID arr EQUALS exp .)
    TO              reduce using rule 46 (asignacion -> ID arr EQUALS exp .)


state 171

    (47) asignacion -> ID mat EQUALS exp .

    SEMICOLON       reduce using rule 47 (asignacion -> ID mat EQUALS exp .)
    TO              reduce using rule 47 (asignacion -> ID mat EQUALS exp .)


state 172

    (66) lectura -> READ LPAREN var1 RPAREN .

    SEMICOLON       reduce using rule 66 (lectura -> READ LPAREN var1 RPAREN .)


state 173

    (61) escritura -> PRINT LPAREN escritura1 RPAREN .

    SEMICOLON       reduce using rule 61 (escritura -> PRINT LPAREN escritura1 RPAREN .)


state 174

    (62) escritura1 -> escritura2 COMMA . escritura2
    (64) escritura2 -> . CTESTRING
    (65) escritura2 -> . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTESTRING       shift and go to state 162
    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    escritura2                     shift and go to state 182
    exp                            shift and go to state 163
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 175

    (58) for -> FOR LPAREN for1 RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 183


state 176

    (59) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 184


state 177

    (45) asignacion -> ID . EQUALS exp
    (46) asignacion -> ID . arr EQUALS exp
    (47) asignacion -> ID . mat EQUALS exp
    (24) arr -> . LBRACKET CTEI RBRACKET
    (25) arr -> . LBRACKET exp RBRACKET
    (26) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (27) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (28) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (29) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 141
    LBRACKET        shift and go to state 44

    arr                            shift and go to state 142
    mat                            shift and go to state 143

state 178

    (54) if -> IF LPAREN exp RPAREN . LBRACKET statement RBRACKET
    (55) if -> IF LPAREN exp RPAREN . LBRACKET statement RBRACKET else

    LBRACKET        shift and go to state 185


state 179

    (34) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 186


state 180

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RETURN exp SEMICOLON RCURLY

    RETURN          shift and go to state 187


state 181

    (60) while -> LPAREN exp RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 188


state 182

    (62) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 62 (escritura1 -> escritura2 COMMA escritura2 .)


state 183

    (58) for -> FOR LPAREN for1 RPAREN LCURLY . statement RCURLY
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 189
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 184

    (59) for1 -> FROM asignacion TO . exp
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    RPAREN          reduce using rule 90 (empty -> .)

    exp                            shift and go to state 190
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 185

    (54) if -> IF LPAREN exp RPAREN LBRACKET . statement RBRACKET
    (55) if -> IF LPAREN exp RPAREN LBRACKET . statement RBRACKET else
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RBRACKET        reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 191
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 186

    (34) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 34 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 34 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 34 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 187

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN . exp SEMICOLON RCURLY
    (67) exp -> . nexp
    (68) exp -> . nexp OR nexp
    (69) nexp -> . compexp
    (70) nexp -> . compexp AND compexp
    (71) compexp -> . sumexp
    (72) compexp -> . compexp1 sumexp
    (78) sumexp -> . mulexp
    (79) sumexp -> . mulexp PLUS mulexp
    (80) sumexp -> . mulexp MINUS mulexp
    (73) compexp1 -> . sumexp GT sumexp
    (74) compexp1 -> . sumexp LT sumexp
    (75) compexp1 -> . sumexp GTE sumexp
    (76) compexp1 -> . sumexp LTE sumexp
    (77) compexp1 -> . sumexp NE sumexp
    (81) mulexp -> . pexp
    (82) mulexp -> . pexp MUL pexp
    (83) mulexp -> . pexp DIV pexp
    (84) pexp -> . var1
    (85) pexp -> . CTEI
    (86) pexp -> . CTEF
    (87) pexp -> . CTEC
    (88) pexp -> . llamada
    (89) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr var1
    (16) var1 -> . ID mat var1
    (17) var1 -> . ID especial
    (18) var1 -> . empty
    (53) llamada -> . ID LPAREN exp RPAREN
    (90) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 66
    CTEC            shift and go to state 67
    LPAREN          shift and go to state 69
    ID              shift and go to state 70
    MUL             reduce using rule 90 (empty -> .)
    DIV             reduce using rule 90 (empty -> .)
    PLUS            reduce using rule 90 (empty -> .)
    MINUS           reduce using rule 90 (empty -> .)
    GT              reduce using rule 90 (empty -> .)
    LT              reduce using rule 90 (empty -> .)
    GTE             reduce using rule 90 (empty -> .)
    LTE             reduce using rule 90 (empty -> .)
    NE              reduce using rule 90 (empty -> .)
    AND             reduce using rule 90 (empty -> .)
    OR              reduce using rule 90 (empty -> .)
    SEMICOLON       reduce using rule 90 (empty -> .)

    exp                            shift and go to state 192
    nexp                           shift and go to state 59
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 61
    compexp1                       shift and go to state 62
    mulexp                         shift and go to state 63
    pexp                           shift and go to state 64
    var1                           shift and go to state 65
    llamada                        shift and go to state 68
    empty                          shift and go to state 31

state 188

    (60) while -> LPAREN exp RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    LPAREN          reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RBRACKET        reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    LBRACKET        reduce using rule 60 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)


state 189

    (58) for -> FOR LPAREN for1 RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 193


state 190

    (59) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 59 (for1 -> FROM asignacion TO exp .)


state 191

    (54) if -> IF LPAREN exp RPAREN LBRACKET statement . RBRACKET
    (55) if -> IF LPAREN exp RPAREN LBRACKET statement . RBRACKET else

    RBRACKET        shift and go to state 194


state 192

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 195


state 193

    (58) for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    LPAREN          reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RBRACKET        reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    LBRACKET        reduce using rule 58 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)


state 194

    (54) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .
    (55) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET . else
    (56) else -> . ELSE LBRACKET statement LBRACKET
    (57) else -> . empty
    (90) empty -> .

  ! reduce/reduce conflict for ID resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for READ resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for PRINT resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RCURLY resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    ID              reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    READ            reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    PRINT           reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    FOR             reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    IF              reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    LPAREN          reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RCURLY          reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    LBRACKET        reduce using rule 54 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 197

  ! ID              [ reduce using rule 90 (empty -> .) ]
  ! READ            [ reduce using rule 90 (empty -> .) ]
  ! PRINT           [ reduce using rule 90 (empty -> .) ]
  ! FOR             [ reduce using rule 90 (empty -> .) ]
  ! IF              [ reduce using rule 90 (empty -> .) ]
  ! LPAREN          [ reduce using rule 90 (empty -> .) ]
  ! RCURLY          [ reduce using rule 90 (empty -> .) ]
  ! RETURN          [ reduce using rule 90 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 90 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 90 (empty -> .) ]

    else                           shift and go to state 196
    empty                          shift and go to state 198

state 195

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON . RCURLY

    RCURLY          shift and go to state 199


state 196

    (55) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .

    ID              reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    READ            reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    PRINT           reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    FOR             reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    IF              reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    LPAREN          reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RCURLY          reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RETURN          reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RBRACKET        reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    LBRACKET        reduce using rule 55 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)


state 197

    (56) else -> ELSE . LBRACKET statement LBRACKET

    LBRACKET        shift and go to state 200


state 198

    (57) else -> empty .

    ID              reduce using rule 57 (else -> empty .)
    READ            reduce using rule 57 (else -> empty .)
    PRINT           reduce using rule 57 (else -> empty .)
    FOR             reduce using rule 57 (else -> empty .)
    IF              reduce using rule 57 (else -> empty .)
    LPAREN          reduce using rule 57 (else -> empty .)
    RCURLY          reduce using rule 57 (else -> empty .)
    RETURN          reduce using rule 57 (else -> empty .)
    RBRACKET        reduce using rule 57 (else -> empty .)
    LBRACKET        reduce using rule 57 (else -> empty .)


state 199

    (35) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .

    FUN             reduce using rule 35 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 35 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    $end            reduce using rule 35 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)


state 200

    (56) else -> ELSE LBRACKET . statement LBRACKET
    (36) statement -> . statement1 statement
    (37) statement -> . empty
    (38) statement1 -> . asignacion SEMICOLON
    (39) statement1 -> . llamada SEMICOLON
    (40) statement1 -> . lectura SEMICOLON
    (41) statement1 -> . escritura SEMICOLON
    (42) statement1 -> . for
    (43) statement1 -> . if
    (44) statement1 -> . while
    (90) empty -> .
    (45) asignacion -> . ID EQUALS exp
    (46) asignacion -> . ID arr EQUALS exp
    (47) asignacion -> . ID mat EQUALS exp
    (53) llamada -> . ID LPAREN exp RPAREN
    (66) lectura -> . READ LPAREN var1 RPAREN
    (61) escritura -> . PRINT LPAREN escritura1 RPAREN
    (58) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (54) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (55) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (60) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    LBRACKET        reduce using rule 90 (empty -> .)
    ID              shift and go to state 122
    READ            shift and go to state 123
    PRINT           shift and go to state 124
    FOR             shift and go to state 125
    IF              shift and go to state 126
    LPAREN          shift and go to state 111

    statement                      shift and go to state 201
    statement1                     shift and go to state 113
    empty                          shift and go to state 114
    asignacion                     shift and go to state 115
    llamada                        shift and go to state 116
    lectura                        shift and go to state 117
    escritura                      shift and go to state 118
    for                            shift and go to state 119
    if                             shift and go to state 120
    while                          shift and go to state 121

state 201

    (56) else -> ELSE LBRACKET statement . LBRACKET

    LBRACKET        shift and go to state 202


state 202

    (56) else -> ELSE LBRACKET statement LBRACKET .

    ID              reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    READ            reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    PRINT           reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    FOR             reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    IF              reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    LPAREN          reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    RCURLY          reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    RETURN          reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    RBRACKET        reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)
    LBRACKET        reduce using rule 56 (else -> ELSE LBRACKET statement LBRACKET .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 11 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 11 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 11 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 30 resolved as shift
WARNING: shift/reduce conflict for ID in state 40 resolved as shift
WARNING: shift/reduce conflict for ID in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 42 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 57 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 63 resolved as shift
WARNING: shift/reduce conflict for MUL in state 64 resolved as shift
WARNING: shift/reduce conflict for DIV in state 64 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 70 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 70 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 80 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 81 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 82 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 86 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 88 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 129 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 132 resolved as shift
WARNING: reduce/reduce conflict in state 194 resolved using rule (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET)
WARNING: rejected rule (empty -> <empty>) in state 194
