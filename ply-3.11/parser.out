Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON programa1
Rule 2     programa1 -> vars modules programa2
Rule 3     programa1 -> vars modules
Rule 4     programa1 -> programa2
Rule 5     programa2 -> vars MAIN statement END
Rule 6     tipo -> INT
Rule 7     tipo -> FLOAT
Rule 8     tipo -> CHAR
Rule 9     vars -> var
Rule 10    var -> VAR tipo var1 SEMICOLON
Rule 11    var1 -> ID
Rule 12    var1 -> ID COMMA var1
Rule 13    var1 -> ID arr var1
Rule 14    var1 -> ID mat var1
Rule 15    var1 -> ID especial
Rule 16    var1 -> empty
Rule 17    especial -> TRANSPUESTA
Rule 18    especial -> INVERSA
Rule 19    especial -> DETERMINANTE
Rule 20    arr -> LBRACKET CTEI RBRACKET
Rule 21    arr -> LBRACKET exp RBRACKET
Rule 22    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 23    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 24    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 25    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 26    modules -> function
Rule 27    modules -> empty
Rule 28    function -> FUN VOID function1
Rule 29    function -> FUN tipo function2
Rule 30    function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY
Rule 31    function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY
Rule 32    tipo -> ID
Rule 33    tipo -> ID COMMA
Rule 34    tipo -> ID SEMICOLON
Rule 35    statement -> statement1 statement
Rule 36    statement -> empty
Rule 37    statement1 -> asignacion SEMICOLON
Rule 38    statement1 -> llamada SEMICOLON
Rule 39    statement1 -> lectura SEMICOLON
Rule 40    statement1 -> escritura SEMICOLON
Rule 41    statement1 -> for
Rule 42    statement1 -> if
Rule 43    statement1 -> while
Rule 44    asignacion -> ID EQUALS exp
Rule 45    asignacion -> ID arr EQUALS exp
Rule 46    asignacion -> ID mat EQUALS exp
Rule 47    param -> tipo param1 SEMICOLON
Rule 48    param1 -> ID
Rule 49    param1 -> ID COMMA param1
Rule 50    param1 -> empty
Rule 51    llamada -> ID LPAREN exp RPAREN
Rule 52    if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET
Rule 53    if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
Rule 54    else -> ELSE LBRACKET statement LBRACKET
Rule 55    else -> empty
Rule 56    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 57    for1 -> FROM asignacion TO exp
Rule 58    while -> LPAREN exp RPAREN LCURLY statement RCURLY
Rule 59    escritura -> PRINT LPAREN escritura1 RPAREN
Rule 60    escritura1 -> escritura2 COMMA escritura2
Rule 61    escritura1 -> escritura2
Rule 62    escritura2 -> CTESTRING
Rule 63    escritura2 -> exp
Rule 64    lectura -> READ LPAREN var1 RPAREN
Rule 65    exp -> nexp
Rule 66    exp -> OR
Rule 67    nexp -> compexp
Rule 68    nexp -> AND
Rule 69    compexp -> sumexp
Rule 70    compexp -> compexp1 sumexp
Rule 71    compexp1 -> GT
Rule 72    compexp1 -> LT
Rule 73    compexp1 -> GTE
Rule 74    compexp1 -> LTE
Rule 75    compexp1 -> NE
Rule 76    sumexp -> mulexp
Rule 77    sumexp -> PLUS
Rule 78    sumexp -> MINUS
Rule 79    mulexp -> pexp
Rule 80    mulexp -> MUL
Rule 81    mulexp -> DIV
Rule 82    pexp -> var1
Rule 83    pexp -> CTEI
Rule 84    pexp -> CTEF
Rule 85    pexp -> CTEC
Rule 86    pexp -> llamada
Rule 87    pexp -> LPAREN exp RPAREN
Rule 88    empty -> <empty>

Terminals, with rules where they appear

AND                  : 68
CHAR                 : 8
COMMA                : 12 33 49 60
CTEC                 : 85
CTEF                 : 84
CTEI                 : 20 22 22 24 25 83
CTESTRING            : 62
DETERMINANTE         : 19
DIV                  : 81
ELSE                 : 54
END                  : 5
EQUALS               : 44 45 46
FLOAT                : 7
FOR                  : 56
FROM                 : 57
FUN                  : 28 29
GT                   : 71
GTE                  : 73
ID                   : 1 11 12 13 14 15 30 31 32 33 34 44 45 46 48 49 51
IF                   : 52 53
INT                  : 6
INVERSA              : 18
LBRACKET             : 20 21 22 22 23 23 24 24 25 25 52 53 54 54
LCURLY               : 30 31 56 58
LPAREN               : 30 31 51 52 53 56 58 59 64 87
LT                   : 72
LTE                  : 74
MAIN                 : 5
MINUS                : 78
MUL                  : 80
NE                   : 75
OR                   : 66
PLUS                 : 77
PRINT                : 59
PROGRAM              : 1
RBRACKET             : 20 21 22 22 23 23 24 24 25 25 52 53
RCURLY               : 30 31 56 58
READ                 : 64
RETURN               : 31
RPAREN               : 30 31 51 52 53 56 58 59 64 87
SEMICOLON            : 1 10 30 31 34 37 38 39 40 47
TO                   : 57
TRANSPUESTA          : 17
VAR                  : 10
VOID                 : 28
error                : 

Nonterminals, with rules where they appear

arr                  : 13 45
asignacion           : 37 57
compexp              : 67
compexp1             : 70
else                 : 53
empty                : 16 27 36 50 55
escritura            : 40
escritura1           : 59
escritura2           : 60 60 61
especial             : 15
exp                  : 21 23 23 24 25 31 44 45 46 51 52 53 57 58 63 87
for                  : 41
for1                 : 56
function             : 26
function1            : 28
function2            : 29
if                   : 42
lectura              : 39
llamada              : 38 86
mat                  : 14 46
modules              : 2 3
mulexp               : 76
nexp                 : 65
param                : 30 31
param1               : 47 49
pexp                 : 79
programa             : 0
programa1            : 1
programa2            : 2 4
statement            : 5 30 31 35 52 53 54 56 58
statement1           : 35
sumexp               : 69 70
tipo                 : 10 29 47
var                  : 9
var1                 : 10 12 13 14 64 82
vars                 : 2 3 5
while                : 43

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . programa1
    (2) programa1 -> . vars modules programa2
    (3) programa1 -> . vars modules
    (4) programa1 -> . programa2
    (9) vars -> . var
    (5) programa2 -> . vars MAIN statement END
    (10) var -> . VAR tipo var1 SEMICOLON

    VAR             shift and go to state 9

    programa1                      shift and go to state 5
    vars                           shift and go to state 6
    programa2                      shift and go to state 7
    var                            shift and go to state 8

state 5

    (1) programa -> PROGRAM ID SEMICOLON programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON programa1 .)


state 6

    (2) programa1 -> vars . modules programa2
    (3) programa1 -> vars . modules
    (5) programa2 -> vars . MAIN statement END
    (26) modules -> . function
    (27) modules -> . empty
    (28) function -> . FUN VOID function1
    (29) function -> . FUN tipo function2
    (88) empty -> .

    MAIN            shift and go to state 11
    FUN             shift and go to state 14
    VAR             reduce using rule 88 (empty -> .)
    $end            reduce using rule 88 (empty -> .)

    modules                        shift and go to state 10
    function                       shift and go to state 12
    empty                          shift and go to state 13

state 7

    (4) programa1 -> programa2 .

    $end            reduce using rule 4 (programa1 -> programa2 .)


state 8

    (9) vars -> var .

    MAIN            reduce using rule 9 (vars -> var .)
    FUN             reduce using rule 9 (vars -> var .)
    VAR             reduce using rule 9 (vars -> var .)
    $end            reduce using rule 9 (vars -> var .)


state 9

    (10) var -> VAR . tipo var1 SEMICOLON
    (6) tipo -> . INT
    (7) tipo -> . FLOAT
    (8) tipo -> . CHAR
    (32) tipo -> . ID
    (33) tipo -> . ID COMMA
    (34) tipo -> . ID SEMICOLON

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18
    ID              shift and go to state 19

    tipo                           shift and go to state 15

state 10

    (2) programa1 -> vars modules . programa2
    (3) programa1 -> vars modules .
    (5) programa2 -> . vars MAIN statement END
    (9) vars -> . var
    (10) var -> . VAR tipo var1 SEMICOLON

    $end            reduce using rule 3 (programa1 -> vars modules .)
    VAR             shift and go to state 9

    vars                           shift and go to state 20
    programa2                      shift and go to state 21
    var                            shift and go to state 8

state 11

    (5) programa2 -> vars MAIN . statement END
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    END             reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 22
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 12

    (26) modules -> function .

    VAR             reduce using rule 26 (modules -> function .)
    $end            reduce using rule 26 (modules -> function .)


state 13

    (27) modules -> empty .

    VAR             reduce using rule 27 (modules -> empty .)
    $end            reduce using rule 27 (modules -> empty .)


state 14

    (28) function -> FUN . VOID function1
    (29) function -> FUN . tipo function2
    (6) tipo -> . INT
    (7) tipo -> . FLOAT
    (8) tipo -> . CHAR
    (32) tipo -> . ID
    (33) tipo -> . ID COMMA
    (34) tipo -> . ID SEMICOLON

    VOID            shift and go to state 38
    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18
    ID              shift and go to state 19

    tipo                           shift and go to state 39

state 15

    (10) var -> VAR tipo . var1 SEMICOLON
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (88) empty -> .

    ID              shift and go to state 41
    SEMICOLON       reduce using rule 88 (empty -> .)

    var1                           shift and go to state 40
    empty                          shift and go to state 42

state 16

    (6) tipo -> INT .

    ID              reduce using rule 6 (tipo -> INT .)
    SEMICOLON       reduce using rule 6 (tipo -> INT .)


state 17

    (7) tipo -> FLOAT .

    ID              reduce using rule 7 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 7 (tipo -> FLOAT .)


state 18

    (8) tipo -> CHAR .

    ID              reduce using rule 8 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 8 (tipo -> CHAR .)


state 19

    (32) tipo -> ID .
    (33) tipo -> ID . COMMA
    (34) tipo -> ID . SEMICOLON

  ! shift/reduce conflict for SEMICOLON resolved as shift
    ID              reduce using rule 32 (tipo -> ID .)
    COMMA           shift and go to state 43
    SEMICOLON       shift and go to state 44

  ! SEMICOLON       [ reduce using rule 32 (tipo -> ID .) ]


state 20

    (5) programa2 -> vars . MAIN statement END

    MAIN            shift and go to state 11


state 21

    (2) programa1 -> vars modules programa2 .

    $end            reduce using rule 2 (programa1 -> vars modules programa2 .)


state 22

    (5) programa2 -> vars MAIN statement . END

    END             shift and go to state 45


state 23

    (35) statement -> statement1 . statement
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    END             reduce using rule 88 (empty -> .)
    RCURLY          reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    RETURN          reduce using rule 88 (empty -> .)
    LBRACKET        reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement1                     shift and go to state 23
    statement                      shift and go to state 46
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 24

    (36) statement -> empty .

    END             reduce using rule 36 (statement -> empty .)
    RCURLY          reduce using rule 36 (statement -> empty .)
    RBRACKET        reduce using rule 36 (statement -> empty .)
    RETURN          reduce using rule 36 (statement -> empty .)
    LBRACKET        reduce using rule 36 (statement -> empty .)


state 25

    (37) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 47


state 26

    (38) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 48


state 27

    (39) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 49


state 28

    (40) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 50


state 29

    (41) statement1 -> for .

    ID              reduce using rule 41 (statement1 -> for .)
    READ            reduce using rule 41 (statement1 -> for .)
    PRINT           reduce using rule 41 (statement1 -> for .)
    FOR             reduce using rule 41 (statement1 -> for .)
    IF              reduce using rule 41 (statement1 -> for .)
    LPAREN          reduce using rule 41 (statement1 -> for .)
    END             reduce using rule 41 (statement1 -> for .)
    RCURLY          reduce using rule 41 (statement1 -> for .)
    RBRACKET        reduce using rule 41 (statement1 -> for .)
    RETURN          reduce using rule 41 (statement1 -> for .)
    LBRACKET        reduce using rule 41 (statement1 -> for .)


state 30

    (42) statement1 -> if .

    ID              reduce using rule 42 (statement1 -> if .)
    READ            reduce using rule 42 (statement1 -> if .)
    PRINT           reduce using rule 42 (statement1 -> if .)
    FOR             reduce using rule 42 (statement1 -> if .)
    IF              reduce using rule 42 (statement1 -> if .)
    LPAREN          reduce using rule 42 (statement1 -> if .)
    END             reduce using rule 42 (statement1 -> if .)
    RCURLY          reduce using rule 42 (statement1 -> if .)
    RBRACKET        reduce using rule 42 (statement1 -> if .)
    RETURN          reduce using rule 42 (statement1 -> if .)
    LBRACKET        reduce using rule 42 (statement1 -> if .)


state 31

    (43) statement1 -> while .

    ID              reduce using rule 43 (statement1 -> while .)
    READ            reduce using rule 43 (statement1 -> while .)
    PRINT           reduce using rule 43 (statement1 -> while .)
    FOR             reduce using rule 43 (statement1 -> while .)
    IF              reduce using rule 43 (statement1 -> while .)
    LPAREN          reduce using rule 43 (statement1 -> while .)
    END             reduce using rule 43 (statement1 -> while .)
    RCURLY          reduce using rule 43 (statement1 -> while .)
    RBRACKET        reduce using rule 43 (statement1 -> while .)
    RETURN          reduce using rule 43 (statement1 -> while .)
    LBRACKET        reduce using rule 43 (statement1 -> while .)


state 32

    (44) asignacion -> ID . EQUALS exp
    (45) asignacion -> ID . arr EQUALS exp
    (46) asignacion -> ID . mat EQUALS exp
    (51) llamada -> ID . LPAREN exp RPAREN
    (20) arr -> . LBRACKET CTEI RBRACKET
    (21) arr -> . LBRACKET exp RBRACKET
    (22) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (23) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (24) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 51
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 52
    mat                            shift and go to state 53

state 33

    (58) while -> LPAREN . exp RPAREN LCURLY statement RCURLY
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 57
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 34

    (64) lectura -> READ . LPAREN var1 RPAREN

    LPAREN          shift and go to state 81


state 35

    (59) escritura -> PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 82


state 36

    (56) for -> FOR . LPAREN for1 RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 83


state 37

    (52) if -> IF . LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> IF . LPAREN exp RPAREN LBRACKET statement RBRACKET else

    LPAREN          shift and go to state 84


state 38

    (28) function -> FUN VOID . function1
    (30) function1 -> . ID LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY

    ID              shift and go to state 86

    function1                      shift and go to state 85

state 39

    (29) function -> FUN tipo . function2
    (31) function2 -> . ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY

    ID              shift and go to state 88

    function2                      shift and go to state 87

state 40

    (10) var -> VAR tipo var1 . SEMICOLON

    SEMICOLON       shift and go to state 89


state 41

    (11) var1 -> ID .
    (12) var1 -> ID . COMMA var1
    (13) var1 -> ID . arr var1
    (14) var1 -> ID . mat var1
    (15) var1 -> ID . especial
    (20) arr -> . LBRACKET CTEI RBRACKET
    (21) arr -> . LBRACKET exp RBRACKET
    (22) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (23) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (24) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (17) especial -> . TRANSPUESTA
    (18) especial -> . INVERSA
    (19) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 11 (var1 -> ID .)
    RPAREN          reduce using rule 11 (var1 -> ID .)
    TO              reduce using rule 11 (var1 -> ID .)
    RBRACKET        reduce using rule 11 (var1 -> ID .)
    RCURLY          reduce using rule 11 (var1 -> ID .)
    COMMA           shift and go to state 90
    LBRACKET        shift and go to state 55
    TRANSPUESTA     shift and go to state 94
    INVERSA         shift and go to state 95
    DETERMINANTE    shift and go to state 96

  ! COMMA           [ reduce using rule 11 (var1 -> ID .) ]

    arr                            shift and go to state 91
    mat                            shift and go to state 92
    especial                       shift and go to state 93

state 42

    (16) var1 -> empty .

    SEMICOLON       reduce using rule 16 (var1 -> empty .)
    RPAREN          reduce using rule 16 (var1 -> empty .)
    TO              reduce using rule 16 (var1 -> empty .)
    RBRACKET        reduce using rule 16 (var1 -> empty .)
    COMMA           reduce using rule 16 (var1 -> empty .)
    RCURLY          reduce using rule 16 (var1 -> empty .)


state 43

    (33) tipo -> ID COMMA .

    ID              reduce using rule 33 (tipo -> ID COMMA .)
    SEMICOLON       reduce using rule 33 (tipo -> ID COMMA .)


state 44

    (34) tipo -> ID SEMICOLON .

    ID              reduce using rule 34 (tipo -> ID SEMICOLON .)
    SEMICOLON       reduce using rule 34 (tipo -> ID SEMICOLON .)


state 45

    (5) programa2 -> vars MAIN statement END .

    $end            reduce using rule 5 (programa2 -> vars MAIN statement END .)


state 46

    (35) statement -> statement1 statement .

    END             reduce using rule 35 (statement -> statement1 statement .)
    RCURLY          reduce using rule 35 (statement -> statement1 statement .)
    RBRACKET        reduce using rule 35 (statement -> statement1 statement .)
    RETURN          reduce using rule 35 (statement -> statement1 statement .)
    LBRACKET        reduce using rule 35 (statement -> statement1 statement .)


state 47

    (37) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    LPAREN          reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    END             reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    RBRACKET        reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 37 (statement1 -> asignacion SEMICOLON .)
    LBRACKET        reduce using rule 37 (statement1 -> asignacion SEMICOLON .)


state 48

    (38) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    LPAREN          reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    END             reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    RBRACKET        reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 38 (statement1 -> llamada SEMICOLON .)
    LBRACKET        reduce using rule 38 (statement1 -> llamada SEMICOLON .)


state 49

    (39) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    LPAREN          reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    END             reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    RBRACKET        reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 39 (statement1 -> lectura SEMICOLON .)
    LBRACKET        reduce using rule 39 (statement1 -> lectura SEMICOLON .)


state 50

    (40) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    LPAREN          reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    END             reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    RBRACKET        reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 40 (statement1 -> escritura SEMICOLON .)
    LBRACKET        reduce using rule 40 (statement1 -> escritura SEMICOLON .)


state 51

    (44) asignacion -> ID EQUALS . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    SEMICOLON       reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)

    exp                            shift and go to state 97
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 52

    (45) asignacion -> ID arr . EQUALS exp

    EQUALS          shift and go to state 98


state 53

    (46) asignacion -> ID mat . EQUALS exp

    EQUALS          shift and go to state 99


state 54

    (51) llamada -> ID LPAREN . exp RPAREN
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 100
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 55

    (20) arr -> LBRACKET . CTEI RBRACKET
    (21) arr -> LBRACKET . exp RBRACKET
    (22) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (23) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (24) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    CTEI            shift and go to state 101
    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RBRACKET        reduce using rule 88 (empty -> .)

    exp                            shift and go to state 102
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 56

    (87) pexp -> LPAREN . exp RPAREN
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 103
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 57

    (58) while -> LPAREN exp . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 104


state 58

    (65) exp -> nexp .

    RPAREN          reduce using rule 65 (exp -> nexp .)
    SEMICOLON       reduce using rule 65 (exp -> nexp .)
    TO              reduce using rule 65 (exp -> nexp .)
    RBRACKET        reduce using rule 65 (exp -> nexp .)
    COMMA           reduce using rule 65 (exp -> nexp .)
    RCURLY          reduce using rule 65 (exp -> nexp .)


state 59

    (66) exp -> OR .

    RPAREN          reduce using rule 66 (exp -> OR .)
    SEMICOLON       reduce using rule 66 (exp -> OR .)
    TO              reduce using rule 66 (exp -> OR .)
    RBRACKET        reduce using rule 66 (exp -> OR .)
    COMMA           reduce using rule 66 (exp -> OR .)
    RCURLY          reduce using rule 66 (exp -> OR .)


state 60

    (67) nexp -> compexp .

    RPAREN          reduce using rule 67 (nexp -> compexp .)
    SEMICOLON       reduce using rule 67 (nexp -> compexp .)
    TO              reduce using rule 67 (nexp -> compexp .)
    RBRACKET        reduce using rule 67 (nexp -> compexp .)
    COMMA           reduce using rule 67 (nexp -> compexp .)
    RCURLY          reduce using rule 67 (nexp -> compexp .)


state 61

    (68) nexp -> AND .

    RPAREN          reduce using rule 68 (nexp -> AND .)
    SEMICOLON       reduce using rule 68 (nexp -> AND .)
    TO              reduce using rule 68 (nexp -> AND .)
    RBRACKET        reduce using rule 68 (nexp -> AND .)
    COMMA           reduce using rule 68 (nexp -> AND .)
    RCURLY          reduce using rule 68 (nexp -> AND .)


state 62

    (69) compexp -> sumexp .

    RPAREN          reduce using rule 69 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 69 (compexp -> sumexp .)
    TO              reduce using rule 69 (compexp -> sumexp .)
    RBRACKET        reduce using rule 69 (compexp -> sumexp .)
    COMMA           reduce using rule 69 (compexp -> sumexp .)
    RCURLY          reduce using rule 69 (compexp -> sumexp .)


state 63

    (70) compexp -> compexp1 . sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)
    SEMICOLON       reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RCURLY          reduce using rule 88 (empty -> .)

    sumexp                         shift and go to state 105
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 64

    (76) sumexp -> mulexp .

    RPAREN          reduce using rule 76 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 76 (sumexp -> mulexp .)
    TO              reduce using rule 76 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 76 (sumexp -> mulexp .)
    COMMA           reduce using rule 76 (sumexp -> mulexp .)
    RCURLY          reduce using rule 76 (sumexp -> mulexp .)


state 65

    (77) sumexp -> PLUS .

    RPAREN          reduce using rule 77 (sumexp -> PLUS .)
    SEMICOLON       reduce using rule 77 (sumexp -> PLUS .)
    TO              reduce using rule 77 (sumexp -> PLUS .)
    RBRACKET        reduce using rule 77 (sumexp -> PLUS .)
    COMMA           reduce using rule 77 (sumexp -> PLUS .)
    RCURLY          reduce using rule 77 (sumexp -> PLUS .)


state 66

    (78) sumexp -> MINUS .

    RPAREN          reduce using rule 78 (sumexp -> MINUS .)
    SEMICOLON       reduce using rule 78 (sumexp -> MINUS .)
    TO              reduce using rule 78 (sumexp -> MINUS .)
    RBRACKET        reduce using rule 78 (sumexp -> MINUS .)
    COMMA           reduce using rule 78 (sumexp -> MINUS .)
    RCURLY          reduce using rule 78 (sumexp -> MINUS .)


state 67

    (71) compexp1 -> GT .

    PLUS            reduce using rule 71 (compexp1 -> GT .)
    MINUS           reduce using rule 71 (compexp1 -> GT .)
    MUL             reduce using rule 71 (compexp1 -> GT .)
    DIV             reduce using rule 71 (compexp1 -> GT .)
    CTEI            reduce using rule 71 (compexp1 -> GT .)
    CTEF            reduce using rule 71 (compexp1 -> GT .)
    CTEC            reduce using rule 71 (compexp1 -> GT .)
    LPAREN          reduce using rule 71 (compexp1 -> GT .)
    ID              reduce using rule 71 (compexp1 -> GT .)
    RPAREN          reduce using rule 71 (compexp1 -> GT .)
    SEMICOLON       reduce using rule 71 (compexp1 -> GT .)
    TO              reduce using rule 71 (compexp1 -> GT .)
    RBRACKET        reduce using rule 71 (compexp1 -> GT .)
    COMMA           reduce using rule 71 (compexp1 -> GT .)
    RCURLY          reduce using rule 71 (compexp1 -> GT .)


state 68

    (72) compexp1 -> LT .

    PLUS            reduce using rule 72 (compexp1 -> LT .)
    MINUS           reduce using rule 72 (compexp1 -> LT .)
    MUL             reduce using rule 72 (compexp1 -> LT .)
    DIV             reduce using rule 72 (compexp1 -> LT .)
    CTEI            reduce using rule 72 (compexp1 -> LT .)
    CTEF            reduce using rule 72 (compexp1 -> LT .)
    CTEC            reduce using rule 72 (compexp1 -> LT .)
    LPAREN          reduce using rule 72 (compexp1 -> LT .)
    ID              reduce using rule 72 (compexp1 -> LT .)
    RPAREN          reduce using rule 72 (compexp1 -> LT .)
    SEMICOLON       reduce using rule 72 (compexp1 -> LT .)
    TO              reduce using rule 72 (compexp1 -> LT .)
    RBRACKET        reduce using rule 72 (compexp1 -> LT .)
    COMMA           reduce using rule 72 (compexp1 -> LT .)
    RCURLY          reduce using rule 72 (compexp1 -> LT .)


state 69

    (73) compexp1 -> GTE .

    PLUS            reduce using rule 73 (compexp1 -> GTE .)
    MINUS           reduce using rule 73 (compexp1 -> GTE .)
    MUL             reduce using rule 73 (compexp1 -> GTE .)
    DIV             reduce using rule 73 (compexp1 -> GTE .)
    CTEI            reduce using rule 73 (compexp1 -> GTE .)
    CTEF            reduce using rule 73 (compexp1 -> GTE .)
    CTEC            reduce using rule 73 (compexp1 -> GTE .)
    LPAREN          reduce using rule 73 (compexp1 -> GTE .)
    ID              reduce using rule 73 (compexp1 -> GTE .)
    RPAREN          reduce using rule 73 (compexp1 -> GTE .)
    SEMICOLON       reduce using rule 73 (compexp1 -> GTE .)
    TO              reduce using rule 73 (compexp1 -> GTE .)
    RBRACKET        reduce using rule 73 (compexp1 -> GTE .)
    COMMA           reduce using rule 73 (compexp1 -> GTE .)
    RCURLY          reduce using rule 73 (compexp1 -> GTE .)


state 70

    (74) compexp1 -> LTE .

    PLUS            reduce using rule 74 (compexp1 -> LTE .)
    MINUS           reduce using rule 74 (compexp1 -> LTE .)
    MUL             reduce using rule 74 (compexp1 -> LTE .)
    DIV             reduce using rule 74 (compexp1 -> LTE .)
    CTEI            reduce using rule 74 (compexp1 -> LTE .)
    CTEF            reduce using rule 74 (compexp1 -> LTE .)
    CTEC            reduce using rule 74 (compexp1 -> LTE .)
    LPAREN          reduce using rule 74 (compexp1 -> LTE .)
    ID              reduce using rule 74 (compexp1 -> LTE .)
    RPAREN          reduce using rule 74 (compexp1 -> LTE .)
    SEMICOLON       reduce using rule 74 (compexp1 -> LTE .)
    TO              reduce using rule 74 (compexp1 -> LTE .)
    RBRACKET        reduce using rule 74 (compexp1 -> LTE .)
    COMMA           reduce using rule 74 (compexp1 -> LTE .)
    RCURLY          reduce using rule 74 (compexp1 -> LTE .)


state 71

    (75) compexp1 -> NE .

    PLUS            reduce using rule 75 (compexp1 -> NE .)
    MINUS           reduce using rule 75 (compexp1 -> NE .)
    MUL             reduce using rule 75 (compexp1 -> NE .)
    DIV             reduce using rule 75 (compexp1 -> NE .)
    CTEI            reduce using rule 75 (compexp1 -> NE .)
    CTEF            reduce using rule 75 (compexp1 -> NE .)
    CTEC            reduce using rule 75 (compexp1 -> NE .)
    LPAREN          reduce using rule 75 (compexp1 -> NE .)
    ID              reduce using rule 75 (compexp1 -> NE .)
    RPAREN          reduce using rule 75 (compexp1 -> NE .)
    SEMICOLON       reduce using rule 75 (compexp1 -> NE .)
    TO              reduce using rule 75 (compexp1 -> NE .)
    RBRACKET        reduce using rule 75 (compexp1 -> NE .)
    COMMA           reduce using rule 75 (compexp1 -> NE .)
    RCURLY          reduce using rule 75 (compexp1 -> NE .)


state 72

    (79) mulexp -> pexp .

    RPAREN          reduce using rule 79 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 79 (mulexp -> pexp .)
    TO              reduce using rule 79 (mulexp -> pexp .)
    RBRACKET        reduce using rule 79 (mulexp -> pexp .)
    COMMA           reduce using rule 79 (mulexp -> pexp .)
    RCURLY          reduce using rule 79 (mulexp -> pexp .)


state 73

    (80) mulexp -> MUL .

    RPAREN          reduce using rule 80 (mulexp -> MUL .)
    SEMICOLON       reduce using rule 80 (mulexp -> MUL .)
    TO              reduce using rule 80 (mulexp -> MUL .)
    RBRACKET        reduce using rule 80 (mulexp -> MUL .)
    COMMA           reduce using rule 80 (mulexp -> MUL .)
    RCURLY          reduce using rule 80 (mulexp -> MUL .)


state 74

    (81) mulexp -> DIV .

    RPAREN          reduce using rule 81 (mulexp -> DIV .)
    SEMICOLON       reduce using rule 81 (mulexp -> DIV .)
    TO              reduce using rule 81 (mulexp -> DIV .)
    RBRACKET        reduce using rule 81 (mulexp -> DIV .)
    COMMA           reduce using rule 81 (mulexp -> DIV .)
    RCURLY          reduce using rule 81 (mulexp -> DIV .)


state 75

    (82) pexp -> var1 .

    RPAREN          reduce using rule 82 (pexp -> var1 .)
    SEMICOLON       reduce using rule 82 (pexp -> var1 .)
    TO              reduce using rule 82 (pexp -> var1 .)
    RBRACKET        reduce using rule 82 (pexp -> var1 .)
    COMMA           reduce using rule 82 (pexp -> var1 .)
    RCURLY          reduce using rule 82 (pexp -> var1 .)


state 76

    (83) pexp -> CTEI .

    RPAREN          reduce using rule 83 (pexp -> CTEI .)
    SEMICOLON       reduce using rule 83 (pexp -> CTEI .)
    TO              reduce using rule 83 (pexp -> CTEI .)
    RBRACKET        reduce using rule 83 (pexp -> CTEI .)
    COMMA           reduce using rule 83 (pexp -> CTEI .)
    RCURLY          reduce using rule 83 (pexp -> CTEI .)


state 77

    (84) pexp -> CTEF .

    RPAREN          reduce using rule 84 (pexp -> CTEF .)
    SEMICOLON       reduce using rule 84 (pexp -> CTEF .)
    TO              reduce using rule 84 (pexp -> CTEF .)
    RBRACKET        reduce using rule 84 (pexp -> CTEF .)
    COMMA           reduce using rule 84 (pexp -> CTEF .)
    RCURLY          reduce using rule 84 (pexp -> CTEF .)


state 78

    (85) pexp -> CTEC .

    RPAREN          reduce using rule 85 (pexp -> CTEC .)
    SEMICOLON       reduce using rule 85 (pexp -> CTEC .)
    TO              reduce using rule 85 (pexp -> CTEC .)
    RBRACKET        reduce using rule 85 (pexp -> CTEC .)
    COMMA           reduce using rule 85 (pexp -> CTEC .)
    RCURLY          reduce using rule 85 (pexp -> CTEC .)


state 79

    (86) pexp -> llamada .

    RPAREN          reduce using rule 86 (pexp -> llamada .)
    SEMICOLON       reduce using rule 86 (pexp -> llamada .)
    TO              reduce using rule 86 (pexp -> llamada .)
    RBRACKET        reduce using rule 86 (pexp -> llamada .)
    COMMA           reduce using rule 86 (pexp -> llamada .)
    RCURLY          reduce using rule 86 (pexp -> llamada .)


state 80

    (11) var1 -> ID .
    (12) var1 -> ID . COMMA var1
    (13) var1 -> ID . arr var1
    (14) var1 -> ID . mat var1
    (15) var1 -> ID . especial
    (51) llamada -> ID . LPAREN exp RPAREN
    (20) arr -> . LBRACKET CTEI RBRACKET
    (21) arr -> . LBRACKET exp RBRACKET
    (22) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (23) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (24) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (17) especial -> . TRANSPUESTA
    (18) especial -> . INVERSA
    (19) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    RPAREN          reduce using rule 11 (var1 -> ID .)
    SEMICOLON       reduce using rule 11 (var1 -> ID .)
    TO              reduce using rule 11 (var1 -> ID .)
    RBRACKET        reduce using rule 11 (var1 -> ID .)
    RCURLY          reduce using rule 11 (var1 -> ID .)
    COMMA           shift and go to state 90
    LPAREN          shift and go to state 54
    LBRACKET        shift and go to state 55
    TRANSPUESTA     shift and go to state 94
    INVERSA         shift and go to state 95
    DETERMINANTE    shift and go to state 96

  ! COMMA           [ reduce using rule 11 (var1 -> ID .) ]

    arr                            shift and go to state 91
    mat                            shift and go to state 92
    especial                       shift and go to state 93

state 81

    (64) lectura -> READ LPAREN . var1 RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (88) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 88 (empty -> .)

    var1                           shift and go to state 106
    empty                          shift and go to state 42

state 82

    (59) escritura -> PRINT LPAREN . escritura1 RPAREN
    (60) escritura1 -> . escritura2 COMMA escritura2
    (61) escritura1 -> . escritura2
    (62) escritura2 -> . CTESTRING
    (63) escritura2 -> . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    CTESTRING       shift and go to state 109
    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    COMMA           reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)

    escritura1                     shift and go to state 107
    escritura2                     shift and go to state 108
    exp                            shift and go to state 110
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 83

    (56) for -> FOR LPAREN . for1 RPAREN LCURLY statement RCURLY
    (57) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 112

    for1                           shift and go to state 111

state 84

    (52) if -> IF LPAREN . exp RPAREN LBRACKET statement RBRACKET
    (53) if -> IF LPAREN . exp RPAREN LBRACKET statement RBRACKET else
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 113
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 85

    (28) function -> FUN VOID function1 .

    VAR             reduce using rule 28 (function -> FUN VOID function1 .)
    $end            reduce using rule 28 (function -> FUN VOID function1 .)


state 86

    (30) function1 -> ID . LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY

    LPAREN          shift and go to state 114


state 87

    (29) function -> FUN tipo function2 .

    VAR             reduce using rule 29 (function -> FUN tipo function2 .)
    $end            reduce using rule 29 (function -> FUN tipo function2 .)


state 88

    (31) function2 -> ID . LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY

    LPAREN          shift and go to state 115


state 89

    (10) var -> VAR tipo var1 SEMICOLON .

    MAIN            reduce using rule 10 (var -> VAR tipo var1 SEMICOLON .)
    FUN             reduce using rule 10 (var -> VAR tipo var1 SEMICOLON .)
    VAR             reduce using rule 10 (var -> VAR tipo var1 SEMICOLON .)
    $end            reduce using rule 10 (var -> VAR tipo var1 SEMICOLON .)


state 90

    (12) var1 -> ID COMMA . var1
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (88) empty -> .

    ID              shift and go to state 41
    SEMICOLON       reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RCURLY          reduce using rule 88 (empty -> .)

    var1                           shift and go to state 116
    empty                          shift and go to state 42

state 91

    (13) var1 -> ID arr . var1
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (88) empty -> .

    ID              shift and go to state 41
    SEMICOLON       reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RCURLY          reduce using rule 88 (empty -> .)

    var1                           shift and go to state 117
    empty                          shift and go to state 42

state 92

    (14) var1 -> ID mat . var1
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (88) empty -> .

    ID              shift and go to state 41
    SEMICOLON       reduce using rule 88 (empty -> .)
    RPAREN          reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)
    RBRACKET        reduce using rule 88 (empty -> .)
    COMMA           reduce using rule 88 (empty -> .)
    RCURLY          reduce using rule 88 (empty -> .)

    var1                           shift and go to state 118
    empty                          shift and go to state 42

state 93

    (15) var1 -> ID especial .

    SEMICOLON       reduce using rule 15 (var1 -> ID especial .)
    RPAREN          reduce using rule 15 (var1 -> ID especial .)
    TO              reduce using rule 15 (var1 -> ID especial .)
    RBRACKET        reduce using rule 15 (var1 -> ID especial .)
    COMMA           reduce using rule 15 (var1 -> ID especial .)
    RCURLY          reduce using rule 15 (var1 -> ID especial .)


state 94

    (17) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 17 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 17 (especial -> TRANSPUESTA .)
    TO              reduce using rule 17 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 17 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 17 (especial -> TRANSPUESTA .)
    RCURLY          reduce using rule 17 (especial -> TRANSPUESTA .)


state 95

    (18) especial -> INVERSA .

    SEMICOLON       reduce using rule 18 (especial -> INVERSA .)
    RPAREN          reduce using rule 18 (especial -> INVERSA .)
    TO              reduce using rule 18 (especial -> INVERSA .)
    RBRACKET        reduce using rule 18 (especial -> INVERSA .)
    COMMA           reduce using rule 18 (especial -> INVERSA .)
    RCURLY          reduce using rule 18 (especial -> INVERSA .)


state 96

    (19) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 19 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 19 (especial -> DETERMINANTE .)
    TO              reduce using rule 19 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 19 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 19 (especial -> DETERMINANTE .)
    RCURLY          reduce using rule 19 (especial -> DETERMINANTE .)


state 97

    (44) asignacion -> ID EQUALS exp .

    SEMICOLON       reduce using rule 44 (asignacion -> ID EQUALS exp .)
    TO              reduce using rule 44 (asignacion -> ID EQUALS exp .)


state 98

    (45) asignacion -> ID arr EQUALS . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    SEMICOLON       reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)

    exp                            shift and go to state 119
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 99

    (46) asignacion -> ID mat EQUALS . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    SEMICOLON       reduce using rule 88 (empty -> .)
    TO              reduce using rule 88 (empty -> .)

    exp                            shift and go to state 120
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 100

    (51) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 121


state 101

    (20) arr -> LBRACKET CTEI . RBRACKET
    (22) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (83) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 122

  ! RBRACKET        [ reduce using rule 83 (pexp -> CTEI .) ]


state 102

    (21) arr -> LBRACKET exp . RBRACKET
    (23) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (24) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 123


state 103

    (87) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 124


state 104

    (58) while -> LPAREN exp RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 125


state 105

    (70) compexp -> compexp1 sumexp .

    RPAREN          reduce using rule 70 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 70 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 70 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 70 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 70 (compexp -> compexp1 sumexp .)
    RCURLY          reduce using rule 70 (compexp -> compexp1 sumexp .)


state 106

    (64) lectura -> READ LPAREN var1 . RPAREN

    RPAREN          shift and go to state 126


state 107

    (59) escritura -> PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 127


state 108

    (60) escritura1 -> escritura2 . COMMA escritura2
    (61) escritura1 -> escritura2 .

    COMMA           shift and go to state 128
    RPAREN          reduce using rule 61 (escritura1 -> escritura2 .)


state 109

    (62) escritura2 -> CTESTRING .

    COMMA           reduce using rule 62 (escritura2 -> CTESTRING .)
    RPAREN          reduce using rule 62 (escritura2 -> CTESTRING .)


state 110

    (63) escritura2 -> exp .

    COMMA           reduce using rule 63 (escritura2 -> exp .)
    RPAREN          reduce using rule 63 (escritura2 -> exp .)


state 111

    (56) for -> FOR LPAREN for1 . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 129


state 112

    (57) for1 -> FROM . asignacion TO exp
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp

    ID              shift and go to state 131

    asignacion                     shift and go to state 130

state 113

    (52) if -> IF LPAREN exp . RPAREN LBRACKET statement RBRACKET
    (53) if -> IF LPAREN exp . RPAREN LBRACKET statement RBRACKET else

    RPAREN          shift and go to state 132


state 114

    (30) function1 -> ID LPAREN . param RPAREN SEMICOLON LCURLY statement RCURLY
    (47) param -> . tipo param1 SEMICOLON
    (6) tipo -> . INT
    (7) tipo -> . FLOAT
    (8) tipo -> . CHAR
    (32) tipo -> . ID
    (33) tipo -> . ID COMMA
    (34) tipo -> . ID SEMICOLON

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18
    ID              shift and go to state 19

    param                          shift and go to state 133
    tipo                           shift and go to state 134

state 115

    (31) function2 -> ID LPAREN . param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY
    (47) param -> . tipo param1 SEMICOLON
    (6) tipo -> . INT
    (7) tipo -> . FLOAT
    (8) tipo -> . CHAR
    (32) tipo -> . ID
    (33) tipo -> . ID COMMA
    (34) tipo -> . ID SEMICOLON

    INT             shift and go to state 16
    FLOAT           shift and go to state 17
    CHAR            shift and go to state 18
    ID              shift and go to state 19

    param                          shift and go to state 135
    tipo                           shift and go to state 134

state 116

    (12) var1 -> ID COMMA var1 .

    SEMICOLON       reduce using rule 12 (var1 -> ID COMMA var1 .)
    RPAREN          reduce using rule 12 (var1 -> ID COMMA var1 .)
    TO              reduce using rule 12 (var1 -> ID COMMA var1 .)
    RBRACKET        reduce using rule 12 (var1 -> ID COMMA var1 .)
    COMMA           reduce using rule 12 (var1 -> ID COMMA var1 .)
    RCURLY          reduce using rule 12 (var1 -> ID COMMA var1 .)


state 117

    (13) var1 -> ID arr var1 .

    SEMICOLON       reduce using rule 13 (var1 -> ID arr var1 .)
    RPAREN          reduce using rule 13 (var1 -> ID arr var1 .)
    TO              reduce using rule 13 (var1 -> ID arr var1 .)
    RBRACKET        reduce using rule 13 (var1 -> ID arr var1 .)
    COMMA           reduce using rule 13 (var1 -> ID arr var1 .)
    RCURLY          reduce using rule 13 (var1 -> ID arr var1 .)


state 118

    (14) var1 -> ID mat var1 .

    SEMICOLON       reduce using rule 14 (var1 -> ID mat var1 .)
    RPAREN          reduce using rule 14 (var1 -> ID mat var1 .)
    TO              reduce using rule 14 (var1 -> ID mat var1 .)
    RBRACKET        reduce using rule 14 (var1 -> ID mat var1 .)
    COMMA           reduce using rule 14 (var1 -> ID mat var1 .)
    RCURLY          reduce using rule 14 (var1 -> ID mat var1 .)


state 119

    (45) asignacion -> ID arr EQUALS exp .

    SEMICOLON       reduce using rule 45 (asignacion -> ID arr EQUALS exp .)
    TO              reduce using rule 45 (asignacion -> ID arr EQUALS exp .)


state 120

    (46) asignacion -> ID mat EQUALS exp .

    SEMICOLON       reduce using rule 46 (asignacion -> ID mat EQUALS exp .)
    TO              reduce using rule 46 (asignacion -> ID mat EQUALS exp .)


state 121

    (51) llamada -> ID LPAREN exp RPAREN .

    SEMICOLON       reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)
    RCURLY          reduce using rule 51 (llamada -> ID LPAREN exp RPAREN .)


state 122

    (20) arr -> LBRACKET CTEI RBRACKET .
    (22) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (25) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    EQUALS          reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    RCURLY          reduce using rule 20 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 136


state 123

    (21) arr -> LBRACKET exp RBRACKET .
    (23) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (24) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    EQUALS          reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    RCURLY          reduce using rule 21 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 137


state 124

    (87) pexp -> LPAREN exp RPAREN .

    RPAREN          reduce using rule 87 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 87 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 87 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 87 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 87 (pexp -> LPAREN exp RPAREN .)
    RCURLY          reduce using rule 87 (pexp -> LPAREN exp RPAREN .)


state 125

    (58) while -> LPAREN exp RPAREN LCURLY . statement RCURLY
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 138
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 126

    (64) lectura -> READ LPAREN var1 RPAREN .

    SEMICOLON       reduce using rule 64 (lectura -> READ LPAREN var1 RPAREN .)


state 127

    (59) escritura -> PRINT LPAREN escritura1 RPAREN .

    SEMICOLON       reduce using rule 59 (escritura -> PRINT LPAREN escritura1 RPAREN .)


state 128

    (60) escritura1 -> escritura2 COMMA . escritura2
    (62) escritura2 -> . CTESTRING
    (63) escritura2 -> . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    CTESTRING       shift and go to state 109
    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    escritura2                     shift and go to state 139
    exp                            shift and go to state 110
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 129

    (56) for -> FOR LPAREN for1 RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 140


state 130

    (57) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 141


state 131

    (44) asignacion -> ID . EQUALS exp
    (45) asignacion -> ID . arr EQUALS exp
    (46) asignacion -> ID . mat EQUALS exp
    (20) arr -> . LBRACKET CTEI RBRACKET
    (21) arr -> . LBRACKET exp RBRACKET
    (22) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (23) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (24) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (25) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 51
    LBRACKET        shift and go to state 55

    arr                            shift and go to state 52
    mat                            shift and go to state 53

state 132

    (52) if -> IF LPAREN exp RPAREN . LBRACKET statement RBRACKET
    (53) if -> IF LPAREN exp RPAREN . LBRACKET statement RBRACKET else

    LBRACKET        shift and go to state 142


state 133

    (30) function1 -> ID LPAREN param . RPAREN SEMICOLON LCURLY statement RCURLY

    RPAREN          shift and go to state 143


state 134

    (47) param -> tipo . param1 SEMICOLON
    (48) param1 -> . ID
    (49) param1 -> . ID COMMA param1
    (50) param1 -> . empty
    (88) empty -> .

    ID              shift and go to state 145
    SEMICOLON       reduce using rule 88 (empty -> .)

    param1                         shift and go to state 144
    empty                          shift and go to state 146

state 135

    (31) function2 -> ID LPAREN param . RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY

    RPAREN          shift and go to state 147


state 136

    (22) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (25) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    CTEI            shift and go to state 148
    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RBRACKET        reduce using rule 88 (empty -> .)

    exp                            shift and go to state 149
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 137

    (23) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (24) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    CTEI            shift and go to state 151
    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RBRACKET        reduce using rule 88 (empty -> .)

    exp                            shift and go to state 150
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 138

    (58) while -> LPAREN exp RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 152


state 139

    (60) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 60 (escritura1 -> escritura2 COMMA escritura2 .)


state 140

    (56) for -> FOR LPAREN for1 RPAREN LCURLY . statement RCURLY
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 153
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 141

    (57) for1 -> FROM asignacion TO . exp
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RPAREN          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 154
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 142

    (52) if -> IF LPAREN exp RPAREN LBRACKET . statement RBRACKET
    (53) if -> IF LPAREN exp RPAREN LBRACKET . statement RBRACKET else
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RBRACKET        reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 155
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 143

    (30) function1 -> ID LPAREN param RPAREN . SEMICOLON LCURLY statement RCURLY

    SEMICOLON       shift and go to state 156


state 144

    (47) param -> tipo param1 . SEMICOLON

    SEMICOLON       shift and go to state 157


state 145

    (48) param1 -> ID .
    (49) param1 -> ID . COMMA param1

    SEMICOLON       reduce using rule 48 (param1 -> ID .)
    COMMA           shift and go to state 158


state 146

    (50) param1 -> empty .

    SEMICOLON       reduce using rule 50 (param1 -> empty .)


state 147

    (31) function2 -> ID LPAREN param RPAREN . SEMICOLON LCURLY statement RETURN exp RCURLY

    SEMICOLON       shift and go to state 159


state 148

    (22) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (83) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 160

  ! RBRACKET        [ reduce using rule 83 (pexp -> CTEI .) ]


state 149

    (25) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 161


state 150

    (23) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 162


state 151

    (24) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (83) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 163

  ! RBRACKET        [ reduce using rule 83 (pexp -> CTEI .) ]


state 152

    (58) while -> LPAREN exp RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    LPAREN          reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    END             reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RBRACKET        reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)
    LBRACKET        reduce using rule 58 (while -> LPAREN exp RPAREN LCURLY statement RCURLY .)


state 153

    (56) for -> FOR LPAREN for1 RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 164


state 154

    (57) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 57 (for1 -> FROM asignacion TO exp .)


state 155

    (52) if -> IF LPAREN exp RPAREN LBRACKET statement . RBRACKET
    (53) if -> IF LPAREN exp RPAREN LBRACKET statement . RBRACKET else

    RBRACKET        shift and go to state 165


state 156

    (30) function1 -> ID LPAREN param RPAREN SEMICOLON . LCURLY statement RCURLY

    LCURLY          shift and go to state 166


state 157

    (47) param -> tipo param1 SEMICOLON .

    RPAREN          reduce using rule 47 (param -> tipo param1 SEMICOLON .)


state 158

    (49) param1 -> ID COMMA . param1
    (48) param1 -> . ID
    (49) param1 -> . ID COMMA param1
    (50) param1 -> . empty
    (88) empty -> .

    ID              shift and go to state 145
    SEMICOLON       reduce using rule 88 (empty -> .)

    param1                         shift and go to state 167
    empty                          shift and go to state 146

state 159

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON . LCURLY statement RETURN exp RCURLY

    LCURLY          shift and go to state 168


state 160

    (22) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    EQUALS          reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RCURLY          reduce using rule 22 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 161

    (25) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    EQUALS          reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RCURLY          reduce using rule 25 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 162

    (23) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    EQUALS          reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RCURLY          reduce using rule 23 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 163

    (24) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    EQUALS          reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RCURLY          reduce using rule 24 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 164

    (56) for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    LPAREN          reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    END             reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RBRACKET        reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    LBRACKET        reduce using rule 56 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)


state 165

    (52) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .
    (53) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET . else
    (54) else -> . ELSE LBRACKET statement LBRACKET
    (55) else -> . empty
    (88) empty -> .

  ! reduce/reduce conflict for ID resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for READ resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for PRINT resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for FOR resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for IF resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for LPAREN resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for END resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RCURLY resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RBRACKET resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for RETURN resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
  ! reduce/reduce conflict for LBRACKET resolved using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    ID              reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    READ            reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    PRINT           reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    FOR             reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    IF              reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    LPAREN          reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    END             reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RCURLY          reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RBRACKET        reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    RETURN          reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    LBRACKET        reduce using rule 52 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET .)
    ELSE            shift and go to state 170

  ! ID              [ reduce using rule 88 (empty -> .) ]
  ! READ            [ reduce using rule 88 (empty -> .) ]
  ! PRINT           [ reduce using rule 88 (empty -> .) ]
  ! FOR             [ reduce using rule 88 (empty -> .) ]
  ! IF              [ reduce using rule 88 (empty -> .) ]
  ! LPAREN          [ reduce using rule 88 (empty -> .) ]
  ! END             [ reduce using rule 88 (empty -> .) ]
  ! RCURLY          [ reduce using rule 88 (empty -> .) ]
  ! RBRACKET        [ reduce using rule 88 (empty -> .) ]
  ! RETURN          [ reduce using rule 88 (empty -> .) ]
  ! LBRACKET        [ reduce using rule 88 (empty -> .) ]

    else                           shift and go to state 169
    empty                          shift and go to state 171

state 166

    (30) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY . statement RCURLY
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 172
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 167

    (49) param1 -> ID COMMA param1 .

    SEMICOLON       reduce using rule 49 (param1 -> ID COMMA param1 .)


state 168

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY . statement RETURN exp RCURLY
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    RETURN          reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 173
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 169

    (53) if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .

    ID              reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    READ            reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    PRINT           reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    FOR             reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    IF              reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    LPAREN          reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    END             reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RCURLY          reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RBRACKET        reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    RETURN          reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)
    LBRACKET        reduce using rule 53 (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET else .)


state 170

    (54) else -> ELSE . LBRACKET statement LBRACKET

    LBRACKET        shift and go to state 174


state 171

    (55) else -> empty .

    ID              reduce using rule 55 (else -> empty .)
    READ            reduce using rule 55 (else -> empty .)
    PRINT           reduce using rule 55 (else -> empty .)
    FOR             reduce using rule 55 (else -> empty .)
    IF              reduce using rule 55 (else -> empty .)
    LPAREN          reduce using rule 55 (else -> empty .)
    END             reduce using rule 55 (else -> empty .)
    RCURLY          reduce using rule 55 (else -> empty .)
    RBRACKET        reduce using rule 55 (else -> empty .)
    RETURN          reduce using rule 55 (else -> empty .)
    LBRACKET        reduce using rule 55 (else -> empty .)


state 172

    (30) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement . RCURLY

    RCURLY          shift and go to state 175


state 173

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement . RETURN exp RCURLY

    RETURN          shift and go to state 176


state 174

    (54) else -> ELSE LBRACKET . statement LBRACKET
    (35) statement -> . statement1 statement
    (36) statement -> . empty
    (37) statement1 -> . asignacion SEMICOLON
    (38) statement1 -> . llamada SEMICOLON
    (39) statement1 -> . lectura SEMICOLON
    (40) statement1 -> . escritura SEMICOLON
    (41) statement1 -> . for
    (42) statement1 -> . if
    (43) statement1 -> . while
    (88) empty -> .
    (44) asignacion -> . ID EQUALS exp
    (45) asignacion -> . ID arr EQUALS exp
    (46) asignacion -> . ID mat EQUALS exp
    (51) llamada -> . ID LPAREN exp RPAREN
    (64) lectura -> . READ LPAREN var1 RPAREN
    (59) escritura -> . PRINT LPAREN escritura1 RPAREN
    (56) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (52) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET
    (53) if -> . IF LPAREN exp RPAREN LBRACKET statement RBRACKET else
    (58) while -> . LPAREN exp RPAREN LCURLY statement RCURLY

    LBRACKET        reduce using rule 88 (empty -> .)
    ID              shift and go to state 32
    READ            shift and go to state 34
    PRINT           shift and go to state 35
    FOR             shift and go to state 36
    IF              shift and go to state 37
    LPAREN          shift and go to state 33

    statement                      shift and go to state 177
    statement1                     shift and go to state 23
    empty                          shift and go to state 24
    asignacion                     shift and go to state 25
    llamada                        shift and go to state 26
    lectura                        shift and go to state 27
    escritura                      shift and go to state 28
    for                            shift and go to state 29
    if                             shift and go to state 30
    while                          shift and go to state 31

state 175

    (30) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY .

    VAR             reduce using rule 30 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY .)
    $end            reduce using rule 30 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RCURLY .)


state 176

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN . exp RCURLY
    (65) exp -> . nexp
    (66) exp -> . OR
    (67) nexp -> . compexp
    (68) nexp -> . AND
    (69) compexp -> . sumexp
    (70) compexp -> . compexp1 sumexp
    (76) sumexp -> . mulexp
    (77) sumexp -> . PLUS
    (78) sumexp -> . MINUS
    (71) compexp1 -> . GT
    (72) compexp1 -> . LT
    (73) compexp1 -> . GTE
    (74) compexp1 -> . LTE
    (75) compexp1 -> . NE
    (79) mulexp -> . pexp
    (80) mulexp -> . MUL
    (81) mulexp -> . DIV
    (82) pexp -> . var1
    (83) pexp -> . CTEI
    (84) pexp -> . CTEF
    (85) pexp -> . CTEC
    (86) pexp -> . llamada
    (87) pexp -> . LPAREN exp RPAREN
    (11) var1 -> . ID
    (12) var1 -> . ID COMMA var1
    (13) var1 -> . ID arr var1
    (14) var1 -> . ID mat var1
    (15) var1 -> . ID especial
    (16) var1 -> . empty
    (51) llamada -> . ID LPAREN exp RPAREN
    (88) empty -> .

    OR              shift and go to state 59
    AND             shift and go to state 61
    PLUS            shift and go to state 65
    MINUS           shift and go to state 66
    GT              shift and go to state 67
    LT              shift and go to state 68
    GTE             shift and go to state 69
    LTE             shift and go to state 70
    NE              shift and go to state 71
    MUL             shift and go to state 73
    DIV             shift and go to state 74
    CTEI            shift and go to state 76
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    LPAREN          shift and go to state 56
    ID              shift and go to state 80
    RCURLY          reduce using rule 88 (empty -> .)

    exp                            shift and go to state 178
    nexp                           shift and go to state 58
    compexp                        shift and go to state 60
    sumexp                         shift and go to state 62
    compexp1                       shift and go to state 63
    mulexp                         shift and go to state 64
    pexp                           shift and go to state 72
    var1                           shift and go to state 75
    llamada                        shift and go to state 79
    empty                          shift and go to state 42

state 177

    (54) else -> ELSE LBRACKET statement . LBRACKET

    LBRACKET        shift and go to state 179


state 178

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp . RCURLY

    RCURLY          shift and go to state 180


state 179

    (54) else -> ELSE LBRACKET statement LBRACKET .

    ID              reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    READ            reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    PRINT           reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    FOR             reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    IF              reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    LPAREN          reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    END             reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    RCURLY          reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    RBRACKET        reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    RETURN          reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)
    LBRACKET        reduce using rule 54 (else -> ELSE LBRACKET statement LBRACKET .)


state 180

    (31) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY .

    VAR             reduce using rule 31 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY .)
    $end            reduce using rule 31 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY statement RETURN exp RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for SEMICOLON in state 19 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 41 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 80 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 101 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 148 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 151 resolved as shift
WARNING: reduce/reduce conflict in state 165 resolved using rule (if -> IF LPAREN exp RPAREN LBRACKET statement RBRACKET)
WARNING: rejected rule (empty -> <empty>) in state 165
