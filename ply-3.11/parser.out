Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON programa1
Rule 2     programa1 -> vars modules programa2
Rule 3     programa1 -> vars modules
Rule 4     programa1 -> programa2
Rule 5     programa2 -> main
Rule 6     main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END
Rule 7     tipo -> INT
Rule 8     tipo -> FLOAT
Rule 9     tipo -> CHAR
Rule 10    vars -> var
Rule 11    vars -> empty
Rule 12    var -> VAR var2 var2
Rule 13    var1 -> ID
Rule 14    var1 -> ID COMMA var1
Rule 15    var1 -> ID arr
Rule 16    var1 -> ID arr COMMA var1
Rule 17    var1 -> ID mat COMMA var1
Rule 18    var1 -> ID mat
Rule 19    var1 -> ID mat especial
Rule 20    var1 -> empty
Rule 21    var2 -> tipo var1 SEMICOLON
Rule 22    var2 -> tipo arr SEMICOLON
Rule 23    var2 -> tipo mat SEMICOLON
Rule 24    var2 -> empty
Rule 25    especial -> TRANSPUESTA
Rule 26    especial -> INVERSA
Rule 27    especial -> DETERMINANTE
Rule 28    arr -> LBRACKET CTEI RBRACKET
Rule 29    arr -> LBRACKET exp RBRACKET
Rule 30    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 31    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 32    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 33    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 34    modules -> function modules
Rule 35    modules -> empty
Rule 36    function -> FUN VOID function1
Rule 37    function -> FUN tipo function2
Rule 38    function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 39    function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 40    statement -> statement1 statement
Rule 41    statement -> empty
Rule 42    statement1 -> asignacion SEMICOLON
Rule 43    statement1 -> llamada SEMICOLON
Rule 44    statement1 -> lectura SEMICOLON
Rule 45    statement1 -> escritura SEMICOLON
Rule 46    statement1 -> for
Rule 47    statement1 -> if
Rule 48    statement1 -> while
Rule 49    asignacion -> ID EQUALS exp
Rule 50    asignacion -> ID arr EQUALS exp
Rule 51    asignacion -> ID mat EQUALS exp
Rule 52    param -> tipo param1
Rule 53    param -> empty
Rule 54    param1 -> ID
Rule 55    param1 -> ID COMMA param1
Rule 56    param1 -> empty
Rule 57    llamada -> ID LPAREN exp RPAREN
Rule 58    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY
Rule 59    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else
Rule 60    else -> ELSE LCURLY statement RCURLY
Rule 61    else -> empty
Rule 62    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 63    for1 -> FROM asignacion TO exp
Rule 64    while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY
Rule 65    escritura -> PRINT LPAREN escritura1 RPAREN
Rule 66    escritura1 -> escritura2 COMMA escritura2
Rule 67    escritura1 -> escritura2
Rule 68    escritura2 -> CTESTRING
Rule 69    escritura2 -> CTEI
Rule 70    escritura2 -> CTEF
Rule 71    escritura2 -> exp
Rule 72    lectura -> READ LPAREN var1 RPAREN
Rule 73    exp -> nexp
Rule 74    exp -> nexp OR nexp
Rule 75    nexp -> compexp
Rule 76    nexp -> compexp AND compexp
Rule 77    compexp -> sumexp
Rule 78    compexp -> compexp1 sumexp
Rule 79    compexp1 -> sumexp GT sumexp
Rule 80    compexp1 -> sumexp LT sumexp
Rule 81    compexp1 -> sumexp GTE sumexp
Rule 82    compexp1 -> sumexp LTE sumexp
Rule 83    compexp1 -> sumexp NE sumexp
Rule 84    sumexp -> mulexp
Rule 85    sumexp -> mulexp PLUS mulexp
Rule 86    sumexp -> mulexp MINUS mulexp
Rule 87    mulexp -> pexp
Rule 88    mulexp -> pexp MUL pexp
Rule 89    mulexp -> pexp DIV pexp
Rule 90    pexp -> var1
Rule 91    pexp -> CTEI
Rule 92    pexp -> CTEF
Rule 93    pexp -> CTEC
Rule 94    pexp -> llamada
Rule 95    pexp -> LPAREN exp RPAREN
Rule 96    empty -> <empty>

Terminals, with rules where they appear

AND                  : 76
CHAR                 : 9
COMILLA              : 
COMMA                : 14 16 17 55 66
CTEC                 : 93
CTEF                 : 70 92
CTEI                 : 28 30 30 32 33 69 91
CTESTRING            : 68
DETERMINANTE         : 27
DIV                  : 89
ELSE                 : 60
END                  : 6
EQUALS               : 49 50 51
FLOAT                : 8
FOR                  : 62
FROM                 : 63
FUN                  : 36 37
GT                   : 79
GTE                  : 81
ID                   : 1 13 14 15 16 17 18 19 38 39 49 50 51 54 55 57
IF                   : 58 59
INT                  : 7
INVERSA              : 26
LBRACKET             : 28 29 30 30 31 31 32 32 33 33
LCURLY               : 6 38 39 58 59 60 62 64
LPAREN               : 6 38 39 57 58 59 62 64 65 72 95
LT                   : 80
LTE                  : 82
MAIN                 : 6
MINUS                : 86
MUL                  : 88
NE                   : 83
OR                   : 74
PLUS                 : 85
PRINT                : 65
PROGRAM              : 1
RBRACKET             : 28 29 30 30 31 31 32 32 33 33
RCURLY               : 6 38 39 58 59 60 62 64
READ                 : 72
RETURN               : 39
RPAREN               : 6 38 39 57 58 59 62 64 65 72 95
SEMICOLON            : 1 21 22 23 38 39 39 42 43 44 45
TO                   : 63
TRANSPUESTA          : 25
VAR                  : 12
VOID                 : 36
WHILE                : 64
error                : 

Nonterminals, with rules where they appear

arr                  : 15 16 22 50
asignacion           : 42 63
compexp              : 75 76 76
compexp1             : 78
else                 : 59
empty                : 11 20 24 35 41 53 56 61
escritura            : 45
escritura1           : 65
escritura2           : 66 66 67
especial             : 19
exp                  : 29 31 31 32 33 39 49 50 51 57 58 59 63 64 71 95
for                  : 46
for1                 : 62
function             : 34
function1            : 36
function2            : 37
if                   : 47
lectura              : 44
llamada              : 43 94
main                 : 5
mat                  : 17 18 19 23 51
modules              : 2 3 34
mulexp               : 84 85 85 86 86
nexp                 : 73 74 74
param                : 6 38 39
param1               : 52 55
pexp                 : 87 88 88 89 89
programa             : 0
programa1            : 1
programa2            : 2 4
statement            : 6 38 39 40 58 59 60 62 64
statement1           : 40
sumexp               : 77 78 79 79 80 80 81 81 82 82 83 83
tipo                 : 21 22 23 37 52
var                  : 10
var1                 : 14 16 17 21 72 90
var2                 : 12 12
vars                 : 2 3 6 38 39
while                : 48

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . programa1
    (2) programa1 -> . vars modules programa2
    (3) programa1 -> . vars modules
    (4) programa1 -> . programa2
    (10) vars -> . var
    (11) vars -> . empty
    (5) programa2 -> . main
    (12) var -> . VAR var2 var2
    (96) empty -> .
    (6) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 11
    FUN             reduce using rule 96 (empty -> .)
    $end            reduce using rule 96 (empty -> .)
    MAIN            shift and go to state 12

  ! MAIN            [ reduce using rule 96 (empty -> .) ]

    programa1                      shift and go to state 5
    vars                           shift and go to state 6
    programa2                      shift and go to state 7
    var                            shift and go to state 8
    empty                          shift and go to state 9
    main                           shift and go to state 10

state 5

    (1) programa -> PROGRAM ID SEMICOLON programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON programa1 .)


state 6

    (2) programa1 -> vars . modules programa2
    (3) programa1 -> vars . modules
    (34) modules -> . function modules
    (35) modules -> . empty
    (36) function -> . FUN VOID function1
    (37) function -> . FUN tipo function2
    (96) empty -> .

    FUN             shift and go to state 16
    MAIN            reduce using rule 96 (empty -> .)
    $end            reduce using rule 96 (empty -> .)

    modules                        shift and go to state 13
    function                       shift and go to state 14
    empty                          shift and go to state 15

state 7

    (4) programa1 -> programa2 .

    $end            reduce using rule 4 (programa1 -> programa2 .)


state 8

    (10) vars -> var .

    FUN             reduce using rule 10 (vars -> var .)
    MAIN            reduce using rule 10 (vars -> var .)
    $end            reduce using rule 10 (vars -> var .)
    ID              reduce using rule 10 (vars -> var .)
    READ            reduce using rule 10 (vars -> var .)
    PRINT           reduce using rule 10 (vars -> var .)
    FOR             reduce using rule 10 (vars -> var .)
    IF              reduce using rule 10 (vars -> var .)
    WHILE           reduce using rule 10 (vars -> var .)
    RCURLY          reduce using rule 10 (vars -> var .)
    RETURN          reduce using rule 10 (vars -> var .)


state 9

    (11) vars -> empty .

    FUN             reduce using rule 11 (vars -> empty .)
    MAIN            reduce using rule 11 (vars -> empty .)
    $end            reduce using rule 11 (vars -> empty .)
    ID              reduce using rule 11 (vars -> empty .)
    READ            reduce using rule 11 (vars -> empty .)
    PRINT           reduce using rule 11 (vars -> empty .)
    FOR             reduce using rule 11 (vars -> empty .)
    IF              reduce using rule 11 (vars -> empty .)
    WHILE           reduce using rule 11 (vars -> empty .)
    RCURLY          reduce using rule 11 (vars -> empty .)
    RETURN          reduce using rule 11 (vars -> empty .)


state 10

    (5) programa2 -> main .

    $end            reduce using rule 5 (programa2 -> main .)


state 11

    (12) var -> VAR . var2 var2
    (21) var2 -> . tipo var1 SEMICOLON
    (22) var2 -> . tipo arr SEMICOLON
    (23) var2 -> . tipo mat SEMICOLON
    (24) var2 -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (96) empty -> .

  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for FLOAT resolved as shift
  ! shift/reduce conflict for CHAR resolved as shift
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    FUN             reduce using rule 96 (empty -> .)
    MAIN            reduce using rule 96 (empty -> .)
    $end            reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    READ            reduce using rule 96 (empty -> .)
    PRINT           reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RCURLY          reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)

  ! INT             [ reduce using rule 96 (empty -> .) ]
  ! FLOAT           [ reduce using rule 96 (empty -> .) ]
  ! CHAR            [ reduce using rule 96 (empty -> .) ]

    var2                           shift and go to state 17
    tipo                           shift and go to state 18
    empty                          shift and go to state 19

state 12

    (6) main -> MAIN . LPAREN param RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 23


state 13

    (2) programa1 -> vars modules . programa2
    (3) programa1 -> vars modules .
    (5) programa2 -> . main
    (6) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 3 (programa1 -> vars modules .)
    MAIN            shift and go to state 12

    programa2                      shift and go to state 24
    main                           shift and go to state 10

state 14

    (34) modules -> function . modules
    (34) modules -> . function modules
    (35) modules -> . empty
    (36) function -> . FUN VOID function1
    (37) function -> . FUN tipo function2
    (96) empty -> .

    FUN             shift and go to state 16
    MAIN            reduce using rule 96 (empty -> .)
    $end            reduce using rule 96 (empty -> .)

    function                       shift and go to state 14
    modules                        shift and go to state 25
    empty                          shift and go to state 15

state 15

    (35) modules -> empty .

    MAIN            reduce using rule 35 (modules -> empty .)
    $end            reduce using rule 35 (modules -> empty .)


state 16

    (36) function -> FUN . VOID function1
    (37) function -> FUN . tipo function2
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR

    VOID            shift and go to state 26
    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22

    tipo                           shift and go to state 27

state 17

    (12) var -> VAR var2 . var2
    (21) var2 -> . tipo var1 SEMICOLON
    (22) var2 -> . tipo arr SEMICOLON
    (23) var2 -> . tipo mat SEMICOLON
    (24) var2 -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (96) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    FUN             reduce using rule 96 (empty -> .)
    MAIN            reduce using rule 96 (empty -> .)
    $end            reduce using rule 96 (empty -> .)
    ID              reduce using rule 96 (empty -> .)
    READ            reduce using rule 96 (empty -> .)
    PRINT           reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RCURLY          reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)

    var2                           shift and go to state 28
    tipo                           shift and go to state 18
    empty                          shift and go to state 19

state 18

    (21) var2 -> tipo . var1 SEMICOLON
    (22) var2 -> tipo . arr SEMICOLON
    (23) var2 -> tipo . mat SEMICOLON
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (28) arr -> . LBRACKET CTEI RBRACKET
    (29) arr -> . LBRACKET exp RBRACKET
    (30) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (96) empty -> .

    ID              shift and go to state 32
    LBRACKET        shift and go to state 34
    SEMICOLON       reduce using rule 96 (empty -> .)

    var1                           shift and go to state 29
    arr                            shift and go to state 30
    mat                            shift and go to state 31
    empty                          shift and go to state 33

state 19

    (24) var2 -> empty .

    INT             reduce using rule 24 (var2 -> empty .)
    FLOAT           reduce using rule 24 (var2 -> empty .)
    CHAR            reduce using rule 24 (var2 -> empty .)
    FUN             reduce using rule 24 (var2 -> empty .)
    MAIN            reduce using rule 24 (var2 -> empty .)
    $end            reduce using rule 24 (var2 -> empty .)
    ID              reduce using rule 24 (var2 -> empty .)
    READ            reduce using rule 24 (var2 -> empty .)
    PRINT           reduce using rule 24 (var2 -> empty .)
    FOR             reduce using rule 24 (var2 -> empty .)
    IF              reduce using rule 24 (var2 -> empty .)
    WHILE           reduce using rule 24 (var2 -> empty .)
    RCURLY          reduce using rule 24 (var2 -> empty .)
    RETURN          reduce using rule 24 (var2 -> empty .)


state 20

    (7) tipo -> INT .

    ID              reduce using rule 7 (tipo -> INT .)
    LBRACKET        reduce using rule 7 (tipo -> INT .)
    SEMICOLON       reduce using rule 7 (tipo -> INT .)
    RPAREN          reduce using rule 7 (tipo -> INT .)


state 21

    (8) tipo -> FLOAT .

    ID              reduce using rule 8 (tipo -> FLOAT .)
    LBRACKET        reduce using rule 8 (tipo -> FLOAT .)
    SEMICOLON       reduce using rule 8 (tipo -> FLOAT .)
    RPAREN          reduce using rule 8 (tipo -> FLOAT .)


state 22

    (9) tipo -> CHAR .

    ID              reduce using rule 9 (tipo -> CHAR .)
    LBRACKET        reduce using rule 9 (tipo -> CHAR .)
    SEMICOLON       reduce using rule 9 (tipo -> CHAR .)
    RPAREN          reduce using rule 9 (tipo -> CHAR .)


state 23

    (6) main -> MAIN LPAREN . param RPAREN LCURLY vars statement RCURLY END
    (52) param -> . tipo param1
    (53) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (96) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 96 (empty -> .)

    param                          shift and go to state 35
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 24

    (2) programa1 -> vars modules programa2 .

    $end            reduce using rule 2 (programa1 -> vars modules programa2 .)


state 25

    (34) modules -> function modules .

    MAIN            reduce using rule 34 (modules -> function modules .)
    $end            reduce using rule 34 (modules -> function modules .)


state 26

    (36) function -> FUN VOID . function1
    (38) function1 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 39

    function1                      shift and go to state 38

state 27

    (37) function -> FUN tipo . function2
    (39) function2 -> . ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 41

    function2                      shift and go to state 40

state 28

    (12) var -> VAR var2 var2 .

    FUN             reduce using rule 12 (var -> VAR var2 var2 .)
    MAIN            reduce using rule 12 (var -> VAR var2 var2 .)
    $end            reduce using rule 12 (var -> VAR var2 var2 .)
    ID              reduce using rule 12 (var -> VAR var2 var2 .)
    READ            reduce using rule 12 (var -> VAR var2 var2 .)
    PRINT           reduce using rule 12 (var -> VAR var2 var2 .)
    FOR             reduce using rule 12 (var -> VAR var2 var2 .)
    IF              reduce using rule 12 (var -> VAR var2 var2 .)
    WHILE           reduce using rule 12 (var -> VAR var2 var2 .)
    RCURLY          reduce using rule 12 (var -> VAR var2 var2 .)
    RETURN          reduce using rule 12 (var -> VAR var2 var2 .)


state 29

    (21) var2 -> tipo var1 . SEMICOLON

    SEMICOLON       shift and go to state 42


state 30

    (22) var2 -> tipo arr . SEMICOLON

    SEMICOLON       shift and go to state 43


state 31

    (23) var2 -> tipo mat . SEMICOLON

    SEMICOLON       shift and go to state 44


state 32

    (13) var1 -> ID .
    (14) var1 -> ID . COMMA var1
    (15) var1 -> ID . arr
    (16) var1 -> ID . arr COMMA var1
    (17) var1 -> ID . mat COMMA var1
    (18) var1 -> ID . mat
    (19) var1 -> ID . mat especial
    (28) arr -> . LBRACKET CTEI RBRACKET
    (29) arr -> . LBRACKET exp RBRACKET
    (30) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 13 (var1 -> ID .)
    MUL             reduce using rule 13 (var1 -> ID .)
    DIV             reduce using rule 13 (var1 -> ID .)
    PLUS            reduce using rule 13 (var1 -> ID .)
    MINUS           reduce using rule 13 (var1 -> ID .)
    GT              reduce using rule 13 (var1 -> ID .)
    LT              reduce using rule 13 (var1 -> ID .)
    GTE             reduce using rule 13 (var1 -> ID .)
    LTE             reduce using rule 13 (var1 -> ID .)
    NE              reduce using rule 13 (var1 -> ID .)
    AND             reduce using rule 13 (var1 -> ID .)
    OR              reduce using rule 13 (var1 -> ID .)
    RBRACKET        reduce using rule 13 (var1 -> ID .)
    RPAREN          reduce using rule 13 (var1 -> ID .)
    TO              reduce using rule 13 (var1 -> ID .)
    CTEI            reduce using rule 13 (var1 -> ID .)
    CTEF            reduce using rule 13 (var1 -> ID .)
    CTEC            reduce using rule 13 (var1 -> ID .)
    LPAREN          reduce using rule 13 (var1 -> ID .)
    ID              reduce using rule 13 (var1 -> ID .)
    COMMA           shift and go to state 45
    LBRACKET        shift and go to state 34

  ! COMMA           [ reduce using rule 13 (var1 -> ID .) ]

    arr                            shift and go to state 46
    mat                            shift and go to state 47

state 33

    (20) var1 -> empty .

    SEMICOLON       reduce using rule 20 (var1 -> empty .)
    MUL             reduce using rule 20 (var1 -> empty .)
    DIV             reduce using rule 20 (var1 -> empty .)
    PLUS            reduce using rule 20 (var1 -> empty .)
    MINUS           reduce using rule 20 (var1 -> empty .)
    GT              reduce using rule 20 (var1 -> empty .)
    LT              reduce using rule 20 (var1 -> empty .)
    GTE             reduce using rule 20 (var1 -> empty .)
    LTE             reduce using rule 20 (var1 -> empty .)
    NE              reduce using rule 20 (var1 -> empty .)
    AND             reduce using rule 20 (var1 -> empty .)
    OR              reduce using rule 20 (var1 -> empty .)
    RBRACKET        reduce using rule 20 (var1 -> empty .)
    RPAREN          reduce using rule 20 (var1 -> empty .)
    TO              reduce using rule 20 (var1 -> empty .)
    COMMA           reduce using rule 20 (var1 -> empty .)
    CTEI            reduce using rule 20 (var1 -> empty .)
    CTEF            reduce using rule 20 (var1 -> empty .)
    CTEC            reduce using rule 20 (var1 -> empty .)
    LPAREN          reduce using rule 20 (var1 -> empty .)
    ID              reduce using rule 20 (var1 -> empty .)


state 34

    (28) arr -> LBRACKET . CTEI RBRACKET
    (29) arr -> LBRACKET . exp RBRACKET
    (30) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 48
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    exp                            shift and go to state 49
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 35

    (6) main -> MAIN LPAREN param . RPAREN LCURLY vars statement RCURLY END

    RPAREN          shift and go to state 62


state 36

    (52) param -> tipo . param1
    (54) param1 -> . ID
    (55) param1 -> . ID COMMA param1
    (56) param1 -> . empty
    (96) empty -> .

    ID              shift and go to state 64
    RPAREN          reduce using rule 96 (empty -> .)

    param1                         shift and go to state 63
    empty                          shift and go to state 65

state 37

    (53) param -> empty .

    RPAREN          reduce using rule 53 (param -> empty .)


state 38

    (36) function -> FUN VOID function1 .

    FUN             reduce using rule 36 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 36 (function -> FUN VOID function1 .)
    $end            reduce using rule 36 (function -> FUN VOID function1 .)


state 39

    (38) function1 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 66


state 40

    (37) function -> FUN tipo function2 .

    FUN             reduce using rule 37 (function -> FUN tipo function2 .)
    MAIN            reduce using rule 37 (function -> FUN tipo function2 .)
    $end            reduce using rule 37 (function -> FUN tipo function2 .)


state 41

    (39) function2 -> ID . LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LPAREN          shift and go to state 67


state 42

    (21) var2 -> tipo var1 SEMICOLON .

    INT             reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    FLOAT           reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    CHAR            reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    FUN             reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    MAIN            reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    $end            reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    ID              reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    READ            reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    PRINT           reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    FOR             reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    IF              reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    WHILE           reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    RCURLY          reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)
    RETURN          reduce using rule 21 (var2 -> tipo var1 SEMICOLON .)


state 43

    (22) var2 -> tipo arr SEMICOLON .

    INT             reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    FLOAT           reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    CHAR            reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    FUN             reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    MAIN            reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    $end            reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    ID              reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    READ            reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    PRINT           reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    FOR             reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    IF              reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    WHILE           reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    RCURLY          reduce using rule 22 (var2 -> tipo arr SEMICOLON .)
    RETURN          reduce using rule 22 (var2 -> tipo arr SEMICOLON .)


state 44

    (23) var2 -> tipo mat SEMICOLON .

    INT             reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    FLOAT           reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    CHAR            reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    FUN             reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    MAIN            reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    $end            reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    ID              reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    READ            reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    PRINT           reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    FOR             reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    IF              reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    WHILE           reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    RCURLY          reduce using rule 23 (var2 -> tipo mat SEMICOLON .)
    RETURN          reduce using rule 23 (var2 -> tipo mat SEMICOLON .)


state 45

    (14) var1 -> ID COMMA . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (96) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 32
    SEMICOLON       reduce using rule 96 (empty -> .)
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    CTEI            reduce using rule 96 (empty -> .)
    CTEF            reduce using rule 96 (empty -> .)
    CTEC            reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)

  ! ID              [ reduce using rule 96 (empty -> .) ]

    var1                           shift and go to state 68
    empty                          shift and go to state 33

state 46

    (15) var1 -> ID arr .
    (16) var1 -> ID arr . COMMA var1

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID arr .)
    MUL             reduce using rule 15 (var1 -> ID arr .)
    DIV             reduce using rule 15 (var1 -> ID arr .)
    PLUS            reduce using rule 15 (var1 -> ID arr .)
    MINUS           reduce using rule 15 (var1 -> ID arr .)
    GT              reduce using rule 15 (var1 -> ID arr .)
    LT              reduce using rule 15 (var1 -> ID arr .)
    GTE             reduce using rule 15 (var1 -> ID arr .)
    LTE             reduce using rule 15 (var1 -> ID arr .)
    NE              reduce using rule 15 (var1 -> ID arr .)
    AND             reduce using rule 15 (var1 -> ID arr .)
    OR              reduce using rule 15 (var1 -> ID arr .)
    RBRACKET        reduce using rule 15 (var1 -> ID arr .)
    RPAREN          reduce using rule 15 (var1 -> ID arr .)
    TO              reduce using rule 15 (var1 -> ID arr .)
    CTEI            reduce using rule 15 (var1 -> ID arr .)
    CTEF            reduce using rule 15 (var1 -> ID arr .)
    CTEC            reduce using rule 15 (var1 -> ID arr .)
    LPAREN          reduce using rule 15 (var1 -> ID arr .)
    ID              reduce using rule 15 (var1 -> ID arr .)
    COMMA           shift and go to state 69

  ! COMMA           [ reduce using rule 15 (var1 -> ID arr .) ]


state 47

    (17) var1 -> ID mat . COMMA var1
    (18) var1 -> ID mat .
    (19) var1 -> ID mat . especial
    (25) especial -> . TRANSPUESTA
    (26) especial -> . INVERSA
    (27) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 70
    SEMICOLON       reduce using rule 18 (var1 -> ID mat .)
    MUL             reduce using rule 18 (var1 -> ID mat .)
    DIV             reduce using rule 18 (var1 -> ID mat .)
    PLUS            reduce using rule 18 (var1 -> ID mat .)
    MINUS           reduce using rule 18 (var1 -> ID mat .)
    GT              reduce using rule 18 (var1 -> ID mat .)
    LT              reduce using rule 18 (var1 -> ID mat .)
    GTE             reduce using rule 18 (var1 -> ID mat .)
    LTE             reduce using rule 18 (var1 -> ID mat .)
    NE              reduce using rule 18 (var1 -> ID mat .)
    AND             reduce using rule 18 (var1 -> ID mat .)
    OR              reduce using rule 18 (var1 -> ID mat .)
    RBRACKET        reduce using rule 18 (var1 -> ID mat .)
    RPAREN          reduce using rule 18 (var1 -> ID mat .)
    TO              reduce using rule 18 (var1 -> ID mat .)
    CTEI            reduce using rule 18 (var1 -> ID mat .)
    CTEF            reduce using rule 18 (var1 -> ID mat .)
    CTEC            reduce using rule 18 (var1 -> ID mat .)
    LPAREN          reduce using rule 18 (var1 -> ID mat .)
    ID              reduce using rule 18 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 72
    INVERSA         shift and go to state 73
    DETERMINANTE    shift and go to state 74

  ! COMMA           [ reduce using rule 18 (var1 -> ID mat .) ]

    especial                       shift and go to state 71

state 48

    (28) arr -> LBRACKET CTEI . RBRACKET
    (30) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (91) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 75
    MUL             reduce using rule 91 (pexp -> CTEI .)
    DIV             reduce using rule 91 (pexp -> CTEI .)
    PLUS            reduce using rule 91 (pexp -> CTEI .)
    MINUS           reduce using rule 91 (pexp -> CTEI .)
    GT              reduce using rule 91 (pexp -> CTEI .)
    LT              reduce using rule 91 (pexp -> CTEI .)
    GTE             reduce using rule 91 (pexp -> CTEI .)
    LTE             reduce using rule 91 (pexp -> CTEI .)
    NE              reduce using rule 91 (pexp -> CTEI .)
    AND             reduce using rule 91 (pexp -> CTEI .)
    OR              reduce using rule 91 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 91 (pexp -> CTEI .) ]


state 49

    (29) arr -> LBRACKET exp . RBRACKET
    (31) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (32) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 76


state 50

    (73) exp -> nexp .
    (74) exp -> nexp . OR nexp

    RBRACKET        reduce using rule 73 (exp -> nexp .)
    RPAREN          reduce using rule 73 (exp -> nexp .)
    SEMICOLON       reduce using rule 73 (exp -> nexp .)
    TO              reduce using rule 73 (exp -> nexp .)
    COMMA           reduce using rule 73 (exp -> nexp .)
    OR              shift and go to state 77


state 51

    (75) nexp -> compexp .
    (76) nexp -> compexp . AND compexp

    OR              reduce using rule 75 (nexp -> compexp .)
    RBRACKET        reduce using rule 75 (nexp -> compexp .)
    RPAREN          reduce using rule 75 (nexp -> compexp .)
    SEMICOLON       reduce using rule 75 (nexp -> compexp .)
    TO              reduce using rule 75 (nexp -> compexp .)
    COMMA           reduce using rule 75 (nexp -> compexp .)
    AND             shift and go to state 78


state 52

    (77) compexp -> sumexp .
    (79) compexp1 -> sumexp . GT sumexp
    (80) compexp1 -> sumexp . LT sumexp
    (81) compexp1 -> sumexp . GTE sumexp
    (82) compexp1 -> sumexp . LTE sumexp
    (83) compexp1 -> sumexp . NE sumexp

    AND             reduce using rule 77 (compexp -> sumexp .)
    OR              reduce using rule 77 (compexp -> sumexp .)
    RBRACKET        reduce using rule 77 (compexp -> sumexp .)
    RPAREN          reduce using rule 77 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 77 (compexp -> sumexp .)
    TO              reduce using rule 77 (compexp -> sumexp .)
    COMMA           reduce using rule 77 (compexp -> sumexp .)
    GT              shift and go to state 79
    LT              shift and go to state 80
    GTE             shift and go to state 81
    LTE             shift and go to state 82
    NE              shift and go to state 83


state 53

    (78) compexp -> compexp1 . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

    sumexp                         shift and go to state 84
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 54

    (84) sumexp -> mulexp .
    (85) sumexp -> mulexp . PLUS mulexp
    (86) sumexp -> mulexp . MINUS mulexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 84 (sumexp -> mulexp .)
    LT              reduce using rule 84 (sumexp -> mulexp .)
    GTE             reduce using rule 84 (sumexp -> mulexp .)
    LTE             reduce using rule 84 (sumexp -> mulexp .)
    NE              reduce using rule 84 (sumexp -> mulexp .)
    AND             reduce using rule 84 (sumexp -> mulexp .)
    OR              reduce using rule 84 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 84 (sumexp -> mulexp .)
    RPAREN          reduce using rule 84 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 84 (sumexp -> mulexp .)
    TO              reduce using rule 84 (sumexp -> mulexp .)
    COMMA           reduce using rule 84 (sumexp -> mulexp .)
    CTEI            reduce using rule 84 (sumexp -> mulexp .)
    CTEF            reduce using rule 84 (sumexp -> mulexp .)
    CTEC            reduce using rule 84 (sumexp -> mulexp .)
    LPAREN          reduce using rule 84 (sumexp -> mulexp .)
    ID              reduce using rule 84 (sumexp -> mulexp .)
    MUL             reduce using rule 84 (sumexp -> mulexp .)
    DIV             reduce using rule 84 (sumexp -> mulexp .)
    PLUS            shift and go to state 86
    MINUS           shift and go to state 87

  ! PLUS            [ reduce using rule 84 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 84 (sumexp -> mulexp .) ]


state 55

    (87) mulexp -> pexp .
    (88) mulexp -> pexp . MUL pexp
    (89) mulexp -> pexp . DIV pexp

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 87 (mulexp -> pexp .)
    MINUS           reduce using rule 87 (mulexp -> pexp .)
    GT              reduce using rule 87 (mulexp -> pexp .)
    LT              reduce using rule 87 (mulexp -> pexp .)
    GTE             reduce using rule 87 (mulexp -> pexp .)
    LTE             reduce using rule 87 (mulexp -> pexp .)
    NE              reduce using rule 87 (mulexp -> pexp .)
    AND             reduce using rule 87 (mulexp -> pexp .)
    OR              reduce using rule 87 (mulexp -> pexp .)
    RBRACKET        reduce using rule 87 (mulexp -> pexp .)
    RPAREN          reduce using rule 87 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 87 (mulexp -> pexp .)
    TO              reduce using rule 87 (mulexp -> pexp .)
    COMMA           reduce using rule 87 (mulexp -> pexp .)
    CTEI            reduce using rule 87 (mulexp -> pexp .)
    CTEF            reduce using rule 87 (mulexp -> pexp .)
    CTEC            reduce using rule 87 (mulexp -> pexp .)
    LPAREN          reduce using rule 87 (mulexp -> pexp .)
    ID              reduce using rule 87 (mulexp -> pexp .)
    MUL             shift and go to state 88
    DIV             shift and go to state 89

  ! MUL             [ reduce using rule 87 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 87 (mulexp -> pexp .) ]


state 56

    (90) pexp -> var1 .

    MUL             reduce using rule 90 (pexp -> var1 .)
    DIV             reduce using rule 90 (pexp -> var1 .)
    PLUS            reduce using rule 90 (pexp -> var1 .)
    MINUS           reduce using rule 90 (pexp -> var1 .)
    GT              reduce using rule 90 (pexp -> var1 .)
    LT              reduce using rule 90 (pexp -> var1 .)
    GTE             reduce using rule 90 (pexp -> var1 .)
    LTE             reduce using rule 90 (pexp -> var1 .)
    NE              reduce using rule 90 (pexp -> var1 .)
    AND             reduce using rule 90 (pexp -> var1 .)
    OR              reduce using rule 90 (pexp -> var1 .)
    RBRACKET        reduce using rule 90 (pexp -> var1 .)
    RPAREN          reduce using rule 90 (pexp -> var1 .)
    SEMICOLON       reduce using rule 90 (pexp -> var1 .)
    TO              reduce using rule 90 (pexp -> var1 .)
    COMMA           reduce using rule 90 (pexp -> var1 .)
    CTEI            reduce using rule 90 (pexp -> var1 .)
    CTEF            reduce using rule 90 (pexp -> var1 .)
    CTEC            reduce using rule 90 (pexp -> var1 .)
    LPAREN          reduce using rule 90 (pexp -> var1 .)
    ID              reduce using rule 90 (pexp -> var1 .)


state 57

    (92) pexp -> CTEF .

    MUL             reduce using rule 92 (pexp -> CTEF .)
    DIV             reduce using rule 92 (pexp -> CTEF .)
    PLUS            reduce using rule 92 (pexp -> CTEF .)
    MINUS           reduce using rule 92 (pexp -> CTEF .)
    GT              reduce using rule 92 (pexp -> CTEF .)
    LT              reduce using rule 92 (pexp -> CTEF .)
    GTE             reduce using rule 92 (pexp -> CTEF .)
    LTE             reduce using rule 92 (pexp -> CTEF .)
    NE              reduce using rule 92 (pexp -> CTEF .)
    AND             reduce using rule 92 (pexp -> CTEF .)
    OR              reduce using rule 92 (pexp -> CTEF .)
    RBRACKET        reduce using rule 92 (pexp -> CTEF .)
    RPAREN          reduce using rule 92 (pexp -> CTEF .)
    SEMICOLON       reduce using rule 92 (pexp -> CTEF .)
    TO              reduce using rule 92 (pexp -> CTEF .)
    COMMA           reduce using rule 92 (pexp -> CTEF .)
    CTEI            reduce using rule 92 (pexp -> CTEF .)
    CTEF            reduce using rule 92 (pexp -> CTEF .)
    CTEC            reduce using rule 92 (pexp -> CTEF .)
    LPAREN          reduce using rule 92 (pexp -> CTEF .)
    ID              reduce using rule 92 (pexp -> CTEF .)


state 58

    (93) pexp -> CTEC .

    MUL             reduce using rule 93 (pexp -> CTEC .)
    DIV             reduce using rule 93 (pexp -> CTEC .)
    PLUS            reduce using rule 93 (pexp -> CTEC .)
    MINUS           reduce using rule 93 (pexp -> CTEC .)
    GT              reduce using rule 93 (pexp -> CTEC .)
    LT              reduce using rule 93 (pexp -> CTEC .)
    GTE             reduce using rule 93 (pexp -> CTEC .)
    LTE             reduce using rule 93 (pexp -> CTEC .)
    NE              reduce using rule 93 (pexp -> CTEC .)
    AND             reduce using rule 93 (pexp -> CTEC .)
    OR              reduce using rule 93 (pexp -> CTEC .)
    RBRACKET        reduce using rule 93 (pexp -> CTEC .)
    RPAREN          reduce using rule 93 (pexp -> CTEC .)
    SEMICOLON       reduce using rule 93 (pexp -> CTEC .)
    TO              reduce using rule 93 (pexp -> CTEC .)
    COMMA           reduce using rule 93 (pexp -> CTEC .)
    CTEI            reduce using rule 93 (pexp -> CTEC .)
    CTEF            reduce using rule 93 (pexp -> CTEC .)
    CTEC            reduce using rule 93 (pexp -> CTEC .)
    LPAREN          reduce using rule 93 (pexp -> CTEC .)
    ID              reduce using rule 93 (pexp -> CTEC .)


state 59

    (94) pexp -> llamada .

    MUL             reduce using rule 94 (pexp -> llamada .)
    DIV             reduce using rule 94 (pexp -> llamada .)
    PLUS            reduce using rule 94 (pexp -> llamada .)
    MINUS           reduce using rule 94 (pexp -> llamada .)
    GT              reduce using rule 94 (pexp -> llamada .)
    LT              reduce using rule 94 (pexp -> llamada .)
    GTE             reduce using rule 94 (pexp -> llamada .)
    LTE             reduce using rule 94 (pexp -> llamada .)
    NE              reduce using rule 94 (pexp -> llamada .)
    AND             reduce using rule 94 (pexp -> llamada .)
    OR              reduce using rule 94 (pexp -> llamada .)
    RBRACKET        reduce using rule 94 (pexp -> llamada .)
    RPAREN          reduce using rule 94 (pexp -> llamada .)
    SEMICOLON       reduce using rule 94 (pexp -> llamada .)
    TO              reduce using rule 94 (pexp -> llamada .)
    COMMA           reduce using rule 94 (pexp -> llamada .)
    CTEI            reduce using rule 94 (pexp -> llamada .)
    CTEF            reduce using rule 94 (pexp -> llamada .)
    CTEC            reduce using rule 94 (pexp -> llamada .)
    LPAREN          reduce using rule 94 (pexp -> llamada .)
    ID              reduce using rule 94 (pexp -> llamada .)


state 60

    (95) pexp -> LPAREN . exp RPAREN
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    exp                            shift and go to state 90
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 61

    (13) var1 -> ID .
    (14) var1 -> ID . COMMA var1
    (15) var1 -> ID . arr
    (16) var1 -> ID . arr COMMA var1
    (17) var1 -> ID . mat COMMA var1
    (18) var1 -> ID . mat
    (19) var1 -> ID . mat especial
    (57) llamada -> ID . LPAREN exp RPAREN
    (28) arr -> . LBRACKET CTEI RBRACKET
    (29) arr -> . LBRACKET exp RBRACKET
    (30) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 13 (var1 -> ID .)
    DIV             reduce using rule 13 (var1 -> ID .)
    PLUS            reduce using rule 13 (var1 -> ID .)
    MINUS           reduce using rule 13 (var1 -> ID .)
    GT              reduce using rule 13 (var1 -> ID .)
    LT              reduce using rule 13 (var1 -> ID .)
    GTE             reduce using rule 13 (var1 -> ID .)
    LTE             reduce using rule 13 (var1 -> ID .)
    NE              reduce using rule 13 (var1 -> ID .)
    AND             reduce using rule 13 (var1 -> ID .)
    OR              reduce using rule 13 (var1 -> ID .)
    RBRACKET        reduce using rule 13 (var1 -> ID .)
    RPAREN          reduce using rule 13 (var1 -> ID .)
    SEMICOLON       reduce using rule 13 (var1 -> ID .)
    TO              reduce using rule 13 (var1 -> ID .)
    CTEI            reduce using rule 13 (var1 -> ID .)
    CTEF            reduce using rule 13 (var1 -> ID .)
    CTEC            reduce using rule 13 (var1 -> ID .)
    ID              reduce using rule 13 (var1 -> ID .)
    COMMA           shift and go to state 45
    LPAREN          shift and go to state 91
    LBRACKET        shift and go to state 34

  ! COMMA           [ reduce using rule 13 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 13 (var1 -> ID .) ]

    arr                            shift and go to state 46
    mat                            shift and go to state 47

state 62

    (6) main -> MAIN LPAREN param RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 92


state 63

    (52) param -> tipo param1 .

    RPAREN          reduce using rule 52 (param -> tipo param1 .)


state 64

    (54) param1 -> ID .
    (55) param1 -> ID . COMMA param1

    RPAREN          reduce using rule 54 (param1 -> ID .)
    COMMA           shift and go to state 93


state 65

    (56) param1 -> empty .

    RPAREN          reduce using rule 56 (param1 -> empty .)


state 66

    (38) function1 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RCURLY
    (52) param -> . tipo param1
    (53) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (96) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 96 (empty -> .)

    param                          shift and go to state 94
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 67

    (39) function2 -> ID LPAREN . param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (52) param -> . tipo param1
    (53) param -> . empty
    (7) tipo -> . INT
    (8) tipo -> . FLOAT
    (9) tipo -> . CHAR
    (96) empty -> .

    INT             shift and go to state 20
    FLOAT           shift and go to state 21
    CHAR            shift and go to state 22
    RPAREN          reduce using rule 96 (empty -> .)

    param                          shift and go to state 95
    tipo                           shift and go to state 36
    empty                          shift and go to state 37

state 68

    (14) var1 -> ID COMMA var1 .

    SEMICOLON       reduce using rule 14 (var1 -> ID COMMA var1 .)
    MUL             reduce using rule 14 (var1 -> ID COMMA var1 .)
    DIV             reduce using rule 14 (var1 -> ID COMMA var1 .)
    PLUS            reduce using rule 14 (var1 -> ID COMMA var1 .)
    MINUS           reduce using rule 14 (var1 -> ID COMMA var1 .)
    GT              reduce using rule 14 (var1 -> ID COMMA var1 .)
    LT              reduce using rule 14 (var1 -> ID COMMA var1 .)
    GTE             reduce using rule 14 (var1 -> ID COMMA var1 .)
    LTE             reduce using rule 14 (var1 -> ID COMMA var1 .)
    NE              reduce using rule 14 (var1 -> ID COMMA var1 .)
    AND             reduce using rule 14 (var1 -> ID COMMA var1 .)
    OR              reduce using rule 14 (var1 -> ID COMMA var1 .)
    RBRACKET        reduce using rule 14 (var1 -> ID COMMA var1 .)
    RPAREN          reduce using rule 14 (var1 -> ID COMMA var1 .)
    TO              reduce using rule 14 (var1 -> ID COMMA var1 .)
    COMMA           reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEI            reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEF            reduce using rule 14 (var1 -> ID COMMA var1 .)
    CTEC            reduce using rule 14 (var1 -> ID COMMA var1 .)
    LPAREN          reduce using rule 14 (var1 -> ID COMMA var1 .)
    ID              reduce using rule 14 (var1 -> ID COMMA var1 .)


state 69

    (16) var1 -> ID arr COMMA . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (96) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 32
    SEMICOLON       reduce using rule 96 (empty -> .)
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    CTEI            reduce using rule 96 (empty -> .)
    CTEF            reduce using rule 96 (empty -> .)
    CTEC            reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)

  ! ID              [ reduce using rule 96 (empty -> .) ]

    var1                           shift and go to state 96
    empty                          shift and go to state 33

state 70

    (17) var1 -> ID mat COMMA . var1
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (96) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 32
    SEMICOLON       reduce using rule 96 (empty -> .)
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    CTEI            reduce using rule 96 (empty -> .)
    CTEF            reduce using rule 96 (empty -> .)
    CTEC            reduce using rule 96 (empty -> .)
    LPAREN          reduce using rule 96 (empty -> .)

  ! ID              [ reduce using rule 96 (empty -> .) ]

    var1                           shift and go to state 97
    empty                          shift and go to state 33

state 71

    (19) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat especial .)
    MUL             reduce using rule 19 (var1 -> ID mat especial .)
    DIV             reduce using rule 19 (var1 -> ID mat especial .)
    PLUS            reduce using rule 19 (var1 -> ID mat especial .)
    MINUS           reduce using rule 19 (var1 -> ID mat especial .)
    GT              reduce using rule 19 (var1 -> ID mat especial .)
    LT              reduce using rule 19 (var1 -> ID mat especial .)
    GTE             reduce using rule 19 (var1 -> ID mat especial .)
    LTE             reduce using rule 19 (var1 -> ID mat especial .)
    NE              reduce using rule 19 (var1 -> ID mat especial .)
    AND             reduce using rule 19 (var1 -> ID mat especial .)
    OR              reduce using rule 19 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 19 (var1 -> ID mat especial .)
    TO              reduce using rule 19 (var1 -> ID mat especial .)
    COMMA           reduce using rule 19 (var1 -> ID mat especial .)
    CTEI            reduce using rule 19 (var1 -> ID mat especial .)
    CTEF            reduce using rule 19 (var1 -> ID mat especial .)
    CTEC            reduce using rule 19 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 19 (var1 -> ID mat especial .)
    ID              reduce using rule 19 (var1 -> ID mat especial .)


state 72

    (25) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 25 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 25 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 25 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 25 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 25 (especial -> TRANSPUESTA .)
    GT              reduce using rule 25 (especial -> TRANSPUESTA .)
    LT              reduce using rule 25 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 25 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 25 (especial -> TRANSPUESTA .)
    NE              reduce using rule 25 (especial -> TRANSPUESTA .)
    AND             reduce using rule 25 (especial -> TRANSPUESTA .)
    OR              reduce using rule 25 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 25 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 25 (especial -> TRANSPUESTA .)
    TO              reduce using rule 25 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 25 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 25 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 25 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 25 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 25 (especial -> TRANSPUESTA .)
    ID              reduce using rule 25 (especial -> TRANSPUESTA .)


state 73

    (26) especial -> INVERSA .

    SEMICOLON       reduce using rule 26 (especial -> INVERSA .)
    MUL             reduce using rule 26 (especial -> INVERSA .)
    DIV             reduce using rule 26 (especial -> INVERSA .)
    PLUS            reduce using rule 26 (especial -> INVERSA .)
    MINUS           reduce using rule 26 (especial -> INVERSA .)
    GT              reduce using rule 26 (especial -> INVERSA .)
    LT              reduce using rule 26 (especial -> INVERSA .)
    GTE             reduce using rule 26 (especial -> INVERSA .)
    LTE             reduce using rule 26 (especial -> INVERSA .)
    NE              reduce using rule 26 (especial -> INVERSA .)
    AND             reduce using rule 26 (especial -> INVERSA .)
    OR              reduce using rule 26 (especial -> INVERSA .)
    RBRACKET        reduce using rule 26 (especial -> INVERSA .)
    RPAREN          reduce using rule 26 (especial -> INVERSA .)
    TO              reduce using rule 26 (especial -> INVERSA .)
    COMMA           reduce using rule 26 (especial -> INVERSA .)
    CTEI            reduce using rule 26 (especial -> INVERSA .)
    CTEF            reduce using rule 26 (especial -> INVERSA .)
    CTEC            reduce using rule 26 (especial -> INVERSA .)
    LPAREN          reduce using rule 26 (especial -> INVERSA .)
    ID              reduce using rule 26 (especial -> INVERSA .)


state 74

    (27) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 27 (especial -> DETERMINANTE .)
    MUL             reduce using rule 27 (especial -> DETERMINANTE .)
    DIV             reduce using rule 27 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 27 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 27 (especial -> DETERMINANTE .)
    GT              reduce using rule 27 (especial -> DETERMINANTE .)
    LT              reduce using rule 27 (especial -> DETERMINANTE .)
    GTE             reduce using rule 27 (especial -> DETERMINANTE .)
    LTE             reduce using rule 27 (especial -> DETERMINANTE .)
    NE              reduce using rule 27 (especial -> DETERMINANTE .)
    AND             reduce using rule 27 (especial -> DETERMINANTE .)
    OR              reduce using rule 27 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 27 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 27 (especial -> DETERMINANTE .)
    TO              reduce using rule 27 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 27 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 27 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 27 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 27 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 27 (especial -> DETERMINANTE .)
    ID              reduce using rule 27 (especial -> DETERMINANTE .)


state 75

    (28) arr -> LBRACKET CTEI RBRACKET .
    (30) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (33) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    SEMICOLON       reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 28 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 98


state 76

    (29) arr -> LBRACKET exp RBRACKET .
    (31) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (32) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    SEMICOLON       reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 29 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 99


state 77

    (74) exp -> nexp OR . nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

    nexp                           shift and go to state 100
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 78

    (76) nexp -> compexp AND . compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

    compexp                        shift and go to state 101
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 79

    (79) compexp1 -> sumexp GT . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    sumexp                         shift and go to state 102
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 80

    (80) compexp1 -> sumexp LT . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    sumexp                         shift and go to state 103
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 81

    (81) compexp1 -> sumexp GTE . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    sumexp                         shift and go to state 104
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 82

    (82) compexp1 -> sumexp LTE . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    sumexp                         shift and go to state 105
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 83

    (83) compexp1 -> sumexp NE . sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    sumexp                         shift and go to state 106
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 84

    (78) compexp -> compexp1 sumexp .

    AND             reduce using rule 78 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 78 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 78 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 78 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 78 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 78 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 78 (compexp -> compexp1 sumexp .)


state 85

    (91) pexp -> CTEI .

    MUL             reduce using rule 91 (pexp -> CTEI .)
    DIV             reduce using rule 91 (pexp -> CTEI .)
    PLUS            reduce using rule 91 (pexp -> CTEI .)
    MINUS           reduce using rule 91 (pexp -> CTEI .)
    AND             reduce using rule 91 (pexp -> CTEI .)
    OR              reduce using rule 91 (pexp -> CTEI .)
    RBRACKET        reduce using rule 91 (pexp -> CTEI .)
    RPAREN          reduce using rule 91 (pexp -> CTEI .)
    SEMICOLON       reduce using rule 91 (pexp -> CTEI .)
    TO              reduce using rule 91 (pexp -> CTEI .)
    COMMA           reduce using rule 91 (pexp -> CTEI .)
    GT              reduce using rule 91 (pexp -> CTEI .)
    LT              reduce using rule 91 (pexp -> CTEI .)
    GTE             reduce using rule 91 (pexp -> CTEI .)
    LTE             reduce using rule 91 (pexp -> CTEI .)
    NE              reduce using rule 91 (pexp -> CTEI .)
    CTEI            reduce using rule 91 (pexp -> CTEI .)
    CTEF            reduce using rule 91 (pexp -> CTEI .)
    CTEC            reduce using rule 91 (pexp -> CTEI .)
    LPAREN          reduce using rule 91 (pexp -> CTEI .)
    ID              reduce using rule 91 (pexp -> CTEI .)


state 86

    (85) sumexp -> mulexp PLUS . mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    mulexp                         shift and go to state 107
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 87

    (86) sumexp -> mulexp MINUS . mulexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    mulexp                         shift and go to state 108
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 88

    (88) mulexp -> pexp MUL . pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    pexp                           shift and go to state 109
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 89

    (89) mulexp -> pexp DIV . pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)

  ! CTEI            [ reduce using rule 96 (empty -> .) ]
  ! CTEF            [ reduce using rule 96 (empty -> .) ]
  ! CTEC            [ reduce using rule 96 (empty -> .) ]
  ! LPAREN          [ reduce using rule 96 (empty -> .) ]
  ! ID              [ reduce using rule 96 (empty -> .) ]

    pexp                           shift and go to state 110
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 90

    (95) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 111


state 91

    (57) llamada -> ID LPAREN . exp RPAREN
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    exp                            shift and go to state 112
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 92

    (6) main -> MAIN LPAREN param RPAREN LCURLY . vars statement RCURLY END
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (96) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 96 (empty -> .)
    READ            reduce using rule 96 (empty -> .)
    PRINT           reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RCURLY          reduce using rule 96 (empty -> .)

    vars                           shift and go to state 113
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 93

    (55) param1 -> ID COMMA . param1
    (54) param1 -> . ID
    (55) param1 -> . ID COMMA param1
    (56) param1 -> . empty
    (96) empty -> .

    ID              shift and go to state 64
    RPAREN          reduce using rule 96 (empty -> .)

    param1                         shift and go to state 114
    empty                          shift and go to state 65

state 94

    (38) function1 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RCURLY

    RPAREN          shift and go to state 115


state 95

    (39) function2 -> ID LPAREN param . RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    RPAREN          shift and go to state 116


state 96

    (16) var1 -> ID arr COMMA var1 .

    SEMICOLON       reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    MUL             reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    DIV             reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    PLUS            reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    MINUS           reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    GT              reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    LT              reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    GTE             reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    LTE             reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    NE              reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    AND             reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    OR              reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    RBRACKET        reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    RPAREN          reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    TO              reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    COMMA           reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    CTEI            reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    CTEF            reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    CTEC            reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    LPAREN          reduce using rule 16 (var1 -> ID arr COMMA var1 .)
    ID              reduce using rule 16 (var1 -> ID arr COMMA var1 .)


state 97

    (17) var1 -> ID mat COMMA var1 .

    SEMICOLON       reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    MUL             reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    DIV             reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    PLUS            reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    MINUS           reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    GT              reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    LT              reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    GTE             reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    LTE             reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    NE              reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    AND             reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    OR              reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    RBRACKET        reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    RPAREN          reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    TO              reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    COMMA           reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    CTEI            reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    CTEF            reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    CTEC            reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    LPAREN          reduce using rule 17 (var1 -> ID mat COMMA var1 .)
    ID              reduce using rule 17 (var1 -> ID mat COMMA var1 .)


state 98

    (30) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 117
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    exp                            shift and go to state 118
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 99

    (31) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (32) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 120
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RBRACKET        reduce using rule 96 (empty -> .)

    exp                            shift and go to state 119
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 100

    (74) exp -> nexp OR nexp .

    RBRACKET        reduce using rule 74 (exp -> nexp OR nexp .)
    RPAREN          reduce using rule 74 (exp -> nexp OR nexp .)
    SEMICOLON       reduce using rule 74 (exp -> nexp OR nexp .)
    TO              reduce using rule 74 (exp -> nexp OR nexp .)
    COMMA           reduce using rule 74 (exp -> nexp OR nexp .)


state 101

    (76) nexp -> compexp AND compexp .

    OR              reduce using rule 76 (nexp -> compexp AND compexp .)
    RBRACKET        reduce using rule 76 (nexp -> compexp AND compexp .)
    RPAREN          reduce using rule 76 (nexp -> compexp AND compexp .)
    SEMICOLON       reduce using rule 76 (nexp -> compexp AND compexp .)
    TO              reduce using rule 76 (nexp -> compexp AND compexp .)
    COMMA           reduce using rule 76 (nexp -> compexp AND compexp .)


state 102

    (79) compexp1 -> sumexp GT sumexp .

    CTEI            reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    CTEF            reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    CTEC            reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    LPAREN          reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    ID              reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    PLUS            reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    MINUS           reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    MUL             reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    DIV             reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    AND             reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    OR              reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    RBRACKET        reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    RPAREN          reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    SEMICOLON       reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    TO              reduce using rule 79 (compexp1 -> sumexp GT sumexp .)
    COMMA           reduce using rule 79 (compexp1 -> sumexp GT sumexp .)


state 103

    (80) compexp1 -> sumexp LT sumexp .

    CTEI            reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    CTEF            reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    CTEC            reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    LPAREN          reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    ID              reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    PLUS            reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    MINUS           reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    MUL             reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    DIV             reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    AND             reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    OR              reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    RBRACKET        reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    RPAREN          reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    SEMICOLON       reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    TO              reduce using rule 80 (compexp1 -> sumexp LT sumexp .)
    COMMA           reduce using rule 80 (compexp1 -> sumexp LT sumexp .)


state 104

    (81) compexp1 -> sumexp GTE sumexp .

    CTEI            reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    CTEF            reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    CTEC            reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    LPAREN          reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    ID              reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    PLUS            reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    MINUS           reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    MUL             reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    DIV             reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    AND             reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    OR              reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    RBRACKET        reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    RPAREN          reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    SEMICOLON       reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    TO              reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)
    COMMA           reduce using rule 81 (compexp1 -> sumexp GTE sumexp .)


state 105

    (82) compexp1 -> sumexp LTE sumexp .

    CTEI            reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    CTEF            reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    CTEC            reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    LPAREN          reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    ID              reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    PLUS            reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    MINUS           reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    MUL             reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    DIV             reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    AND             reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    OR              reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    RBRACKET        reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    RPAREN          reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    SEMICOLON       reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    TO              reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)
    COMMA           reduce using rule 82 (compexp1 -> sumexp LTE sumexp .)


state 106

    (83) compexp1 -> sumexp NE sumexp .

    CTEI            reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    CTEF            reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    CTEC            reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    LPAREN          reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    ID              reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    PLUS            reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    MINUS           reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    MUL             reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    DIV             reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    AND             reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    OR              reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    RBRACKET        reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    RPAREN          reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    SEMICOLON       reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    TO              reduce using rule 83 (compexp1 -> sumexp NE sumexp .)
    COMMA           reduce using rule 83 (compexp1 -> sumexp NE sumexp .)


state 107

    (85) sumexp -> mulexp PLUS mulexp .

    GT              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    LT              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    GTE             reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    LTE             reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    NE              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    AND             reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    OR              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    RBRACKET        reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    RPAREN          reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    SEMICOLON       reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    TO              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    COMMA           reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    CTEI            reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    CTEF            reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    CTEC            reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    LPAREN          reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    ID              reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    PLUS            reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    MINUS           reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    MUL             reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)
    DIV             reduce using rule 85 (sumexp -> mulexp PLUS mulexp .)


state 108

    (86) sumexp -> mulexp MINUS mulexp .

    GT              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    LT              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    GTE             reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    LTE             reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    NE              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    AND             reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    OR              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    RBRACKET        reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    RPAREN          reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    SEMICOLON       reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    TO              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    COMMA           reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    CTEI            reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    CTEF            reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    CTEC            reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    LPAREN          reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    ID              reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    PLUS            reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    MINUS           reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    MUL             reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)
    DIV             reduce using rule 86 (sumexp -> mulexp MINUS mulexp .)


state 109

    (88) mulexp -> pexp MUL pexp .

    PLUS            reduce using rule 88 (mulexp -> pexp MUL pexp .)
    MINUS           reduce using rule 88 (mulexp -> pexp MUL pexp .)
    GT              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    LT              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    GTE             reduce using rule 88 (mulexp -> pexp MUL pexp .)
    LTE             reduce using rule 88 (mulexp -> pexp MUL pexp .)
    NE              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    AND             reduce using rule 88 (mulexp -> pexp MUL pexp .)
    OR              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    RBRACKET        reduce using rule 88 (mulexp -> pexp MUL pexp .)
    RPAREN          reduce using rule 88 (mulexp -> pexp MUL pexp .)
    SEMICOLON       reduce using rule 88 (mulexp -> pexp MUL pexp .)
    TO              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    COMMA           reduce using rule 88 (mulexp -> pexp MUL pexp .)
    CTEI            reduce using rule 88 (mulexp -> pexp MUL pexp .)
    CTEF            reduce using rule 88 (mulexp -> pexp MUL pexp .)
    CTEC            reduce using rule 88 (mulexp -> pexp MUL pexp .)
    LPAREN          reduce using rule 88 (mulexp -> pexp MUL pexp .)
    ID              reduce using rule 88 (mulexp -> pexp MUL pexp .)
    MUL             reduce using rule 88 (mulexp -> pexp MUL pexp .)
    DIV             reduce using rule 88 (mulexp -> pexp MUL pexp .)


state 110

    (89) mulexp -> pexp DIV pexp .

    PLUS            reduce using rule 89 (mulexp -> pexp DIV pexp .)
    MINUS           reduce using rule 89 (mulexp -> pexp DIV pexp .)
    GT              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    LT              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    GTE             reduce using rule 89 (mulexp -> pexp DIV pexp .)
    LTE             reduce using rule 89 (mulexp -> pexp DIV pexp .)
    NE              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    AND             reduce using rule 89 (mulexp -> pexp DIV pexp .)
    OR              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    RBRACKET        reduce using rule 89 (mulexp -> pexp DIV pexp .)
    RPAREN          reduce using rule 89 (mulexp -> pexp DIV pexp .)
    SEMICOLON       reduce using rule 89 (mulexp -> pexp DIV pexp .)
    TO              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    COMMA           reduce using rule 89 (mulexp -> pexp DIV pexp .)
    CTEI            reduce using rule 89 (mulexp -> pexp DIV pexp .)
    CTEF            reduce using rule 89 (mulexp -> pexp DIV pexp .)
    CTEC            reduce using rule 89 (mulexp -> pexp DIV pexp .)
    LPAREN          reduce using rule 89 (mulexp -> pexp DIV pexp .)
    ID              reduce using rule 89 (mulexp -> pexp DIV pexp .)
    MUL             reduce using rule 89 (mulexp -> pexp DIV pexp .)
    DIV             reduce using rule 89 (mulexp -> pexp DIV pexp .)


state 111

    (95) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 95 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 95 (pexp -> LPAREN exp RPAREN .)


state 112

    (57) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 121


state 113

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars . statement RCURLY END
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 122
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 114

    (55) param1 -> ID COMMA param1 .

    RPAREN          reduce using rule 55 (param1 -> ID COMMA param1 .)


state 115

    (38) function1 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 138


state 116

    (39) function2 -> ID LPAREN param RPAREN . SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    SEMICOLON       shift and go to state 139


state 117

    (30) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (91) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 140
    MUL             reduce using rule 91 (pexp -> CTEI .)
    DIV             reduce using rule 91 (pexp -> CTEI .)
    PLUS            reduce using rule 91 (pexp -> CTEI .)
    MINUS           reduce using rule 91 (pexp -> CTEI .)
    GT              reduce using rule 91 (pexp -> CTEI .)
    LT              reduce using rule 91 (pexp -> CTEI .)
    GTE             reduce using rule 91 (pexp -> CTEI .)
    LTE             reduce using rule 91 (pexp -> CTEI .)
    NE              reduce using rule 91 (pexp -> CTEI .)
    AND             reduce using rule 91 (pexp -> CTEI .)
    OR              reduce using rule 91 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 91 (pexp -> CTEI .) ]


state 118

    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 141


state 119

    (31) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 142


state 120

    (32) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (91) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 143
    MUL             reduce using rule 91 (pexp -> CTEI .)
    DIV             reduce using rule 91 (pexp -> CTEI .)
    PLUS            reduce using rule 91 (pexp -> CTEI .)
    MINUS           reduce using rule 91 (pexp -> CTEI .)
    GT              reduce using rule 91 (pexp -> CTEI .)
    LT              reduce using rule 91 (pexp -> CTEI .)
    GTE             reduce using rule 91 (pexp -> CTEI .)
    LTE             reduce using rule 91 (pexp -> CTEI .)
    NE              reduce using rule 91 (pexp -> CTEI .)
    AND             reduce using rule 91 (pexp -> CTEI .)
    OR              reduce using rule 91 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 91 (pexp -> CTEI .) ]


state 121

    (57) llamada -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 57 (llamada -> ID LPAREN exp RPAREN .)


state 122

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 144


state 123

    (40) statement -> statement1 . statement
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement1                     shift and go to state 123
    statement                      shift and go to state 145
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 124

    (41) statement -> empty .

    RCURLY          reduce using rule 41 (statement -> empty .)
    RETURN          reduce using rule 41 (statement -> empty .)


state 125

    (42) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 146


state 126

    (43) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 147


state 127

    (44) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 148


state 128

    (45) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 149


state 129

    (46) statement1 -> for .

    ID              reduce using rule 46 (statement1 -> for .)
    READ            reduce using rule 46 (statement1 -> for .)
    PRINT           reduce using rule 46 (statement1 -> for .)
    FOR             reduce using rule 46 (statement1 -> for .)
    IF              reduce using rule 46 (statement1 -> for .)
    WHILE           reduce using rule 46 (statement1 -> for .)
    RCURLY          reduce using rule 46 (statement1 -> for .)
    RETURN          reduce using rule 46 (statement1 -> for .)


state 130

    (47) statement1 -> if .

    ID              reduce using rule 47 (statement1 -> if .)
    READ            reduce using rule 47 (statement1 -> if .)
    PRINT           reduce using rule 47 (statement1 -> if .)
    FOR             reduce using rule 47 (statement1 -> if .)
    IF              reduce using rule 47 (statement1 -> if .)
    WHILE           reduce using rule 47 (statement1 -> if .)
    RCURLY          reduce using rule 47 (statement1 -> if .)
    RETURN          reduce using rule 47 (statement1 -> if .)


state 131

    (48) statement1 -> while .

    ID              reduce using rule 48 (statement1 -> while .)
    READ            reduce using rule 48 (statement1 -> while .)
    PRINT           reduce using rule 48 (statement1 -> while .)
    FOR             reduce using rule 48 (statement1 -> while .)
    IF              reduce using rule 48 (statement1 -> while .)
    WHILE           reduce using rule 48 (statement1 -> while .)
    RCURLY          reduce using rule 48 (statement1 -> while .)
    RETURN          reduce using rule 48 (statement1 -> while .)


state 132

    (49) asignacion -> ID . EQUALS exp
    (50) asignacion -> ID . arr EQUALS exp
    (51) asignacion -> ID . mat EQUALS exp
    (57) llamada -> ID . LPAREN exp RPAREN
    (28) arr -> . LBRACKET CTEI RBRACKET
    (29) arr -> . LBRACKET exp RBRACKET
    (30) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 150
    LPAREN          shift and go to state 91
    LBRACKET        shift and go to state 34

    arr                            shift and go to state 151
    mat                            shift and go to state 152

state 133

    (72) lectura -> READ . LPAREN var1 RPAREN

    LPAREN          shift and go to state 153


state 134

    (65) escritura -> PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 154


state 135

    (62) for -> FOR . LPAREN for1 RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 155


state 136

    (58) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY else

    LPAREN          shift and go to state 156


state 137

    (64) while -> WHILE . LPAREN exp RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 157


state 138

    (38) function1 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 158


state 139

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON . LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LCURLY          shift and go to state 159


state 140

    (30) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    SEMICOLON       reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 30 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 141

    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    SEMICOLON       reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 142

    (31) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    SEMICOLON       reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMMA           reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 31 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 143

    (32) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    SEMICOLON       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMMA           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 144

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 160


state 145

    (40) statement -> statement1 statement .

    RCURLY          reduce using rule 40 (statement -> statement1 statement .)
    RETURN          reduce using rule 40 (statement -> statement1 statement .)


state 146

    (42) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 42 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 42 (statement1 -> asignacion SEMICOLON .)


state 147

    (43) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 43 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 43 (statement1 -> llamada SEMICOLON .)


state 148

    (44) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 44 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 44 (statement1 -> lectura SEMICOLON .)


state 149

    (45) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 45 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 45 (statement1 -> escritura SEMICOLON .)


state 150

    (49) asignacion -> ID EQUALS . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)

    exp                            shift and go to state 161
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 151

    (50) asignacion -> ID arr . EQUALS exp

    EQUALS          shift and go to state 162


state 152

    (51) asignacion -> ID mat . EQUALS exp

    EQUALS          shift and go to state 163


state 153

    (72) lectura -> READ LPAREN . var1 RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (96) empty -> .

    ID              shift and go to state 32
    RPAREN          reduce using rule 96 (empty -> .)

    var1                           shift and go to state 164
    empty                          shift and go to state 33

state 154

    (65) escritura -> PRINT LPAREN . escritura1 RPAREN
    (66) escritura1 -> . escritura2 COMMA escritura2
    (67) escritura1 -> . escritura2
    (68) escritura2 -> . CTESTRING
    (69) escritura2 -> . CTEI
    (70) escritura2 -> . CTEF
    (71) escritura2 -> . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTESTRING       shift and go to state 167
    CTEI            shift and go to state 168
    CTEF            shift and go to state 169
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    COMMA           reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    escritura1                     shift and go to state 165
    escritura2                     shift and go to state 166
    exp                            shift and go to state 170
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 155

    (62) for -> FOR LPAREN . for1 RPAREN LCURLY statement RCURLY
    (63) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 172

    for1                           shift and go to state 171

state 156

    (58) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY
    (59) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY else
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    exp                            shift and go to state 173
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 157

    (64) while -> WHILE LPAREN . exp RPAREN LCURLY statement RCURLY
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    exp                            shift and go to state 174
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 158

    (38) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (96) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 96 (empty -> .)
    READ            reduce using rule 96 (empty -> .)
    PRINT           reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RCURLY          reduce using rule 96 (empty -> .)

    vars                           shift and go to state 175
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 159

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY . vars statement RETURN exp SEMICOLON RCURLY
    (10) vars -> . var
    (11) vars -> . empty
    (12) var -> . VAR var2 var2
    (96) empty -> .

    VAR             shift and go to state 11
    ID              reduce using rule 96 (empty -> .)
    READ            reduce using rule 96 (empty -> .)
    PRINT           reduce using rule 96 (empty -> .)
    FOR             reduce using rule 96 (empty -> .)
    IF              reduce using rule 96 (empty -> .)
    WHILE           reduce using rule 96 (empty -> .)
    RETURN          reduce using rule 96 (empty -> .)

    vars                           shift and go to state 176
    var                            shift and go to state 8
    empty                          shift and go to state 9

state 160

    (6) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 6 (main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .)


state 161

    (49) asignacion -> ID EQUALS exp .

    SEMICOLON       reduce using rule 49 (asignacion -> ID EQUALS exp .)
    TO              reduce using rule 49 (asignacion -> ID EQUALS exp .)


state 162

    (50) asignacion -> ID arr EQUALS . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)

    exp                            shift and go to state 177
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 163

    (51) asignacion -> ID mat EQUALS . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)
    TO              reduce using rule 96 (empty -> .)

    exp                            shift and go to state 178
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 164

    (72) lectura -> READ LPAREN var1 . RPAREN

    RPAREN          shift and go to state 179


state 165

    (65) escritura -> PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 180


state 166

    (66) escritura1 -> escritura2 . COMMA escritura2
    (67) escritura1 -> escritura2 .

    COMMA           shift and go to state 181
    RPAREN          reduce using rule 67 (escritura1 -> escritura2 .)


state 167

    (68) escritura2 -> CTESTRING .

    COMMA           reduce using rule 68 (escritura2 -> CTESTRING .)
    RPAREN          reduce using rule 68 (escritura2 -> CTESTRING .)


state 168

    (69) escritura2 -> CTEI .
    (91) pexp -> CTEI .

  ! reduce/reduce conflict for COMMA resolved using rule 69 (escritura2 -> CTEI .)
  ! reduce/reduce conflict for RPAREN resolved using rule 69 (escritura2 -> CTEI .)
    COMMA           reduce using rule 69 (escritura2 -> CTEI .)
    RPAREN          reduce using rule 69 (escritura2 -> CTEI .)
    MUL             reduce using rule 91 (pexp -> CTEI .)
    DIV             reduce using rule 91 (pexp -> CTEI .)
    PLUS            reduce using rule 91 (pexp -> CTEI .)
    MINUS           reduce using rule 91 (pexp -> CTEI .)
    GT              reduce using rule 91 (pexp -> CTEI .)
    LT              reduce using rule 91 (pexp -> CTEI .)
    GTE             reduce using rule 91 (pexp -> CTEI .)
    LTE             reduce using rule 91 (pexp -> CTEI .)
    NE              reduce using rule 91 (pexp -> CTEI .)
    AND             reduce using rule 91 (pexp -> CTEI .)
    OR              reduce using rule 91 (pexp -> CTEI .)

  ! COMMA           [ reduce using rule 91 (pexp -> CTEI .) ]
  ! RPAREN          [ reduce using rule 91 (pexp -> CTEI .) ]


state 169

    (70) escritura2 -> CTEF .
    (92) pexp -> CTEF .

  ! reduce/reduce conflict for COMMA resolved using rule 70 (escritura2 -> CTEF .)
  ! reduce/reduce conflict for RPAREN resolved using rule 70 (escritura2 -> CTEF .)
    COMMA           reduce using rule 70 (escritura2 -> CTEF .)
    RPAREN          reduce using rule 70 (escritura2 -> CTEF .)
    MUL             reduce using rule 92 (pexp -> CTEF .)
    DIV             reduce using rule 92 (pexp -> CTEF .)
    PLUS            reduce using rule 92 (pexp -> CTEF .)
    MINUS           reduce using rule 92 (pexp -> CTEF .)
    GT              reduce using rule 92 (pexp -> CTEF .)
    LT              reduce using rule 92 (pexp -> CTEF .)
    GTE             reduce using rule 92 (pexp -> CTEF .)
    LTE             reduce using rule 92 (pexp -> CTEF .)
    NE              reduce using rule 92 (pexp -> CTEF .)
    AND             reduce using rule 92 (pexp -> CTEF .)
    OR              reduce using rule 92 (pexp -> CTEF .)

  ! COMMA           [ reduce using rule 92 (pexp -> CTEF .) ]
  ! RPAREN          [ reduce using rule 92 (pexp -> CTEF .) ]


state 170

    (71) escritura2 -> exp .

    COMMA           reduce using rule 71 (escritura2 -> exp .)
    RPAREN          reduce using rule 71 (escritura2 -> exp .)


state 171

    (62) for -> FOR LPAREN for1 . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 182


state 172

    (63) for1 -> FROM . asignacion TO exp
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp

    ID              shift and go to state 184

    asignacion                     shift and go to state 183

state 173

    (58) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY
    (59) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY else

    RPAREN          shift and go to state 185


state 174

    (64) while -> WHILE LPAREN exp . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 186


state 175

    (38) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 187
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 176

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars . statement RETURN exp SEMICOLON RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RETURN          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 188
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 177

    (50) asignacion -> ID arr EQUALS exp .

    SEMICOLON       reduce using rule 50 (asignacion -> ID arr EQUALS exp .)
    TO              reduce using rule 50 (asignacion -> ID arr EQUALS exp .)


state 178

    (51) asignacion -> ID mat EQUALS exp .

    SEMICOLON       reduce using rule 51 (asignacion -> ID mat EQUALS exp .)
    TO              reduce using rule 51 (asignacion -> ID mat EQUALS exp .)


state 179

    (72) lectura -> READ LPAREN var1 RPAREN .

    SEMICOLON       reduce using rule 72 (lectura -> READ LPAREN var1 RPAREN .)


state 180

    (65) escritura -> PRINT LPAREN escritura1 RPAREN .

    SEMICOLON       reduce using rule 65 (escritura -> PRINT LPAREN escritura1 RPAREN .)


state 181

    (66) escritura1 -> escritura2 COMMA . escritura2
    (68) escritura2 -> . CTESTRING
    (69) escritura2 -> . CTEI
    (70) escritura2 -> . CTEF
    (71) escritura2 -> . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTESTRING       shift and go to state 167
    CTEI            shift and go to state 168
    CTEF            shift and go to state 169
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    escritura2                     shift and go to state 189
    exp                            shift and go to state 170
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 182

    (62) for -> FOR LPAREN for1 RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 190


state 183

    (63) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 191


state 184

    (49) asignacion -> ID . EQUALS exp
    (50) asignacion -> ID . arr EQUALS exp
    (51) asignacion -> ID . mat EQUALS exp
    (28) arr -> . LBRACKET CTEI RBRACKET
    (29) arr -> . LBRACKET exp RBRACKET
    (30) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (31) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 150
    LBRACKET        shift and go to state 34

    arr                            shift and go to state 151
    mat                            shift and go to state 152

state 185

    (58) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY
    (59) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY else

    LCURLY          shift and go to state 192


state 186

    (64) while -> WHILE LPAREN exp RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 193


state 187

    (38) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 194


state 188

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement . RETURN exp SEMICOLON RCURLY

    RETURN          shift and go to state 195


state 189

    (66) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 66 (escritura1 -> escritura2 COMMA escritura2 .)


state 190

    (62) for -> FOR LPAREN for1 RPAREN LCURLY . statement RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 196
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 191

    (63) for1 -> FROM asignacion TO . exp
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    RPAREN          reduce using rule 96 (empty -> .)

    exp                            shift and go to state 197
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 192

    (58) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY
    (59) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY else
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 198
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 193

    (64) while -> WHILE LPAREN exp RPAREN LCURLY . statement RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 199
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 194

    (38) function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 38 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 38 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 38 (function1 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 195

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN . exp SEMICOLON RCURLY
    (73) exp -> . nexp
    (74) exp -> . nexp OR nexp
    (75) nexp -> . compexp
    (76) nexp -> . compexp AND compexp
    (77) compexp -> . sumexp
    (78) compexp -> . compexp1 sumexp
    (84) sumexp -> . mulexp
    (85) sumexp -> . mulexp PLUS mulexp
    (86) sumexp -> . mulexp MINUS mulexp
    (79) compexp1 -> . sumexp GT sumexp
    (80) compexp1 -> . sumexp LT sumexp
    (81) compexp1 -> . sumexp GTE sumexp
    (82) compexp1 -> . sumexp LTE sumexp
    (83) compexp1 -> . sumexp NE sumexp
    (87) mulexp -> . pexp
    (88) mulexp -> . pexp MUL pexp
    (89) mulexp -> . pexp DIV pexp
    (90) pexp -> . var1
    (91) pexp -> . CTEI
    (92) pexp -> . CTEF
    (93) pexp -> . CTEC
    (94) pexp -> . llamada
    (95) pexp -> . LPAREN exp RPAREN
    (13) var1 -> . ID
    (14) var1 -> . ID COMMA var1
    (15) var1 -> . ID arr
    (16) var1 -> . ID arr COMMA var1
    (17) var1 -> . ID mat COMMA var1
    (18) var1 -> . ID mat
    (19) var1 -> . ID mat especial
    (20) var1 -> . empty
    (57) llamada -> . ID LPAREN exp RPAREN
    (96) empty -> .

    CTEI            shift and go to state 85
    CTEF            shift and go to state 57
    CTEC            shift and go to state 58
    LPAREN          shift and go to state 60
    ID              shift and go to state 61
    MUL             reduce using rule 96 (empty -> .)
    DIV             reduce using rule 96 (empty -> .)
    PLUS            reduce using rule 96 (empty -> .)
    MINUS           reduce using rule 96 (empty -> .)
    GT              reduce using rule 96 (empty -> .)
    LT              reduce using rule 96 (empty -> .)
    GTE             reduce using rule 96 (empty -> .)
    LTE             reduce using rule 96 (empty -> .)
    NE              reduce using rule 96 (empty -> .)
    AND             reduce using rule 96 (empty -> .)
    OR              reduce using rule 96 (empty -> .)
    SEMICOLON       reduce using rule 96 (empty -> .)

    exp                            shift and go to state 200
    nexp                           shift and go to state 50
    compexp                        shift and go to state 51
    sumexp                         shift and go to state 52
    compexp1                       shift and go to state 53
    mulexp                         shift and go to state 54
    pexp                           shift and go to state 55
    var1                           shift and go to state 56
    llamada                        shift and go to state 59
    empty                          shift and go to state 33

state 196

    (62) for -> FOR LPAREN for1 RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 201


state 197

    (63) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 63 (for1 -> FROM asignacion TO exp .)


state 198

    (58) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY
    (59) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY else

    RCURLY          shift and go to state 202


state 199

    (64) while -> WHILE LPAREN exp RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 203


state 200

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 204


state 201

    (62) for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 62 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)


state 202

    (58) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .
    (59) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY . else
    (60) else -> . ELSE LCURLY statement RCURLY
    (61) else -> . empty
    (96) empty -> .

  ! reduce/reduce conflict for ID resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for READ resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for PRINT resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for FOR resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for IF resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for WHILE resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RCURLY resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RETURN resolved using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ID              reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 58 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ELSE            shift and go to state 206

  ! ID              [ reduce using rule 96 (empty -> .) ]
  ! READ            [ reduce using rule 96 (empty -> .) ]
  ! PRINT           [ reduce using rule 96 (empty -> .) ]
  ! FOR             [ reduce using rule 96 (empty -> .) ]
  ! IF              [ reduce using rule 96 (empty -> .) ]
  ! WHILE           [ reduce using rule 96 (empty -> .) ]
  ! RCURLY          [ reduce using rule 96 (empty -> .) ]
  ! RETURN          [ reduce using rule 96 (empty -> .) ]

    else                           shift and go to state 205
    empty                          shift and go to state 207

state 203

    (64) while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 64 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)


state 204

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON . RCURLY

    RCURLY          shift and go to state 208


state 205

    (59) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .

    ID              reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    READ            reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    PRINT           reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    FOR             reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    IF              reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    WHILE           reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RCURLY          reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RETURN          reduce using rule 59 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)


state 206

    (60) else -> ELSE . LCURLY statement RCURLY

    LCURLY          shift and go to state 209


state 207

    (61) else -> empty .

    ID              reduce using rule 61 (else -> empty .)
    READ            reduce using rule 61 (else -> empty .)
    PRINT           reduce using rule 61 (else -> empty .)
    FOR             reduce using rule 61 (else -> empty .)
    IF              reduce using rule 61 (else -> empty .)
    WHILE           reduce using rule 61 (else -> empty .)
    RCURLY          reduce using rule 61 (else -> empty .)
    RETURN          reduce using rule 61 (else -> empty .)


state 208

    (39) function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .

    FUN             reduce using rule 39 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 39 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    $end            reduce using rule 39 (function2 -> ID LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)


state 209

    (60) else -> ELSE LCURLY . statement RCURLY
    (40) statement -> . statement1 statement
    (41) statement -> . empty
    (42) statement1 -> . asignacion SEMICOLON
    (43) statement1 -> . llamada SEMICOLON
    (44) statement1 -> . lectura SEMICOLON
    (45) statement1 -> . escritura SEMICOLON
    (46) statement1 -> . for
    (47) statement1 -> . if
    (48) statement1 -> . while
    (96) empty -> .
    (49) asignacion -> . ID EQUALS exp
    (50) asignacion -> . ID arr EQUALS exp
    (51) asignacion -> . ID mat EQUALS exp
    (57) llamada -> . ID LPAREN exp RPAREN
    (72) lectura -> . READ LPAREN var1 RPAREN
    (65) escritura -> . PRINT LPAREN escritura1 RPAREN
    (62) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (58) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (59) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (64) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 96 (empty -> .)
    ID              shift and go to state 132
    READ            shift and go to state 133
    PRINT           shift and go to state 134
    FOR             shift and go to state 135
    IF              shift and go to state 136
    WHILE           shift and go to state 137

    statement                      shift and go to state 210
    statement1                     shift and go to state 123
    empty                          shift and go to state 124
    asignacion                     shift and go to state 125
    llamada                        shift and go to state 126
    lectura                        shift and go to state 127
    escritura                      shift and go to state 128
    for                            shift and go to state 129
    if                             shift and go to state 130
    while                          shift and go to state 131

state 210

    (60) else -> ELSE LCURLY statement . RCURLY

    RCURLY          shift and go to state 211


state 211

    (60) else -> ELSE LCURLY statement RCURLY .

    ID              reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    READ            reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    PRINT           reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    FOR             reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    IF              reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    WHILE           reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    RCURLY          reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)
    RETURN          reduce using rule 60 (else -> ELSE LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 4 resolved as shift
WARNING: shift/reduce conflict for INT in state 11 resolved as shift
WARNING: shift/reduce conflict for FLOAT in state 11 resolved as shift
WARNING: shift/reduce conflict for CHAR in state 11 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 32 resolved as shift
WARNING: shift/reduce conflict for ID in state 45 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 46 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 47 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 48 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 54 resolved as shift
WARNING: shift/reduce conflict for MUL in state 55 resolved as shift
WARNING: shift/reduce conflict for DIV in state 55 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 61 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 61 resolved as shift
WARNING: shift/reduce conflict for ID in state 69 resolved as shift
WARNING: shift/reduce conflict for ID in state 70 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 79 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 79 resolved as shift
WARNING: shift/reduce conflict for ID in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 80 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 80 resolved as shift
WARNING: shift/reduce conflict for ID in state 80 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 81 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 81 resolved as shift
WARNING: shift/reduce conflict for ID in state 81 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 82 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for ID in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for ID in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 86 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 86 resolved as shift
WARNING: shift/reduce conflict for ID in state 86 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 87 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 87 resolved as shift
WARNING: shift/reduce conflict for ID in state 87 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 88 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 88 resolved as shift
WARNING: shift/reduce conflict for ID in state 88 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 89 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 89 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 89 resolved as shift
WARNING: shift/reduce conflict for ID in state 89 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 117 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 120 resolved as shift
WARNING: reduce/reduce conflict in state 168 resolved using rule (escritura2 -> CTEI)
WARNING: rejected rule (pexp -> CTEI) in state 168
WARNING: reduce/reduce conflict in state 169 resolved using rule (escritura2 -> CTEF)
WARNING: rejected rule (pexp -> CTEF) in state 169
WARNING: reduce/reduce conflict in state 202 resolved using rule (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY)
WARNING: rejected rule (empty -> <empty>) in state 202
