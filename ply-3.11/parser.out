Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars quadMain modules programa2
Rule 4     programa1 -> vars quadMain modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main_end main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     quadMain -> <empty>
Rule 9     main_end -> <empty>
Rule 10    tipo -> INT guardaTipoVar
Rule 11    tipo -> FLOAT guardaTipoVar
Rule 12    tipo -> CHAR guardaTipoVar
Rule 13    guardaTipoVar -> <empty>
Rule 14    vars -> var
Rule 15    vars -> empty
Rule 16    var -> VAR var2
Rule 17    var1 -> ID
Rule 18    var1 -> ID COMMA var1 addV
Rule 19    var1 -> ID arr
Rule 20    var1 -> ID arr COMMA var1 addV
Rule 21    var1 -> ID mat COMMA var1 addV
Rule 22    var1 -> ID mat
Rule 23    var1 -> ID mat especial
Rule 24    var1 -> empty
Rule 25    addV -> <empty>
Rule 26    var2 -> var2 tipo var1 SEMICOLON addV
Rule 27    var2 -> empty
Rule 28    especial -> TRANSPUESTA
Rule 29    especial -> INVERSA
Rule 30    especial -> DETERMINANTE
Rule 31    arr -> LBRACKET CTEI RBRACKET
Rule 32    arr -> LBRACKET exp RBRACKET
Rule 33    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 34    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 35    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 36    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 37    modules -> function modules
Rule 38    modules -> empty
Rule 39    save_fun -> <empty>
Rule 40    function -> FUN VOID function1
Rule 41    function -> FUN INT function2
Rule 42    function -> FUN CHAR function2
Rule 43    function -> FUN FLOAT function2
Rule 44    function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
Rule 45    function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
Rule 46    fun_goto -> <empty>
Rule 47    end_func -> <empty>
Rule 48    operadorReturn -> <empty>
Rule 49    quad_return -> <empty>
Rule 50    statement -> statement1 statement
Rule 51    statement -> empty
Rule 52    statement1 -> asignacion SEMICOLON
Rule 53    statement1 -> llamada SEMICOLON
Rule 54    statement1 -> lectura SEMICOLON
Rule 55    statement1 -> escritura SEMICOLON
Rule 56    statement1 -> for
Rule 57    statement1 -> if
Rule 58    statement1 -> while
Rule 59    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 60    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 61    asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 62    genera_quad_asignacion -> <empty>
Rule 63    addOperadorName -> <empty>
Rule 64    param1 -> ID addV
Rule 65    param1 -> ID COMMA var1 addV
Rule 66    param1 -> ID arr
Rule 67    param1 -> ID arr COMMA var1 addV
Rule 68    param1 -> ID mat COMMA var1 addV
Rule 69    param1 -> ID mat
Rule 70    param1 -> ID mat especial
Rule 71    param1 -> empty
Rule 72    addParam -> <empty>
Rule 73    param2 -> param2 tipo param1 addV addParam
Rule 74    param2 -> empty
Rule 75    llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
Rule 76    aux_exp -> exp
Rule 77    aux_exp -> exp quad_param COMMA aux_exp quad_param
Rule 78    aux_exp -> empty
Rule 79    llena_endproc -> <empty>
Rule 80    era_call -> <empty>
Rule 81    quad_param -> <empty>
Rule 82    gosub_quad -> <empty>
Rule 83    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 84    else -> ELSE else_quad LCURLY statement RCURLY
Rule 85    else -> empty
Rule 86    for_op -> <empty>
Rule 87    for_quad -> <empty>
Rule 88    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
Rule 89    for1 -> FROM asignacion TO exp
Rule 90    loop_end -> <empty>
Rule 91    for_end -> <empty>
Rule 92    while_quad -> <empty>
Rule 93    while_op -> <empty>
Rule 94    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
Rule 95    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 96    escritura1 -> escritura2 COMMA escritura2
Rule 97    escritura1 -> escritura2
Rule 98    escritura2 -> COMILLA CTESTRING COMILLA
Rule 99    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 100   escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 101   escritura2 -> exp
Rule 102   lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN
Rule 103   exp -> nexp
Rule 104   exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 105   genera_quad_or -> <empty>
Rule 106   genera_quad_and -> <empty>
Rule 107   compare_quad -> <empty>
Rule 108   if_quad -> <empty>
Rule 109   end_if -> <empty>
Rule 110   else_quad -> <empty>
Rule 111   nexp -> compexp
Rule 112   nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 113   compexp -> sumexp
Rule 114   compexp -> compexp1 sumexp
Rule 115   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 116   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 117   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 118   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 119   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 120   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 121   sumexp -> mulexp
Rule 122   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 123   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 124   genera_sum_quad -> <empty>
Rule 125   genera_mul_quad -> <empty>
Rule 126   operadorPrint -> <empty>
Rule 127   operatorPrintQuad -> <empty>
Rule 128   operatorRead -> <empty>
Rule 129   operatorReadQuad -> <empty>
Rule 130   mulexp -> pexp
Rule 131   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 132   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 133   pexp -> var1 saveId
Rule 134   pexp -> CTEI saveCTE
Rule 135   pexp -> CTEF saveCTE
Rule 136   pexp -> CTEC saveCTE
Rule 137   pexp -> CTESTRING saveCTE
Rule 138   pexp -> llamada
Rule 139   pexp -> LPAREN exp RPAREN
Rule 140   empty -> <empty>
Rule 141   saveId -> <empty>
Rule 142   saveId2 -> <empty>
Rule 143   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 112
CHAR                 : 12 42
COMILLA              : 98 98
COMMA                : 18 20 21 65 67 68 77 96
COMPARE              : 120
CTEC                 : 136
CTEF                 : 100 135
CTEI                 : 31 33 33 35 36 99 134
CTESTRING            : 98 137
DETERMINANTE         : 30
DIV                  : 132
ELSE                 : 84
END                  : 7
EQUALS               : 59 60 61
FLOAT                : 11 43
FOR                  : 88
FROM                 : 89
FUN                  : 40 41 42 43
GT                   : 115
GTE                  : 117
ID                   : 1 17 18 19 20 21 22 23 44 45 59 60 61 64 65 66 67 68 69 70 75
IF                   : 83
INT                  : 10 41
INVERSA              : 29
LBRACKET             : 31 32 33 33 34 34 35 35 36 36
LCURLY               : 7 44 45 83 84 88 94
LPAREN               : 7 44 45 75 83 88 94 95 102 139
LT                   : 116
LTE                  : 118
MAIN                 : 7
MINUS                : 123
MUL                  : 131
NE                   : 119
OR                   : 104
PLUS                 : 122
PRINT                : 95
PROGRAM              : 1
RBRACKET             : 31 32 33 33 34 34 35 35 36 36
RCURLY               : 7 44 45 83 84 88 94
READ                 : 102
RETURN               : 45
RPAREN               : 7 44 45 75 83 88 94 95 102 139
SEMICOLON            : 1 26 44 45 45 52 53 54 55
TO                   : 89
TRANSPUESTA          : 28
VAR                  : 16
VOID                 : 40
WHILE                : 94
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 59 60 61 104 112 115 116 117 118 119 120 122 123 131 132
addP                 : 1
addParam             : 73
addV                 : 18 20 21 26 64 65 67 68 73
arr                  : 19 20 60 66 67
asignacion           : 52 89
aux_exp              : 75 77
compare_quad         : 115 116 117 118 119 120
compexp              : 111 112 112
compexp1             : 114
else                 : 83
else_quad            : 84
empty                : 15 24 27 38 51 71 74 78 85
end_func             : 44 45
end_if               : 83
era_call             : 75
escritura            : 55
escritura1           : 95
escritura2           : 96 96 97
especial             : 23 70
exp                  : 32 34 34 35 36 45 59 60 61 76 77 83 89 94 101 102 139
for                  : 56
for1                 : 88
for_end              : 88
for_op               : 88
for_quad             : 88
fun_goto             : 44 45
function             : 37
function1            : 40
function2            : 41 42 43
genera_mul_quad      : 131 132
genera_quad_and      : 112
genera_quad_asignacion : 59 60 61
genera_quad_or       : 104
genera_sum_quad      : 122 123
gosub_quad           : 75
guardaTipoVar        : 10 11 12
if                   : 57
if_quad              : 83
lectura              : 54
llamada              : 53 138
llena_endproc        : 75
loop_end             : 94
main                 : 6
main_end             : 6
mat                  : 21 22 23 61 68 69 70
modules              : 3 4 37
mulexp               : 121 122 122 123 123
nexp                 : 103 104 104
operadorPrint        : 95
operadorReturn       : 45
operatorPrintQuad    : 95 99 100
operatorRead         : 102
operatorReadQuad     : 102
param1               : 73
param2               : 7 44 45 73
pexp                 : 130 131 131 132 132
programa             : 0
programa1            : 1
programa2            : 3 5
quadMain             : 3 4
quad_param           : 77 77
quad_return          : 45
saveCTE              : 99 100 134 135 136 137
saveId               : 133
saveId2              : 59 60 61
save_fun             : 7 44 45
statement            : 7 44 45 50 83 84 88 94
statement1           : 50
sumexp               : 113 114 115 115 116 116 117 117 118 118 119 119 120 120
tipo                 : 26 73
var                  : 14
var1                 : 18 20 21 26 65 67 68 133
var2                 : 16 26
vars                 : 3 4 7 44 45
while                : 58
while_op             : 94
while_quad           : 94

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    FUN             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars quadMain modules programa2
    (4) programa1 -> . vars quadMain modules
    (5) programa1 -> . programa2
    (14) vars -> . var
    (15) vars -> . empty
    (6) programa2 -> . main_end main
    (16) var -> . VAR var2
    (140) empty -> .
    (9) main_end -> .

  ! reduce/reduce conflict for MAIN resolved using rule 9 (main_end -> .)
    VAR             shift and go to state 12
    FUN             reduce using rule 140 (empty -> .)
    $end            reduce using rule 140 (empty -> .)
    MAIN            reduce using rule 9 (main_end -> .)

  ! MAIN            [ reduce using rule 140 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main_end                       shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . quadMain modules programa2
    (4) programa1 -> vars . quadMain modules
    (8) quadMain -> .

    FUN             reduce using rule 8 (quadMain -> .)
    MAIN            reduce using rule 8 (quadMain -> .)
    $end            reduce using rule 8 (quadMain -> .)

    quadMain                       shift and go to state 13

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (14) vars -> var .

    FUN             reduce using rule 14 (vars -> var .)
    MAIN            reduce using rule 14 (vars -> var .)
    $end            reduce using rule 14 (vars -> var .)
    ID              reduce using rule 14 (vars -> var .)
    READ            reduce using rule 14 (vars -> var .)
    PRINT           reduce using rule 14 (vars -> var .)
    FOR             reduce using rule 14 (vars -> var .)
    IF              reduce using rule 14 (vars -> var .)
    WHILE           reduce using rule 14 (vars -> var .)
    RCURLY          reduce using rule 14 (vars -> var .)
    RETURN          reduce using rule 14 (vars -> var .)


state 10

    (15) vars -> empty .

    FUN             reduce using rule 15 (vars -> empty .)
    MAIN            reduce using rule 15 (vars -> empty .)
    $end            reduce using rule 15 (vars -> empty .)
    ID              reduce using rule 15 (vars -> empty .)
    READ            reduce using rule 15 (vars -> empty .)
    PRINT           reduce using rule 15 (vars -> empty .)
    FOR             reduce using rule 15 (vars -> empty .)
    IF              reduce using rule 15 (vars -> empty .)
    WHILE           reduce using rule 15 (vars -> empty .)
    RCURLY          reduce using rule 15 (vars -> empty .)
    RETURN          reduce using rule 15 (vars -> empty .)


state 11

    (6) programa2 -> main_end . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    MAIN            shift and go to state 15

    main                           shift and go to state 14

state 12

    (16) var -> VAR . var2
    (26) var2 -> . var2 tipo var1 SEMICOLON addV
    (27) var2 -> . empty
    (140) empty -> .

    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)
    FUN             reduce using rule 140 (empty -> .)
    MAIN            reduce using rule 140 (empty -> .)
    $end            reduce using rule 140 (empty -> .)
    ID              reduce using rule 140 (empty -> .)
    READ            reduce using rule 140 (empty -> .)
    PRINT           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    RCURLY          reduce using rule 140 (empty -> .)
    RETURN          reduce using rule 140 (empty -> .)

    var2                           shift and go to state 16
    empty                          shift and go to state 17

state 13

    (3) programa1 -> vars quadMain . modules programa2
    (4) programa1 -> vars quadMain . modules
    (37) modules -> . function modules
    (38) modules -> . empty
    (40) function -> . FUN VOID function1
    (41) function -> . FUN INT function2
    (42) function -> . FUN CHAR function2
    (43) function -> . FUN FLOAT function2
    (140) empty -> .

    FUN             shift and go to state 21
    MAIN            reduce using rule 140 (empty -> .)
    $end            reduce using rule 140 (empty -> .)

    modules                        shift and go to state 18
    function                       shift and go to state 19
    empty                          shift and go to state 20

state 14

    (6) programa2 -> main_end main .

    $end            reduce using rule 6 (programa2 -> main_end main .)


state 15

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (39) save_fun -> .

    LPAREN          reduce using rule 39 (save_fun -> .)

    save_fun                       shift and go to state 22

state 16

    (16) var -> VAR var2 .
    (26) var2 -> var2 . tipo var1 SEMICOLON addV
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 16 (var -> VAR var2 .)
    MAIN            reduce using rule 16 (var -> VAR var2 .)
    $end            reduce using rule 16 (var -> VAR var2 .)
    ID              reduce using rule 16 (var -> VAR var2 .)
    READ            reduce using rule 16 (var -> VAR var2 .)
    PRINT           reduce using rule 16 (var -> VAR var2 .)
    FOR             reduce using rule 16 (var -> VAR var2 .)
    IF              reduce using rule 16 (var -> VAR var2 .)
    WHILE           reduce using rule 16 (var -> VAR var2 .)
    RCURLY          reduce using rule 16 (var -> VAR var2 .)
    RETURN          reduce using rule 16 (var -> VAR var2 .)
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    tipo                           shift and go to state 23

state 17

    (27) var2 -> empty .

    INT             reduce using rule 27 (var2 -> empty .)
    FLOAT           reduce using rule 27 (var2 -> empty .)
    CHAR            reduce using rule 27 (var2 -> empty .)
    FUN             reduce using rule 27 (var2 -> empty .)
    MAIN            reduce using rule 27 (var2 -> empty .)
    $end            reduce using rule 27 (var2 -> empty .)
    ID              reduce using rule 27 (var2 -> empty .)
    READ            reduce using rule 27 (var2 -> empty .)
    PRINT           reduce using rule 27 (var2 -> empty .)
    FOR             reduce using rule 27 (var2 -> empty .)
    IF              reduce using rule 27 (var2 -> empty .)
    WHILE           reduce using rule 27 (var2 -> empty .)
    RCURLY          reduce using rule 27 (var2 -> empty .)
    RETURN          reduce using rule 27 (var2 -> empty .)


state 18

    (3) programa1 -> vars quadMain modules . programa2
    (4) programa1 -> vars quadMain modules .
    (6) programa2 -> . main_end main
    (9) main_end -> .

    $end            reduce using rule 4 (programa1 -> vars quadMain modules .)
    MAIN            reduce using rule 9 (main_end -> .)

    programa2                      shift and go to state 27
    main_end                       shift and go to state 11

state 19

    (37) modules -> function . modules
    (37) modules -> . function modules
    (38) modules -> . empty
    (40) function -> . FUN VOID function1
    (41) function -> . FUN INT function2
    (42) function -> . FUN CHAR function2
    (43) function -> . FUN FLOAT function2
    (140) empty -> .

    FUN             shift and go to state 21
    MAIN            reduce using rule 140 (empty -> .)
    $end            reduce using rule 140 (empty -> .)

    function                       shift and go to state 19
    modules                        shift and go to state 28
    empty                          shift and go to state 20

state 20

    (38) modules -> empty .

    MAIN            reduce using rule 38 (modules -> empty .)
    $end            reduce using rule 38 (modules -> empty .)


state 21

    (40) function -> FUN . VOID function1
    (41) function -> FUN . INT function2
    (42) function -> FUN . CHAR function2
    (43) function -> FUN . FLOAT function2

    VOID            shift and go to state 29
    INT             shift and go to state 30
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 32


state 22

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 33


state 23

    (26) var2 -> var2 tipo . var1 SEMICOLON addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

    ID              shift and go to state 35
    SEMICOLON       reduce using rule 140 (empty -> .)

    var1                           shift and go to state 34
    empty                          shift and go to state 36

state 24

    (10) tipo -> INT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 37

state 25

    (11) tipo -> FLOAT . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 38

state 26

    (12) tipo -> CHAR . guardaTipoVar
    (13) guardaTipoVar -> .

    ID              reduce using rule 13 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 13 (guardaTipoVar -> .)
    RPAREN          reduce using rule 13 (guardaTipoVar -> .)
    INT             reduce using rule 13 (guardaTipoVar -> .)
    FLOAT           reduce using rule 13 (guardaTipoVar -> .)
    CHAR            reduce using rule 13 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 39

state 27

    (3) programa1 -> vars quadMain modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars quadMain modules programa2 .)


state 28

    (37) modules -> function modules .

    MAIN            reduce using rule 37 (modules -> function modules .)
    $end            reduce using rule 37 (modules -> function modules .)


state 29

    (40) function -> FUN VOID . function1
    (44) function1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    ID              shift and go to state 41

    function1                      shift and go to state 40

state 30

    (41) function -> FUN INT . function2
    (45) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 43

    function2                      shift and go to state 42

state 31

    (42) function -> FUN CHAR . function2
    (45) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 43

    function2                      shift and go to state 44

state 32

    (43) function -> FUN FLOAT . function2
    (45) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    ID              shift and go to state 43

    function2                      shift and go to state 45

state 33

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (73) param2 -> . param2 tipo param1 addV addParam
    (74) param2 -> . empty
    (140) empty -> .

    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    param2                         shift and go to state 46
    empty                          shift and go to state 47

state 34

    (26) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 48


state 35

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (21) var1 -> ID . mat COMMA var1 addV
    (22) var1 -> ID . mat
    (23) var1 -> ID . mat especial
    (31) arr -> . LBRACKET CTEI RBRACKET
    (32) arr -> . LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (35) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    INT             reduce using rule 17 (var1 -> ID .)
    FLOAT           reduce using rule 17 (var1 -> ID .)
    CHAR            reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 49
    LBRACKET        shift and go to state 52

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]

    arr                            shift and go to state 50
    mat                            shift and go to state 51

state 36

    (24) var1 -> empty .

    SEMICOLON       reduce using rule 24 (var1 -> empty .)
    MUL             reduce using rule 24 (var1 -> empty .)
    DIV             reduce using rule 24 (var1 -> empty .)
    PLUS            reduce using rule 24 (var1 -> empty .)
    MINUS           reduce using rule 24 (var1 -> empty .)
    GT              reduce using rule 24 (var1 -> empty .)
    LT              reduce using rule 24 (var1 -> empty .)
    GTE             reduce using rule 24 (var1 -> empty .)
    LTE             reduce using rule 24 (var1 -> empty .)
    NE              reduce using rule 24 (var1 -> empty .)
    COMPARE         reduce using rule 24 (var1 -> empty .)
    AND             reduce using rule 24 (var1 -> empty .)
    OR              reduce using rule 24 (var1 -> empty .)
    RBRACKET        reduce using rule 24 (var1 -> empty .)
    RPAREN          reduce using rule 24 (var1 -> empty .)
    COMMA           reduce using rule 24 (var1 -> empty .)
    TO              reduce using rule 24 (var1 -> empty .)
    INT             reduce using rule 24 (var1 -> empty .)
    FLOAT           reduce using rule 24 (var1 -> empty .)
    CHAR            reduce using rule 24 (var1 -> empty .)
    CTEI            reduce using rule 24 (var1 -> empty .)
    CTEF            reduce using rule 24 (var1 -> empty .)
    CTEC            reduce using rule 24 (var1 -> empty .)
    CTESTRING       reduce using rule 24 (var1 -> empty .)
    LPAREN          reduce using rule 24 (var1 -> empty .)
    ID              reduce using rule 24 (var1 -> empty .)


state 37

    (10) tipo -> INT guardaTipoVar .

    ID              reduce using rule 10 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> INT guardaTipoVar .)


state 38

    (11) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 11 (tipo -> FLOAT guardaTipoVar .)


state 39

    (12) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 12 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 12 (tipo -> CHAR guardaTipoVar .)


state 40

    (40) function -> FUN VOID function1 .

    FUN             reduce using rule 40 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 40 (function -> FUN VOID function1 .)
    $end            reduce using rule 40 (function -> FUN VOID function1 .)


state 41

    (44) function1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (39) save_fun -> .

    LPAREN          reduce using rule 39 (save_fun -> .)

    save_fun                       shift and go to state 53

state 42

    (41) function -> FUN INT function2 .

    FUN             reduce using rule 41 (function -> FUN INT function2 .)
    MAIN            reduce using rule 41 (function -> FUN INT function2 .)
    $end            reduce using rule 41 (function -> FUN INT function2 .)


state 43

    (45) function2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (39) save_fun -> .

    LPAREN          reduce using rule 39 (save_fun -> .)

    save_fun                       shift and go to state 54

state 44

    (42) function -> FUN CHAR function2 .

    FUN             reduce using rule 42 (function -> FUN CHAR function2 .)
    MAIN            reduce using rule 42 (function -> FUN CHAR function2 .)
    $end            reduce using rule 42 (function -> FUN CHAR function2 .)


state 45

    (43) function -> FUN FLOAT function2 .

    FUN             reduce using rule 43 (function -> FUN FLOAT function2 .)
    MAIN            reduce using rule 43 (function -> FUN FLOAT function2 .)
    $end            reduce using rule 43 (function -> FUN FLOAT function2 .)


state 46

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (73) param2 -> param2 . tipo param1 addV addParam
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 55
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    tipo                           shift and go to state 56

state 47

    (74) param2 -> empty .

    RPAREN          reduce using rule 74 (param2 -> empty .)
    INT             reduce using rule 74 (param2 -> empty .)
    FLOAT           reduce using rule 74 (param2 -> empty .)
    CHAR            reduce using rule 74 (param2 -> empty .)


state 48

    (26) var2 -> var2 tipo var1 SEMICOLON . addV
    (25) addV -> .

    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)
    FUN             reduce using rule 25 (addV -> .)
    MAIN            reduce using rule 25 (addV -> .)
    $end            reduce using rule 25 (addV -> .)
    ID              reduce using rule 25 (addV -> .)
    READ            reduce using rule 25 (addV -> .)
    PRINT           reduce using rule 25 (addV -> .)
    FOR             reduce using rule 25 (addV -> .)
    IF              reduce using rule 25 (addV -> .)
    WHILE           reduce using rule 25 (addV -> .)
    RCURLY          reduce using rule 25 (addV -> .)
    RETURN          reduce using rule 25 (addV -> .)

    addV                           shift and go to state 57

state 49

    (18) var1 -> ID COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 35
    SEMICOLON       reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)
    CTEI            reduce using rule 140 (empty -> .)
    CTEF            reduce using rule 140 (empty -> .)
    CTEC            reduce using rule 140 (empty -> .)
    CTESTRING       reduce using rule 140 (empty -> .)
    LPAREN          reduce using rule 140 (empty -> .)

  ! ID              [ reduce using rule 140 (empty -> .) ]

    var1                           shift and go to state 58
    empty                          shift and go to state 36

state 50

    (19) var1 -> ID arr .
    (20) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 19 (var1 -> ID arr .)
    MUL             reduce using rule 19 (var1 -> ID arr .)
    DIV             reduce using rule 19 (var1 -> ID arr .)
    PLUS            reduce using rule 19 (var1 -> ID arr .)
    MINUS           reduce using rule 19 (var1 -> ID arr .)
    GT              reduce using rule 19 (var1 -> ID arr .)
    LT              reduce using rule 19 (var1 -> ID arr .)
    GTE             reduce using rule 19 (var1 -> ID arr .)
    LTE             reduce using rule 19 (var1 -> ID arr .)
    NE              reduce using rule 19 (var1 -> ID arr .)
    COMPARE         reduce using rule 19 (var1 -> ID arr .)
    AND             reduce using rule 19 (var1 -> ID arr .)
    OR              reduce using rule 19 (var1 -> ID arr .)
    RBRACKET        reduce using rule 19 (var1 -> ID arr .)
    RPAREN          reduce using rule 19 (var1 -> ID arr .)
    TO              reduce using rule 19 (var1 -> ID arr .)
    INT             reduce using rule 19 (var1 -> ID arr .)
    FLOAT           reduce using rule 19 (var1 -> ID arr .)
    CHAR            reduce using rule 19 (var1 -> ID arr .)
    CTEI            reduce using rule 19 (var1 -> ID arr .)
    CTEF            reduce using rule 19 (var1 -> ID arr .)
    CTEC            reduce using rule 19 (var1 -> ID arr .)
    CTESTRING       reduce using rule 19 (var1 -> ID arr .)
    LPAREN          reduce using rule 19 (var1 -> ID arr .)
    ID              reduce using rule 19 (var1 -> ID arr .)
    COMMA           shift and go to state 59

  ! COMMA           [ reduce using rule 19 (var1 -> ID arr .) ]


state 51

    (21) var1 -> ID mat . COMMA var1 addV
    (22) var1 -> ID mat .
    (23) var1 -> ID mat . especial
    (28) especial -> . TRANSPUESTA
    (29) especial -> . INVERSA
    (30) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 60
    SEMICOLON       reduce using rule 22 (var1 -> ID mat .)
    MUL             reduce using rule 22 (var1 -> ID mat .)
    DIV             reduce using rule 22 (var1 -> ID mat .)
    PLUS            reduce using rule 22 (var1 -> ID mat .)
    MINUS           reduce using rule 22 (var1 -> ID mat .)
    GT              reduce using rule 22 (var1 -> ID mat .)
    LT              reduce using rule 22 (var1 -> ID mat .)
    GTE             reduce using rule 22 (var1 -> ID mat .)
    LTE             reduce using rule 22 (var1 -> ID mat .)
    NE              reduce using rule 22 (var1 -> ID mat .)
    COMPARE         reduce using rule 22 (var1 -> ID mat .)
    AND             reduce using rule 22 (var1 -> ID mat .)
    OR              reduce using rule 22 (var1 -> ID mat .)
    RBRACKET        reduce using rule 22 (var1 -> ID mat .)
    RPAREN          reduce using rule 22 (var1 -> ID mat .)
    TO              reduce using rule 22 (var1 -> ID mat .)
    INT             reduce using rule 22 (var1 -> ID mat .)
    FLOAT           reduce using rule 22 (var1 -> ID mat .)
    CHAR            reduce using rule 22 (var1 -> ID mat .)
    CTEI            reduce using rule 22 (var1 -> ID mat .)
    CTEF            reduce using rule 22 (var1 -> ID mat .)
    CTEC            reduce using rule 22 (var1 -> ID mat .)
    CTESTRING       reduce using rule 22 (var1 -> ID mat .)
    LPAREN          reduce using rule 22 (var1 -> ID mat .)
    ID              reduce using rule 22 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 62
    INVERSA         shift and go to state 63
    DETERMINANTE    shift and go to state 64

  ! COMMA           [ reduce using rule 22 (var1 -> ID mat .) ]

    especial                       shift and go to state 61

state 52

    (31) arr -> LBRACKET . CTEI RBRACKET
    (32) arr -> LBRACKET . exp RBRACKET
    (33) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (35) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 65
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)

    exp                            shift and go to state 66
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 53

    (44) function1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    LPAREN          shift and go to state 80


state 54

    (45) function2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LPAREN          shift and go to state 81


state 55

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 82


state 56

    (73) param2 -> param2 tipo . param1 addV addParam
    (64) param1 -> . ID addV
    (65) param1 -> . ID COMMA var1 addV
    (66) param1 -> . ID arr
    (67) param1 -> . ID arr COMMA var1 addV
    (68) param1 -> . ID mat COMMA var1 addV
    (69) param1 -> . ID mat
    (70) param1 -> . ID mat especial
    (71) param1 -> . empty
    (140) empty -> .

    ID              shift and go to state 84
    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    param1                         shift and go to state 83
    empty                          shift and go to state 85

state 57

    (26) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 26 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 58

    (18) var1 -> ID COMMA var1 . addV
    (25) addV -> .

    SEMICOLON       reduce using rule 25 (addV -> .)
    MUL             reduce using rule 25 (addV -> .)
    DIV             reduce using rule 25 (addV -> .)
    PLUS            reduce using rule 25 (addV -> .)
    MINUS           reduce using rule 25 (addV -> .)
    GT              reduce using rule 25 (addV -> .)
    LT              reduce using rule 25 (addV -> .)
    GTE             reduce using rule 25 (addV -> .)
    LTE             reduce using rule 25 (addV -> .)
    NE              reduce using rule 25 (addV -> .)
    COMPARE         reduce using rule 25 (addV -> .)
    AND             reduce using rule 25 (addV -> .)
    OR              reduce using rule 25 (addV -> .)
    RBRACKET        reduce using rule 25 (addV -> .)
    RPAREN          reduce using rule 25 (addV -> .)
    COMMA           reduce using rule 25 (addV -> .)
    TO              reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)
    CTEI            reduce using rule 25 (addV -> .)
    CTEF            reduce using rule 25 (addV -> .)
    CTEC            reduce using rule 25 (addV -> .)
    CTESTRING       reduce using rule 25 (addV -> .)
    LPAREN          reduce using rule 25 (addV -> .)
    ID              reduce using rule 25 (addV -> .)

    addV                           shift and go to state 86

state 59

    (20) var1 -> ID arr COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 35
    SEMICOLON       reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)
    CTEI            reduce using rule 140 (empty -> .)
    CTEF            reduce using rule 140 (empty -> .)
    CTEC            reduce using rule 140 (empty -> .)
    CTESTRING       reduce using rule 140 (empty -> .)
    LPAREN          reduce using rule 140 (empty -> .)

  ! ID              [ reduce using rule 140 (empty -> .) ]

    var1                           shift and go to state 87
    empty                          shift and go to state 36

state 60

    (21) var1 -> ID mat COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 35
    SEMICOLON       reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)
    CTEI            reduce using rule 140 (empty -> .)
    CTEF            reduce using rule 140 (empty -> .)
    CTEC            reduce using rule 140 (empty -> .)
    CTESTRING       reduce using rule 140 (empty -> .)
    LPAREN          reduce using rule 140 (empty -> .)

  ! ID              [ reduce using rule 140 (empty -> .) ]

    var1                           shift and go to state 88
    empty                          shift and go to state 36

state 61

    (23) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 23 (var1 -> ID mat especial .)
    MUL             reduce using rule 23 (var1 -> ID mat especial .)
    DIV             reduce using rule 23 (var1 -> ID mat especial .)
    PLUS            reduce using rule 23 (var1 -> ID mat especial .)
    MINUS           reduce using rule 23 (var1 -> ID mat especial .)
    GT              reduce using rule 23 (var1 -> ID mat especial .)
    LT              reduce using rule 23 (var1 -> ID mat especial .)
    GTE             reduce using rule 23 (var1 -> ID mat especial .)
    LTE             reduce using rule 23 (var1 -> ID mat especial .)
    NE              reduce using rule 23 (var1 -> ID mat especial .)
    COMPARE         reduce using rule 23 (var1 -> ID mat especial .)
    AND             reduce using rule 23 (var1 -> ID mat especial .)
    OR              reduce using rule 23 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 23 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 23 (var1 -> ID mat especial .)
    COMMA           reduce using rule 23 (var1 -> ID mat especial .)
    TO              reduce using rule 23 (var1 -> ID mat especial .)
    INT             reduce using rule 23 (var1 -> ID mat especial .)
    FLOAT           reduce using rule 23 (var1 -> ID mat especial .)
    CHAR            reduce using rule 23 (var1 -> ID mat especial .)
    CTEI            reduce using rule 23 (var1 -> ID mat especial .)
    CTEF            reduce using rule 23 (var1 -> ID mat especial .)
    CTEC            reduce using rule 23 (var1 -> ID mat especial .)
    CTESTRING       reduce using rule 23 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 23 (var1 -> ID mat especial .)
    ID              reduce using rule 23 (var1 -> ID mat especial .)


state 62

    (28) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 28 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 28 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 28 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 28 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 28 (especial -> TRANSPUESTA .)
    GT              reduce using rule 28 (especial -> TRANSPUESTA .)
    LT              reduce using rule 28 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 28 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 28 (especial -> TRANSPUESTA .)
    NE              reduce using rule 28 (especial -> TRANSPUESTA .)
    COMPARE         reduce using rule 28 (especial -> TRANSPUESTA .)
    AND             reduce using rule 28 (especial -> TRANSPUESTA .)
    OR              reduce using rule 28 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 28 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 28 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 28 (especial -> TRANSPUESTA .)
    TO              reduce using rule 28 (especial -> TRANSPUESTA .)
    INT             reduce using rule 28 (especial -> TRANSPUESTA .)
    FLOAT           reduce using rule 28 (especial -> TRANSPUESTA .)
    CHAR            reduce using rule 28 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 28 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 28 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 28 (especial -> TRANSPUESTA .)
    CTESTRING       reduce using rule 28 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 28 (especial -> TRANSPUESTA .)
    ID              reduce using rule 28 (especial -> TRANSPUESTA .)


state 63

    (29) especial -> INVERSA .

    SEMICOLON       reduce using rule 29 (especial -> INVERSA .)
    MUL             reduce using rule 29 (especial -> INVERSA .)
    DIV             reduce using rule 29 (especial -> INVERSA .)
    PLUS            reduce using rule 29 (especial -> INVERSA .)
    MINUS           reduce using rule 29 (especial -> INVERSA .)
    GT              reduce using rule 29 (especial -> INVERSA .)
    LT              reduce using rule 29 (especial -> INVERSA .)
    GTE             reduce using rule 29 (especial -> INVERSA .)
    LTE             reduce using rule 29 (especial -> INVERSA .)
    NE              reduce using rule 29 (especial -> INVERSA .)
    COMPARE         reduce using rule 29 (especial -> INVERSA .)
    AND             reduce using rule 29 (especial -> INVERSA .)
    OR              reduce using rule 29 (especial -> INVERSA .)
    RBRACKET        reduce using rule 29 (especial -> INVERSA .)
    RPAREN          reduce using rule 29 (especial -> INVERSA .)
    COMMA           reduce using rule 29 (especial -> INVERSA .)
    TO              reduce using rule 29 (especial -> INVERSA .)
    INT             reduce using rule 29 (especial -> INVERSA .)
    FLOAT           reduce using rule 29 (especial -> INVERSA .)
    CHAR            reduce using rule 29 (especial -> INVERSA .)
    CTEI            reduce using rule 29 (especial -> INVERSA .)
    CTEF            reduce using rule 29 (especial -> INVERSA .)
    CTEC            reduce using rule 29 (especial -> INVERSA .)
    CTESTRING       reduce using rule 29 (especial -> INVERSA .)
    LPAREN          reduce using rule 29 (especial -> INVERSA .)
    ID              reduce using rule 29 (especial -> INVERSA .)


state 64

    (30) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 30 (especial -> DETERMINANTE .)
    MUL             reduce using rule 30 (especial -> DETERMINANTE .)
    DIV             reduce using rule 30 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 30 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 30 (especial -> DETERMINANTE .)
    GT              reduce using rule 30 (especial -> DETERMINANTE .)
    LT              reduce using rule 30 (especial -> DETERMINANTE .)
    GTE             reduce using rule 30 (especial -> DETERMINANTE .)
    LTE             reduce using rule 30 (especial -> DETERMINANTE .)
    NE              reduce using rule 30 (especial -> DETERMINANTE .)
    COMPARE         reduce using rule 30 (especial -> DETERMINANTE .)
    AND             reduce using rule 30 (especial -> DETERMINANTE .)
    OR              reduce using rule 30 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 30 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 30 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 30 (especial -> DETERMINANTE .)
    TO              reduce using rule 30 (especial -> DETERMINANTE .)
    INT             reduce using rule 30 (especial -> DETERMINANTE .)
    FLOAT           reduce using rule 30 (especial -> DETERMINANTE .)
    CHAR            reduce using rule 30 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 30 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 30 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 30 (especial -> DETERMINANTE .)
    CTESTRING       reduce using rule 30 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 30 (especial -> DETERMINANTE .)
    ID              reduce using rule 30 (especial -> DETERMINANTE .)


state 65

    (31) arr -> LBRACKET CTEI . RBRACKET
    (33) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (134) pexp -> CTEI . saveCTE
    (143) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 89
    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 143 (saveCTE -> .) ]

    saveCTE                        shift and go to state 90

state 66

    (32) arr -> LBRACKET exp . RBRACKET
    (34) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (35) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 91


state 67

    (103) exp -> nexp .
    (104) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 103 (exp -> nexp .)
    RPAREN          reduce using rule 103 (exp -> nexp .)
    COMMA           reduce using rule 103 (exp -> nexp .)
    SEMICOLON       reduce using rule 103 (exp -> nexp .)
    TO              reduce using rule 103 (exp -> nexp .)
    OR              shift and go to state 92


state 68

    (111) nexp -> compexp .
    (112) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 111 (nexp -> compexp .)
    RBRACKET        reduce using rule 111 (nexp -> compexp .)
    RPAREN          reduce using rule 111 (nexp -> compexp .)
    COMMA           reduce using rule 111 (nexp -> compexp .)
    SEMICOLON       reduce using rule 111 (nexp -> compexp .)
    TO              reduce using rule 111 (nexp -> compexp .)
    AND             shift and go to state 93


state 69

    (113) compexp -> sumexp .
    (115) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (116) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (117) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (120) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 113 (compexp -> sumexp .)
    OR              reduce using rule 113 (compexp -> sumexp .)
    RBRACKET        reduce using rule 113 (compexp -> sumexp .)
    RPAREN          reduce using rule 113 (compexp -> sumexp .)
    COMMA           reduce using rule 113 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 113 (compexp -> sumexp .)
    TO              reduce using rule 113 (compexp -> sumexp .)
    GT              shift and go to state 94
    LT              shift and go to state 95
    GTE             shift and go to state 96
    LTE             shift and go to state 97
    NE              shift and go to state 98
    COMPARE         shift and go to state 99


state 70

    (114) compexp -> compexp1 . sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    sumexp                         shift and go to state 100
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 71

    (121) sumexp -> mulexp .
    (122) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 121 (sumexp -> mulexp .)
    LT              reduce using rule 121 (sumexp -> mulexp .)
    GTE             reduce using rule 121 (sumexp -> mulexp .)
    LTE             reduce using rule 121 (sumexp -> mulexp .)
    NE              reduce using rule 121 (sumexp -> mulexp .)
    COMPARE         reduce using rule 121 (sumexp -> mulexp .)
    AND             reduce using rule 121 (sumexp -> mulexp .)
    OR              reduce using rule 121 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 121 (sumexp -> mulexp .)
    RPAREN          reduce using rule 121 (sumexp -> mulexp .)
    COMMA           reduce using rule 121 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 121 (sumexp -> mulexp .)
    TO              reduce using rule 121 (sumexp -> mulexp .)
    CTEI            reduce using rule 121 (sumexp -> mulexp .)
    CTEF            reduce using rule 121 (sumexp -> mulexp .)
    CTEC            reduce using rule 121 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 121 (sumexp -> mulexp .)
    LPAREN          reduce using rule 121 (sumexp -> mulexp .)
    ID              reduce using rule 121 (sumexp -> mulexp .)
    MUL             reduce using rule 121 (sumexp -> mulexp .)
    DIV             reduce using rule 121 (sumexp -> mulexp .)
    PLUS            shift and go to state 102
    MINUS           shift and go to state 103

  ! PLUS            [ reduce using rule 121 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 121 (sumexp -> mulexp .) ]


state 72

    (130) mulexp -> pexp .
    (131) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 130 (mulexp -> pexp .)
    MINUS           reduce using rule 130 (mulexp -> pexp .)
    GT              reduce using rule 130 (mulexp -> pexp .)
    LT              reduce using rule 130 (mulexp -> pexp .)
    GTE             reduce using rule 130 (mulexp -> pexp .)
    LTE             reduce using rule 130 (mulexp -> pexp .)
    NE              reduce using rule 130 (mulexp -> pexp .)
    COMPARE         reduce using rule 130 (mulexp -> pexp .)
    AND             reduce using rule 130 (mulexp -> pexp .)
    OR              reduce using rule 130 (mulexp -> pexp .)
    RBRACKET        reduce using rule 130 (mulexp -> pexp .)
    RPAREN          reduce using rule 130 (mulexp -> pexp .)
    COMMA           reduce using rule 130 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 130 (mulexp -> pexp .)
    TO              reduce using rule 130 (mulexp -> pexp .)
    CTEI            reduce using rule 130 (mulexp -> pexp .)
    CTEF            reduce using rule 130 (mulexp -> pexp .)
    CTEC            reduce using rule 130 (mulexp -> pexp .)
    CTESTRING       reduce using rule 130 (mulexp -> pexp .)
    LPAREN          reduce using rule 130 (mulexp -> pexp .)
    ID              reduce using rule 130 (mulexp -> pexp .)
    MUL             shift and go to state 104
    DIV             shift and go to state 105

  ! MUL             [ reduce using rule 130 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 130 (mulexp -> pexp .) ]


state 73

    (133) pexp -> var1 . saveId
    (141) saveId -> .

    MUL             reduce using rule 141 (saveId -> .)
    DIV             reduce using rule 141 (saveId -> .)
    PLUS            reduce using rule 141 (saveId -> .)
    MINUS           reduce using rule 141 (saveId -> .)
    GT              reduce using rule 141 (saveId -> .)
    LT              reduce using rule 141 (saveId -> .)
    GTE             reduce using rule 141 (saveId -> .)
    LTE             reduce using rule 141 (saveId -> .)
    NE              reduce using rule 141 (saveId -> .)
    COMPARE         reduce using rule 141 (saveId -> .)
    AND             reduce using rule 141 (saveId -> .)
    OR              reduce using rule 141 (saveId -> .)
    RBRACKET        reduce using rule 141 (saveId -> .)
    RPAREN          reduce using rule 141 (saveId -> .)
    COMMA           reduce using rule 141 (saveId -> .)
    SEMICOLON       reduce using rule 141 (saveId -> .)
    TO              reduce using rule 141 (saveId -> .)
    CTEI            reduce using rule 141 (saveId -> .)
    CTEF            reduce using rule 141 (saveId -> .)
    CTEC            reduce using rule 141 (saveId -> .)
    CTESTRING       reduce using rule 141 (saveId -> .)
    LPAREN          reduce using rule 141 (saveId -> .)
    ID              reduce using rule 141 (saveId -> .)

    saveId                         shift and go to state 106

state 74

    (135) pexp -> CTEF . saveCTE
    (143) saveCTE -> .

    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)
    RBRACKET        reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    COMMA           reduce using rule 143 (saveCTE -> .)
    SEMICOLON       reduce using rule 143 (saveCTE -> .)
    TO              reduce using rule 143 (saveCTE -> .)
    CTEI            reduce using rule 143 (saveCTE -> .)
    CTEF            reduce using rule 143 (saveCTE -> .)
    CTEC            reduce using rule 143 (saveCTE -> .)
    CTESTRING       reduce using rule 143 (saveCTE -> .)
    LPAREN          reduce using rule 143 (saveCTE -> .)
    ID              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 107

state 75

    (136) pexp -> CTEC . saveCTE
    (143) saveCTE -> .

    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)
    RBRACKET        reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    COMMA           reduce using rule 143 (saveCTE -> .)
    SEMICOLON       reduce using rule 143 (saveCTE -> .)
    TO              reduce using rule 143 (saveCTE -> .)
    CTEI            reduce using rule 143 (saveCTE -> .)
    CTEF            reduce using rule 143 (saveCTE -> .)
    CTEC            reduce using rule 143 (saveCTE -> .)
    CTESTRING       reduce using rule 143 (saveCTE -> .)
    LPAREN          reduce using rule 143 (saveCTE -> .)
    ID              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 108

state 76

    (137) pexp -> CTESTRING . saveCTE
    (143) saveCTE -> .

    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)
    RBRACKET        reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    COMMA           reduce using rule 143 (saveCTE -> .)
    SEMICOLON       reduce using rule 143 (saveCTE -> .)
    TO              reduce using rule 143 (saveCTE -> .)
    CTEI            reduce using rule 143 (saveCTE -> .)
    CTEF            reduce using rule 143 (saveCTE -> .)
    CTEC            reduce using rule 143 (saveCTE -> .)
    CTESTRING       reduce using rule 143 (saveCTE -> .)
    LPAREN          reduce using rule 143 (saveCTE -> .)
    ID              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 109

state 77

    (138) pexp -> llamada .

    MUL             reduce using rule 138 (pexp -> llamada .)
    DIV             reduce using rule 138 (pexp -> llamada .)
    PLUS            reduce using rule 138 (pexp -> llamada .)
    MINUS           reduce using rule 138 (pexp -> llamada .)
    GT              reduce using rule 138 (pexp -> llamada .)
    LT              reduce using rule 138 (pexp -> llamada .)
    GTE             reduce using rule 138 (pexp -> llamada .)
    LTE             reduce using rule 138 (pexp -> llamada .)
    NE              reduce using rule 138 (pexp -> llamada .)
    COMPARE         reduce using rule 138 (pexp -> llamada .)
    AND             reduce using rule 138 (pexp -> llamada .)
    OR              reduce using rule 138 (pexp -> llamada .)
    RBRACKET        reduce using rule 138 (pexp -> llamada .)
    RPAREN          reduce using rule 138 (pexp -> llamada .)
    COMMA           reduce using rule 138 (pexp -> llamada .)
    SEMICOLON       reduce using rule 138 (pexp -> llamada .)
    TO              reduce using rule 138 (pexp -> llamada .)
    CTEI            reduce using rule 138 (pexp -> llamada .)
    CTEF            reduce using rule 138 (pexp -> llamada .)
    CTEC            reduce using rule 138 (pexp -> llamada .)
    CTESTRING       reduce using rule 138 (pexp -> llamada .)
    LPAREN          reduce using rule 138 (pexp -> llamada .)
    ID              reduce using rule 138 (pexp -> llamada .)


state 78

    (139) pexp -> LPAREN . exp RPAREN
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    exp                            shift and go to state 110
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 79

    (17) var1 -> ID .
    (18) var1 -> ID . COMMA var1 addV
    (19) var1 -> ID . arr
    (20) var1 -> ID . arr COMMA var1 addV
    (21) var1 -> ID . mat COMMA var1 addV
    (22) var1 -> ID . mat
    (23) var1 -> ID . mat especial
    (75) llamada -> ID . era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (31) arr -> . LBRACKET CTEI RBRACKET
    (32) arr -> . LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (35) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (80) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 17 (var1 -> ID .)
    MUL             reduce using rule 17 (var1 -> ID .)
    DIV             reduce using rule 17 (var1 -> ID .)
    PLUS            reduce using rule 17 (var1 -> ID .)
    MINUS           reduce using rule 17 (var1 -> ID .)
    GT              reduce using rule 17 (var1 -> ID .)
    LT              reduce using rule 17 (var1 -> ID .)
    GTE             reduce using rule 17 (var1 -> ID .)
    LTE             reduce using rule 17 (var1 -> ID .)
    NE              reduce using rule 17 (var1 -> ID .)
    COMPARE         reduce using rule 17 (var1 -> ID .)
    AND             reduce using rule 17 (var1 -> ID .)
    OR              reduce using rule 17 (var1 -> ID .)
    RBRACKET        reduce using rule 17 (var1 -> ID .)
    RPAREN          reduce using rule 17 (var1 -> ID .)
    SEMICOLON       reduce using rule 17 (var1 -> ID .)
    TO              reduce using rule 17 (var1 -> ID .)
    CTEI            reduce using rule 17 (var1 -> ID .)
    CTEF            reduce using rule 17 (var1 -> ID .)
    CTEC            reduce using rule 17 (var1 -> ID .)
    CTESTRING       reduce using rule 17 (var1 -> ID .)
    LPAREN          reduce using rule 17 (var1 -> ID .)
    ID              reduce using rule 17 (var1 -> ID .)
    COMMA           shift and go to state 49
    LBRACKET        shift and go to state 52

  ! COMMA           [ reduce using rule 17 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 80 (era_call -> .) ]

    arr                            shift and go to state 50
    mat                            shift and go to state 51
    era_call                       shift and go to state 111

state 80

    (44) function1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (73) param2 -> . param2 tipo param1 addV addParam
    (74) param2 -> . empty
    (140) empty -> .

    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    param2                         shift and go to state 112
    empty                          shift and go to state 47

state 81

    (45) function2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (73) param2 -> . param2 tipo param1 addV addParam
    (74) param2 -> . empty
    (140) empty -> .

    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    param2                         shift and go to state 113
    empty                          shift and go to state 47

state 82

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (140) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 140 (empty -> .)
    READ            reduce using rule 140 (empty -> .)
    PRINT           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    RCURLY          reduce using rule 140 (empty -> .)

    vars                           shift and go to state 114
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 83

    (73) param2 -> param2 tipo param1 . addV addParam
    (25) addV -> .

    RPAREN          reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)

    addV                           shift and go to state 115

state 84

    (64) param1 -> ID . addV
    (65) param1 -> ID . COMMA var1 addV
    (66) param1 -> ID . arr
    (67) param1 -> ID . arr COMMA var1 addV
    (68) param1 -> ID . mat COMMA var1 addV
    (69) param1 -> ID . mat
    (70) param1 -> ID . mat especial
    (25) addV -> .
    (31) arr -> . LBRACKET CTEI RBRACKET
    (32) arr -> . LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (35) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    COMMA           shift and go to state 117
    RPAREN          reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)
    LBRACKET        shift and go to state 52

    addV                           shift and go to state 116
    arr                            shift and go to state 118
    mat                            shift and go to state 119

state 85

    (71) param1 -> empty .

    RPAREN          reduce using rule 71 (param1 -> empty .)
    INT             reduce using rule 71 (param1 -> empty .)
    FLOAT           reduce using rule 71 (param1 -> empty .)
    CHAR            reduce using rule 71 (param1 -> empty .)


state 86

    (18) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    INT             reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID COMMA var1 addV .)


state 87

    (20) var1 -> ID arr COMMA var1 . addV
    (25) addV -> .

    SEMICOLON       reduce using rule 25 (addV -> .)
    MUL             reduce using rule 25 (addV -> .)
    DIV             reduce using rule 25 (addV -> .)
    PLUS            reduce using rule 25 (addV -> .)
    MINUS           reduce using rule 25 (addV -> .)
    GT              reduce using rule 25 (addV -> .)
    LT              reduce using rule 25 (addV -> .)
    GTE             reduce using rule 25 (addV -> .)
    LTE             reduce using rule 25 (addV -> .)
    NE              reduce using rule 25 (addV -> .)
    COMPARE         reduce using rule 25 (addV -> .)
    AND             reduce using rule 25 (addV -> .)
    OR              reduce using rule 25 (addV -> .)
    RBRACKET        reduce using rule 25 (addV -> .)
    RPAREN          reduce using rule 25 (addV -> .)
    COMMA           reduce using rule 25 (addV -> .)
    TO              reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)
    CTEI            reduce using rule 25 (addV -> .)
    CTEF            reduce using rule 25 (addV -> .)
    CTEC            reduce using rule 25 (addV -> .)
    CTESTRING       reduce using rule 25 (addV -> .)
    LPAREN          reduce using rule 25 (addV -> .)
    ID              reduce using rule 25 (addV -> .)

    addV                           shift and go to state 120

state 88

    (21) var1 -> ID mat COMMA var1 . addV
    (25) addV -> .

    SEMICOLON       reduce using rule 25 (addV -> .)
    MUL             reduce using rule 25 (addV -> .)
    DIV             reduce using rule 25 (addV -> .)
    PLUS            reduce using rule 25 (addV -> .)
    MINUS           reduce using rule 25 (addV -> .)
    GT              reduce using rule 25 (addV -> .)
    LT              reduce using rule 25 (addV -> .)
    GTE             reduce using rule 25 (addV -> .)
    LTE             reduce using rule 25 (addV -> .)
    NE              reduce using rule 25 (addV -> .)
    COMPARE         reduce using rule 25 (addV -> .)
    AND             reduce using rule 25 (addV -> .)
    OR              reduce using rule 25 (addV -> .)
    RBRACKET        reduce using rule 25 (addV -> .)
    RPAREN          reduce using rule 25 (addV -> .)
    COMMA           reduce using rule 25 (addV -> .)
    TO              reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)
    CTEI            reduce using rule 25 (addV -> .)
    CTEF            reduce using rule 25 (addV -> .)
    CTEC            reduce using rule 25 (addV -> .)
    CTESTRING       reduce using rule 25 (addV -> .)
    LPAREN          reduce using rule 25 (addV -> .)
    ID              reduce using rule 25 (addV -> .)

    addV                           shift and go to state 121

state 89

    (31) arr -> LBRACKET CTEI RBRACKET .
    (33) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (36) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 31 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 122


state 90

    (134) pexp -> CTEI saveCTE .

    MUL             reduce using rule 134 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 134 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 134 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 134 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 134 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 134 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 134 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 134 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 134 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 134 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 134 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 134 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 134 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 134 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 134 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 134 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 134 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 134 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 134 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 134 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 134 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 134 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 134 (pexp -> CTEI saveCTE .)


state 91

    (32) arr -> LBRACKET exp RBRACKET .
    (34) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (35) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 32 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 123


state 92

    (104) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 124

state 93

    (112) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 125

state 94

    (115) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 126

state 95

    (116) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 127

state 96

    (117) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 128

state 97

    (118) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 129

state 98

    (119) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 130

state 99

    (120) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 131

state 100

    (114) compexp -> compexp1 sumexp .

    AND             reduce using rule 114 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 114 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 114 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 114 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 114 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 114 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 114 (compexp -> compexp1 sumexp .)


state 101

    (134) pexp -> CTEI . saveCTE
    (143) saveCTE -> .

    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)
    RBRACKET        reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    COMMA           reduce using rule 143 (saveCTE -> .)
    SEMICOLON       reduce using rule 143 (saveCTE -> .)
    TO              reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    CTEI            reduce using rule 143 (saveCTE -> .)
    CTEF            reduce using rule 143 (saveCTE -> .)
    CTEC            reduce using rule 143 (saveCTE -> .)
    CTESTRING       reduce using rule 143 (saveCTE -> .)
    LPAREN          reduce using rule 143 (saveCTE -> .)
    ID              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 90

state 102

    (122) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 132

state 103

    (123) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 133

state 104

    (131) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 134

state 105

    (132) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    RBRACKET        reduce using rule 63 (addOperadorName -> .)
    RPAREN          reduce using rule 63 (addOperadorName -> .)
    COMMA           reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 135

state 106

    (133) pexp -> var1 saveId .

    MUL             reduce using rule 133 (pexp -> var1 saveId .)
    DIV             reduce using rule 133 (pexp -> var1 saveId .)
    PLUS            reduce using rule 133 (pexp -> var1 saveId .)
    MINUS           reduce using rule 133 (pexp -> var1 saveId .)
    GT              reduce using rule 133 (pexp -> var1 saveId .)
    LT              reduce using rule 133 (pexp -> var1 saveId .)
    GTE             reduce using rule 133 (pexp -> var1 saveId .)
    LTE             reduce using rule 133 (pexp -> var1 saveId .)
    NE              reduce using rule 133 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 133 (pexp -> var1 saveId .)
    AND             reduce using rule 133 (pexp -> var1 saveId .)
    OR              reduce using rule 133 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 133 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 133 (pexp -> var1 saveId .)
    COMMA           reduce using rule 133 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 133 (pexp -> var1 saveId .)
    TO              reduce using rule 133 (pexp -> var1 saveId .)
    CTEI            reduce using rule 133 (pexp -> var1 saveId .)
    CTEF            reduce using rule 133 (pexp -> var1 saveId .)
    CTEC            reduce using rule 133 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 133 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 133 (pexp -> var1 saveId .)
    ID              reduce using rule 133 (pexp -> var1 saveId .)


state 107

    (135) pexp -> CTEF saveCTE .

    MUL             reduce using rule 135 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 135 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 135 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 135 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 135 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 135 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 135 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 135 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 135 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 135 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 135 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 135 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 135 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 135 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 135 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 135 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 135 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 135 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 135 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 135 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 135 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 135 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 135 (pexp -> CTEF saveCTE .)


state 108

    (136) pexp -> CTEC saveCTE .

    MUL             reduce using rule 136 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 136 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 136 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 136 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 136 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 136 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 136 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 136 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 136 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 136 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 136 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 136 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 136 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 136 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 136 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 136 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 136 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 136 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 136 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 136 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 136 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 136 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 136 (pexp -> CTEC saveCTE .)


state 109

    (137) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 137 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 137 (pexp -> CTESTRING saveCTE .)


state 110

    (139) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 136


state 111

    (75) llamada -> ID era_call . LPAREN aux_exp RPAREN gosub_quad llena_endproc

    LPAREN          shift and go to state 137


state 112

    (44) function1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func
    (73) param2 -> param2 . tipo param1 addV addParam
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 138
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    tipo                           shift and go to state 56

state 113

    (45) function2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (73) param2 -> param2 . tipo param1 addV addParam
    (10) tipo -> . INT guardaTipoVar
    (11) tipo -> . FLOAT guardaTipoVar
    (12) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 139
    INT             shift and go to state 24
    FLOAT           shift and go to state 25
    CHAR            shift and go to state 26

    tipo                           shift and go to state 56

state 114

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 140
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 115

    (73) param2 -> param2 tipo param1 addV . addParam
    (72) addParam -> .

    RPAREN          reduce using rule 72 (addParam -> .)
    INT             reduce using rule 72 (addParam -> .)
    FLOAT           reduce using rule 72 (addParam -> .)
    CHAR            reduce using rule 72 (addParam -> .)

    addParam                       shift and go to state 156

state 116

    (64) param1 -> ID addV .

    RPAREN          reduce using rule 64 (param1 -> ID addV .)
    INT             reduce using rule 64 (param1 -> ID addV .)
    FLOAT           reduce using rule 64 (param1 -> ID addV .)
    CHAR            reduce using rule 64 (param1 -> ID addV .)


state 117

    (65) param1 -> ID COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

    ID              shift and go to state 35
    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    var1                           shift and go to state 157
    empty                          shift and go to state 36

state 118

    (66) param1 -> ID arr .
    (67) param1 -> ID arr . COMMA var1 addV

    RPAREN          reduce using rule 66 (param1 -> ID arr .)
    INT             reduce using rule 66 (param1 -> ID arr .)
    FLOAT           reduce using rule 66 (param1 -> ID arr .)
    CHAR            reduce using rule 66 (param1 -> ID arr .)
    COMMA           shift and go to state 158


state 119

    (68) param1 -> ID mat . COMMA var1 addV
    (69) param1 -> ID mat .
    (70) param1 -> ID mat . especial
    (28) especial -> . TRANSPUESTA
    (29) especial -> . INVERSA
    (30) especial -> . DETERMINANTE

    COMMA           shift and go to state 159
    RPAREN          reduce using rule 69 (param1 -> ID mat .)
    INT             reduce using rule 69 (param1 -> ID mat .)
    FLOAT           reduce using rule 69 (param1 -> ID mat .)
    CHAR            reduce using rule 69 (param1 -> ID mat .)
    TRANSPUESTA     shift and go to state 62
    INVERSA         shift and go to state 63
    DETERMINANTE    shift and go to state 64

    especial                       shift and go to state 160

state 120

    (20) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 20 (var1 -> ID arr COMMA var1 addV .)


state 121

    (21) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    COMPARE         reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    CTESTRING       reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 21 (var1 -> ID mat COMMA var1 addV .)


state 122

    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (36) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 161
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)

    exp                            shift and go to state 162
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 123

    (34) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (35) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 164
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)

    exp                            shift and go to state 163
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 124

    (104) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    nexp                           shift and go to state 165
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 125

    (112) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    compexp                        shift and go to state 166
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 126

    (115) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 167
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 127

    (116) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 168
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 128

    (117) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 169
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 129

    (118) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 130

    (119) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 131

    (120) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    sumexp                         shift and go to state 172
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 132

    (122) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    mulexp                         shift and go to state 173
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 133

    (123) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    mulexp                         shift and go to state 174
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 134

    (131) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    pexp                           shift and go to state 175
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 135

    (132) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RBRACKET        reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)

  ! CTEI            [ reduce using rule 140 (empty -> .) ]
  ! CTEF            [ reduce using rule 140 (empty -> .) ]
  ! CTEC            [ reduce using rule 140 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 140 (empty -> .) ]
  ! LPAREN          [ reduce using rule 140 (empty -> .) ]
  ! ID              [ reduce using rule 140 (empty -> .) ]

    pexp                           shift and go to state 176
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 136

    (139) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 139 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 139 (pexp -> LPAREN exp RPAREN .)


state 137

    (75) llamada -> ID era_call LPAREN . aux_exp RPAREN gosub_quad llena_endproc
    (76) aux_exp -> . exp
    (77) aux_exp -> . exp quad_param COMMA aux_exp quad_param
    (78) aux_exp -> . empty
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (140) empty -> .
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79

    aux_exp                        shift and go to state 177
    exp                            shift and go to state 178
    empty                          shift and go to state 179
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77

state 138

    (44) function1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RCURLY end_func

    SEMICOLON       shift and go to state 180


state 139

    (45) function2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 181


state 140

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 182


state 141

    (50) statement -> statement1 . statement
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    RETURN          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement1                     shift and go to state 141
    statement                      shift and go to state 183
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 142

    (51) statement -> empty .

    RCURLY          reduce using rule 51 (statement -> empty .)
    RETURN          reduce using rule 51 (statement -> empty .)


state 143

    (52) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 184


state 144

    (53) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 185


state 145

    (54) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 186


state 146

    (55) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 187


state 147

    (56) statement1 -> for .

    ID              reduce using rule 56 (statement1 -> for .)
    READ            reduce using rule 56 (statement1 -> for .)
    PRINT           reduce using rule 56 (statement1 -> for .)
    FOR             reduce using rule 56 (statement1 -> for .)
    IF              reduce using rule 56 (statement1 -> for .)
    WHILE           reduce using rule 56 (statement1 -> for .)
    RCURLY          reduce using rule 56 (statement1 -> for .)
    RETURN          reduce using rule 56 (statement1 -> for .)


state 148

    (57) statement1 -> if .

    ID              reduce using rule 57 (statement1 -> if .)
    READ            reduce using rule 57 (statement1 -> if .)
    PRINT           reduce using rule 57 (statement1 -> if .)
    FOR             reduce using rule 57 (statement1 -> if .)
    IF              reduce using rule 57 (statement1 -> if .)
    WHILE           reduce using rule 57 (statement1 -> if .)
    RCURLY          reduce using rule 57 (statement1 -> if .)
    RETURN          reduce using rule 57 (statement1 -> if .)


state 149

    (58) statement1 -> while .

    ID              reduce using rule 58 (statement1 -> while .)
    READ            reduce using rule 58 (statement1 -> while .)
    PRINT           reduce using rule 58 (statement1 -> while .)
    FOR             reduce using rule 58 (statement1 -> while .)
    IF              reduce using rule 58 (statement1 -> while .)
    WHILE           reduce using rule 58 (statement1 -> while .)
    RCURLY          reduce using rule 58 (statement1 -> while .)
    RETURN          reduce using rule 58 (statement1 -> while .)


state 150

    (59) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> ID . era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (142) saveId2 -> .
    (80) era_call -> .

    EQUALS          reduce using rule 142 (saveId2 -> .)
    LBRACKET        reduce using rule 142 (saveId2 -> .)
    LPAREN          reduce using rule 80 (era_call -> .)

    saveId2                        shift and go to state 188
    era_call                       shift and go to state 111

state 151

    (102) lectura -> READ . operatorRead LPAREN exp operatorReadQuad RPAREN
    (128) operatorRead -> .

    LPAREN          reduce using rule 128 (operatorRead -> .)

    operatorRead                   shift and go to state 189

state 152

    (95) escritura -> PRINT . LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN

    LPAREN          shift and go to state 190


state 153

    (88) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (86) for_op -> .

    LPAREN          reduce using rule 86 (for_op -> .)

    for_op                         shift and go to state 191

state 154

    (83) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 192


state 155

    (94) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (93) while_op -> .

    LPAREN          reduce using rule 93 (while_op -> .)

    while_op                       shift and go to state 193

state 156

    (73) param2 -> param2 tipo param1 addV addParam .

    RPAREN          reduce using rule 73 (param2 -> param2 tipo param1 addV addParam .)
    INT             reduce using rule 73 (param2 -> param2 tipo param1 addV addParam .)
    FLOAT           reduce using rule 73 (param2 -> param2 tipo param1 addV addParam .)
    CHAR            reduce using rule 73 (param2 -> param2 tipo param1 addV addParam .)


state 157

    (65) param1 -> ID COMMA var1 . addV
    (25) addV -> .

    RPAREN          reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)

    addV                           shift and go to state 194

state 158

    (67) param1 -> ID arr COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

    ID              shift and go to state 35
    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    var1                           shift and go to state 195
    empty                          shift and go to state 36

state 159

    (68) param1 -> ID mat COMMA . var1 addV
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (140) empty -> .

    ID              shift and go to state 35
    RPAREN          reduce using rule 140 (empty -> .)
    INT             reduce using rule 140 (empty -> .)
    FLOAT           reduce using rule 140 (empty -> .)
    CHAR            reduce using rule 140 (empty -> .)

    var1                           shift and go to state 196
    empty                          shift and go to state 36

state 160

    (70) param1 -> ID mat especial .

    RPAREN          reduce using rule 70 (param1 -> ID mat especial .)
    INT             reduce using rule 70 (param1 -> ID mat especial .)
    FLOAT           reduce using rule 70 (param1 -> ID mat especial .)
    CHAR            reduce using rule 70 (param1 -> ID mat especial .)


state 161

    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (134) pexp -> CTEI . saveCTE
    (143) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 197
    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 143 (saveCTE -> .) ]

    saveCTE                        shift and go to state 90

state 162

    (36) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 198


state 163

    (34) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 199


state 164

    (35) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (134) pexp -> CTEI . saveCTE
    (143) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 200
    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 143 (saveCTE -> .) ]

    saveCTE                        shift and go to state 90

state 165

    (104) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (105) genera_quad_or -> .

    RBRACKET        reduce using rule 105 (genera_quad_or -> .)
    RPAREN          reduce using rule 105 (genera_quad_or -> .)
    COMMA           reduce using rule 105 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 105 (genera_quad_or -> .)
    TO              reduce using rule 105 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 201

state 166

    (112) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (106) genera_quad_and -> .

    OR              reduce using rule 106 (genera_quad_and -> .)
    RBRACKET        reduce using rule 106 (genera_quad_and -> .)
    RPAREN          reduce using rule 106 (genera_quad_and -> .)
    COMMA           reduce using rule 106 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 106 (genera_quad_and -> .)
    TO              reduce using rule 106 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 202

state 167

    (115) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 203

state 168

    (116) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 204

state 169

    (117) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 205

state 170

    (118) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 206

state 171

    (119) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 207

state 172

    (120) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (107) compare_quad -> .

    CTEI            reduce using rule 107 (compare_quad -> .)
    CTEF            reduce using rule 107 (compare_quad -> .)
    CTEC            reduce using rule 107 (compare_quad -> .)
    CTESTRING       reduce using rule 107 (compare_quad -> .)
    LPAREN          reduce using rule 107 (compare_quad -> .)
    ID              reduce using rule 107 (compare_quad -> .)
    PLUS            reduce using rule 107 (compare_quad -> .)
    MINUS           reduce using rule 107 (compare_quad -> .)
    MUL             reduce using rule 107 (compare_quad -> .)
    DIV             reduce using rule 107 (compare_quad -> .)
    AND             reduce using rule 107 (compare_quad -> .)
    OR              reduce using rule 107 (compare_quad -> .)
    RBRACKET        reduce using rule 107 (compare_quad -> .)
    RPAREN          reduce using rule 107 (compare_quad -> .)
    COMMA           reduce using rule 107 (compare_quad -> .)
    SEMICOLON       reduce using rule 107 (compare_quad -> .)
    TO              reduce using rule 107 (compare_quad -> .)

    compare_quad                   shift and go to state 208

state 173

    (122) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (124) genera_sum_quad -> .

    GT              reduce using rule 124 (genera_sum_quad -> .)
    LT              reduce using rule 124 (genera_sum_quad -> .)
    GTE             reduce using rule 124 (genera_sum_quad -> .)
    LTE             reduce using rule 124 (genera_sum_quad -> .)
    NE              reduce using rule 124 (genera_sum_quad -> .)
    COMPARE         reduce using rule 124 (genera_sum_quad -> .)
    AND             reduce using rule 124 (genera_sum_quad -> .)
    OR              reduce using rule 124 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 124 (genera_sum_quad -> .)
    RPAREN          reduce using rule 124 (genera_sum_quad -> .)
    COMMA           reduce using rule 124 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 124 (genera_sum_quad -> .)
    TO              reduce using rule 124 (genera_sum_quad -> .)
    CTEI            reduce using rule 124 (genera_sum_quad -> .)
    CTEF            reduce using rule 124 (genera_sum_quad -> .)
    CTEC            reduce using rule 124 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 124 (genera_sum_quad -> .)
    LPAREN          reduce using rule 124 (genera_sum_quad -> .)
    ID              reduce using rule 124 (genera_sum_quad -> .)
    PLUS            reduce using rule 124 (genera_sum_quad -> .)
    MINUS           reduce using rule 124 (genera_sum_quad -> .)
    MUL             reduce using rule 124 (genera_sum_quad -> .)
    DIV             reduce using rule 124 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 209

state 174

    (123) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (124) genera_sum_quad -> .

    GT              reduce using rule 124 (genera_sum_quad -> .)
    LT              reduce using rule 124 (genera_sum_quad -> .)
    GTE             reduce using rule 124 (genera_sum_quad -> .)
    LTE             reduce using rule 124 (genera_sum_quad -> .)
    NE              reduce using rule 124 (genera_sum_quad -> .)
    COMPARE         reduce using rule 124 (genera_sum_quad -> .)
    AND             reduce using rule 124 (genera_sum_quad -> .)
    OR              reduce using rule 124 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 124 (genera_sum_quad -> .)
    RPAREN          reduce using rule 124 (genera_sum_quad -> .)
    COMMA           reduce using rule 124 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 124 (genera_sum_quad -> .)
    TO              reduce using rule 124 (genera_sum_quad -> .)
    CTEI            reduce using rule 124 (genera_sum_quad -> .)
    CTEF            reduce using rule 124 (genera_sum_quad -> .)
    CTEC            reduce using rule 124 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 124 (genera_sum_quad -> .)
    LPAREN          reduce using rule 124 (genera_sum_quad -> .)
    ID              reduce using rule 124 (genera_sum_quad -> .)
    PLUS            reduce using rule 124 (genera_sum_quad -> .)
    MINUS           reduce using rule 124 (genera_sum_quad -> .)
    MUL             reduce using rule 124 (genera_sum_quad -> .)
    DIV             reduce using rule 124 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 210

state 175

    (131) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (125) genera_mul_quad -> .

    PLUS            reduce using rule 125 (genera_mul_quad -> .)
    MINUS           reduce using rule 125 (genera_mul_quad -> .)
    GT              reduce using rule 125 (genera_mul_quad -> .)
    LT              reduce using rule 125 (genera_mul_quad -> .)
    GTE             reduce using rule 125 (genera_mul_quad -> .)
    LTE             reduce using rule 125 (genera_mul_quad -> .)
    NE              reduce using rule 125 (genera_mul_quad -> .)
    COMPARE         reduce using rule 125 (genera_mul_quad -> .)
    AND             reduce using rule 125 (genera_mul_quad -> .)
    OR              reduce using rule 125 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 125 (genera_mul_quad -> .)
    RPAREN          reduce using rule 125 (genera_mul_quad -> .)
    COMMA           reduce using rule 125 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 125 (genera_mul_quad -> .)
    TO              reduce using rule 125 (genera_mul_quad -> .)
    CTEI            reduce using rule 125 (genera_mul_quad -> .)
    CTEF            reduce using rule 125 (genera_mul_quad -> .)
    CTEC            reduce using rule 125 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 125 (genera_mul_quad -> .)
    LPAREN          reduce using rule 125 (genera_mul_quad -> .)
    ID              reduce using rule 125 (genera_mul_quad -> .)
    MUL             reduce using rule 125 (genera_mul_quad -> .)
    DIV             reduce using rule 125 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 211

state 176

    (132) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (125) genera_mul_quad -> .

    PLUS            reduce using rule 125 (genera_mul_quad -> .)
    MINUS           reduce using rule 125 (genera_mul_quad -> .)
    GT              reduce using rule 125 (genera_mul_quad -> .)
    LT              reduce using rule 125 (genera_mul_quad -> .)
    GTE             reduce using rule 125 (genera_mul_quad -> .)
    LTE             reduce using rule 125 (genera_mul_quad -> .)
    NE              reduce using rule 125 (genera_mul_quad -> .)
    COMPARE         reduce using rule 125 (genera_mul_quad -> .)
    AND             reduce using rule 125 (genera_mul_quad -> .)
    OR              reduce using rule 125 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 125 (genera_mul_quad -> .)
    RPAREN          reduce using rule 125 (genera_mul_quad -> .)
    COMMA           reduce using rule 125 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 125 (genera_mul_quad -> .)
    TO              reduce using rule 125 (genera_mul_quad -> .)
    CTEI            reduce using rule 125 (genera_mul_quad -> .)
    CTEF            reduce using rule 125 (genera_mul_quad -> .)
    CTEC            reduce using rule 125 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 125 (genera_mul_quad -> .)
    LPAREN          reduce using rule 125 (genera_mul_quad -> .)
    ID              reduce using rule 125 (genera_mul_quad -> .)
    MUL             reduce using rule 125 (genera_mul_quad -> .)
    DIV             reduce using rule 125 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 212

state 177

    (75) llamada -> ID era_call LPAREN aux_exp . RPAREN gosub_quad llena_endproc

    RPAREN          shift and go to state 213


state 178

    (76) aux_exp -> exp .
    (77) aux_exp -> exp . quad_param COMMA aux_exp quad_param
    (81) quad_param -> .

    RPAREN          reduce using rule 76 (aux_exp -> exp .)
    COMMA           reduce using rule 81 (quad_param -> .)

    quad_param                     shift and go to state 214

state 179

    (78) aux_exp -> empty .
    (24) var1 -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 24 (var1 -> empty .)
    MUL             reduce using rule 24 (var1 -> empty .)
    DIV             reduce using rule 24 (var1 -> empty .)
    PLUS            reduce using rule 24 (var1 -> empty .)
    MINUS           reduce using rule 24 (var1 -> empty .)
    GT              reduce using rule 24 (var1 -> empty .)
    LT              reduce using rule 24 (var1 -> empty .)
    GTE             reduce using rule 24 (var1 -> empty .)
    LTE             reduce using rule 24 (var1 -> empty .)
    NE              reduce using rule 24 (var1 -> empty .)
    COMPARE         reduce using rule 24 (var1 -> empty .)
    AND             reduce using rule 24 (var1 -> empty .)
    OR              reduce using rule 24 (var1 -> empty .)
    COMMA           reduce using rule 24 (var1 -> empty .)
    RPAREN          reduce using rule 24 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 78 (aux_exp -> empty .) ]


state 180

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RCURLY end_func

    LCURLY          shift and go to state 215


state 181

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    LCURLY          shift and go to state 216


state 182

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 217


state 183

    (50) statement -> statement1 statement .

    RCURLY          reduce using rule 50 (statement -> statement1 statement .)
    RETURN          reduce using rule 50 (statement -> statement1 statement .)


state 184

    (52) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 52 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 52 (statement1 -> asignacion SEMICOLON .)


state 185

    (53) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 53 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 53 (statement1 -> llamada SEMICOLON .)


state 186

    (54) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 54 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 54 (statement1 -> lectura SEMICOLON .)


state 187

    (55) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 55 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 55 (statement1 -> escritura SEMICOLON .)


state 188

    (59) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> ID saveId2 . mat EQUALS addOperadorName exp genera_quad_asignacion
    (31) arr -> . LBRACKET CTEI RBRACKET
    (32) arr -> . LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (35) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (36) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 218
    LBRACKET        shift and go to state 52

    arr                            shift and go to state 219
    mat                            shift and go to state 220

state 189

    (102) lectura -> READ operatorRead . LPAREN exp operatorReadQuad RPAREN

    LPAREN          shift and go to state 221


state 190

    (95) escritura -> PRINT LPAREN . operadorPrint escritura1 operatorPrintQuad RPAREN
    (126) operadorPrint -> .

    COMILLA         reduce using rule 126 (operadorPrint -> .)
    CTEI            reduce using rule 126 (operadorPrint -> .)
    CTEF            reduce using rule 126 (operadorPrint -> .)
    CTEC            reduce using rule 126 (operadorPrint -> .)
    CTESTRING       reduce using rule 126 (operadorPrint -> .)
    LPAREN          reduce using rule 126 (operadorPrint -> .)
    ID              reduce using rule 126 (operadorPrint -> .)
    RPAREN          reduce using rule 126 (operadorPrint -> .)
    COMMA           reduce using rule 126 (operadorPrint -> .)
    OR              reduce using rule 126 (operadorPrint -> .)
    AND             reduce using rule 126 (operadorPrint -> .)
    GT              reduce using rule 126 (operadorPrint -> .)
    LT              reduce using rule 126 (operadorPrint -> .)
    GTE             reduce using rule 126 (operadorPrint -> .)
    LTE             reduce using rule 126 (operadorPrint -> .)
    NE              reduce using rule 126 (operadorPrint -> .)
    COMPARE         reduce using rule 126 (operadorPrint -> .)
    PLUS            reduce using rule 126 (operadorPrint -> .)
    MINUS           reduce using rule 126 (operadorPrint -> .)
    MUL             reduce using rule 126 (operadorPrint -> .)
    DIV             reduce using rule 126 (operadorPrint -> .)

    operadorPrint                  shift and go to state 222

state 191

    (88) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end

    LPAREN          shift and go to state 223


state 192

    (83) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    exp                            shift and go to state 224
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 193

    (94) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 225


state 194

    (65) param1 -> ID COMMA var1 addV .

    RPAREN          reduce using rule 65 (param1 -> ID COMMA var1 addV .)
    INT             reduce using rule 65 (param1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 65 (param1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 65 (param1 -> ID COMMA var1 addV .)


state 195

    (67) param1 -> ID arr COMMA var1 . addV
    (25) addV -> .

    RPAREN          reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)

    addV                           shift and go to state 226

state 196

    (68) param1 -> ID mat COMMA var1 . addV
    (25) addV -> .

    RPAREN          reduce using rule 25 (addV -> .)
    INT             reduce using rule 25 (addV -> .)
    FLOAT           reduce using rule 25 (addV -> .)
    CHAR            reduce using rule 25 (addV -> .)

    addV                           shift and go to state 227

state 197

    (33) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 198

    (36) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 36 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 199

    (34) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 200

    (35) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 35 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 201

    (104) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 104 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 104 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 104 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 104 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 104 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 202

    (112) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 112 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 203

    (115) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 115 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 204

    (116) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 116 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 205

    (117) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 117 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 206

    (118) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 118 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 207

    (119) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 119 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 208

    (120) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 120 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 209

    (122) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 122 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 210

    (123) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 123 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 211

    (131) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 131 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 212

    (132) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 132 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 213

    (75) llamada -> ID era_call LPAREN aux_exp RPAREN . gosub_quad llena_endproc
    (82) gosub_quad -> .

    MUL             reduce using rule 82 (gosub_quad -> .)
    DIV             reduce using rule 82 (gosub_quad -> .)
    PLUS            reduce using rule 82 (gosub_quad -> .)
    MINUS           reduce using rule 82 (gosub_quad -> .)
    GT              reduce using rule 82 (gosub_quad -> .)
    LT              reduce using rule 82 (gosub_quad -> .)
    GTE             reduce using rule 82 (gosub_quad -> .)
    LTE             reduce using rule 82 (gosub_quad -> .)
    NE              reduce using rule 82 (gosub_quad -> .)
    COMPARE         reduce using rule 82 (gosub_quad -> .)
    AND             reduce using rule 82 (gosub_quad -> .)
    OR              reduce using rule 82 (gosub_quad -> .)
    RBRACKET        reduce using rule 82 (gosub_quad -> .)
    RPAREN          reduce using rule 82 (gosub_quad -> .)
    COMMA           reduce using rule 82 (gosub_quad -> .)
    SEMICOLON       reduce using rule 82 (gosub_quad -> .)
    TO              reduce using rule 82 (gosub_quad -> .)
    CTEI            reduce using rule 82 (gosub_quad -> .)
    CTEF            reduce using rule 82 (gosub_quad -> .)
    CTEC            reduce using rule 82 (gosub_quad -> .)
    CTESTRING       reduce using rule 82 (gosub_quad -> .)
    LPAREN          reduce using rule 82 (gosub_quad -> .)
    ID              reduce using rule 82 (gosub_quad -> .)

    gosub_quad                     shift and go to state 228

state 214

    (77) aux_exp -> exp quad_param . COMMA aux_exp quad_param

    COMMA           shift and go to state 229


state 215

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (140) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 140 (empty -> .)
    READ            reduce using rule 140 (empty -> .)
    PRINT           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    RCURLY          reduce using rule 140 (empty -> .)

    vars                           shift and go to state 230
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 216

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (14) vars -> . var
    (15) vars -> . empty
    (16) var -> . VAR var2
    (140) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 140 (empty -> .)
    READ            reduce using rule 140 (empty -> .)
    PRINT           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    RETURN          reduce using rule 140 (empty -> .)

    vars                           shift and go to state 231
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 217

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 218

    (59) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 232

state 219

    (60) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 233


state 220

    (61) asignacion -> ID saveId2 mat . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 234


state 221

    (102) lectura -> READ operatorRead LPAREN . exp operatorReadQuad RPAREN
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    exp                            shift and go to state 235
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 222

    (95) escritura -> PRINT LPAREN operadorPrint . escritura1 operatorPrintQuad RPAREN
    (96) escritura1 -> . escritura2 COMMA escritura2
    (97) escritura1 -> . escritura2
    (98) escritura2 -> . COMILLA CTESTRING COMILLA
    (99) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (100) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (101) escritura2 -> . exp
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    COMILLA         shift and go to state 238
    CTEI            shift and go to state 239
    CTEF            shift and go to state 240
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    escritura1                     shift and go to state 236
    escritura2                     shift and go to state 237
    exp                            shift and go to state 241
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 223

    (88) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (89) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 243

    for1                           shift and go to state 242

state 224

    (83) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 244


state 225

    (94) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    exp                            shift and go to state 245
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 226

    (67) param1 -> ID arr COMMA var1 addV .

    RPAREN          reduce using rule 67 (param1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 67 (param1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 67 (param1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 67 (param1 -> ID arr COMMA var1 addV .)


state 227

    (68) param1 -> ID mat COMMA var1 addV .

    RPAREN          reduce using rule 68 (param1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 68 (param1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 68 (param1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 68 (param1 -> ID mat COMMA var1 addV .)


state 228

    (75) llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad . llena_endproc
    (79) llena_endproc -> .

    MUL             reduce using rule 79 (llena_endproc -> .)
    DIV             reduce using rule 79 (llena_endproc -> .)
    PLUS            reduce using rule 79 (llena_endproc -> .)
    MINUS           reduce using rule 79 (llena_endproc -> .)
    GT              reduce using rule 79 (llena_endproc -> .)
    LT              reduce using rule 79 (llena_endproc -> .)
    GTE             reduce using rule 79 (llena_endproc -> .)
    LTE             reduce using rule 79 (llena_endproc -> .)
    NE              reduce using rule 79 (llena_endproc -> .)
    COMPARE         reduce using rule 79 (llena_endproc -> .)
    AND             reduce using rule 79 (llena_endproc -> .)
    OR              reduce using rule 79 (llena_endproc -> .)
    RBRACKET        reduce using rule 79 (llena_endproc -> .)
    RPAREN          reduce using rule 79 (llena_endproc -> .)
    COMMA           reduce using rule 79 (llena_endproc -> .)
    SEMICOLON       reduce using rule 79 (llena_endproc -> .)
    TO              reduce using rule 79 (llena_endproc -> .)
    CTEI            reduce using rule 79 (llena_endproc -> .)
    CTEF            reduce using rule 79 (llena_endproc -> .)
    CTEC            reduce using rule 79 (llena_endproc -> .)
    CTESTRING       reduce using rule 79 (llena_endproc -> .)
    LPAREN          reduce using rule 79 (llena_endproc -> .)
    ID              reduce using rule 79 (llena_endproc -> .)

    llena_endproc                  shift and go to state 246

state 229

    (77) aux_exp -> exp quad_param COMMA . aux_exp quad_param
    (76) aux_exp -> . exp
    (77) aux_exp -> . exp quad_param COMMA aux_exp quad_param
    (78) aux_exp -> . empty
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (140) empty -> .
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc

    RPAREN          reduce using rule 140 (empty -> .)
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    COMMA           reduce using rule 140 (empty -> .)
    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79

    exp                            shift and go to state 178
    aux_exp                        shift and go to state 247
    empty                          shift and go to state 179
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77

state 230

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RCURLY end_func
    (46) fun_goto -> .

    ID              reduce using rule 46 (fun_goto -> .)
    READ            reduce using rule 46 (fun_goto -> .)
    PRINT           reduce using rule 46 (fun_goto -> .)
    FOR             reduce using rule 46 (fun_goto -> .)
    IF              reduce using rule 46 (fun_goto -> .)
    WHILE           reduce using rule 46 (fun_goto -> .)
    RCURLY          reduce using rule 46 (fun_goto -> .)

    fun_goto                       shift and go to state 248

state 231

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (46) fun_goto -> .

    ID              reduce using rule 46 (fun_goto -> .)
    READ            reduce using rule 46 (fun_goto -> .)
    PRINT           reduce using rule 46 (fun_goto -> .)
    FOR             reduce using rule 46 (fun_goto -> .)
    IF              reduce using rule 46 (fun_goto -> .)
    WHILE           reduce using rule 46 (fun_goto -> .)
    RETURN          reduce using rule 46 (fun_goto -> .)

    fun_goto                       shift and go to state 249

state 232

    (59) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    exp                            shift and go to state 250
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 233

    (60) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 251

state 234

    (61) asignacion -> ID saveId2 mat EQUALS . addOperadorName exp genera_quad_asignacion
    (63) addOperadorName -> .

    CTEI            reduce using rule 63 (addOperadorName -> .)
    CTEF            reduce using rule 63 (addOperadorName -> .)
    CTEC            reduce using rule 63 (addOperadorName -> .)
    CTESTRING       reduce using rule 63 (addOperadorName -> .)
    LPAREN          reduce using rule 63 (addOperadorName -> .)
    ID              reduce using rule 63 (addOperadorName -> .)
    OR              reduce using rule 63 (addOperadorName -> .)
    AND             reduce using rule 63 (addOperadorName -> .)
    GT              reduce using rule 63 (addOperadorName -> .)
    LT              reduce using rule 63 (addOperadorName -> .)
    GTE             reduce using rule 63 (addOperadorName -> .)
    LTE             reduce using rule 63 (addOperadorName -> .)
    NE              reduce using rule 63 (addOperadorName -> .)
    COMPARE         reduce using rule 63 (addOperadorName -> .)
    PLUS            reduce using rule 63 (addOperadorName -> .)
    MINUS           reduce using rule 63 (addOperadorName -> .)
    MUL             reduce using rule 63 (addOperadorName -> .)
    DIV             reduce using rule 63 (addOperadorName -> .)
    SEMICOLON       reduce using rule 63 (addOperadorName -> .)
    TO              reduce using rule 63 (addOperadorName -> .)

    addOperadorName                shift and go to state 252

state 235

    (102) lectura -> READ operatorRead LPAREN exp . operatorReadQuad RPAREN
    (129) operatorReadQuad -> .

    RPAREN          reduce using rule 129 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 253

state 236

    (95) escritura -> PRINT LPAREN operadorPrint escritura1 . operatorPrintQuad RPAREN
    (127) operatorPrintQuad -> .

    RPAREN          reduce using rule 127 (operatorPrintQuad -> .)

    operatorPrintQuad              shift and go to state 254

state 237

    (96) escritura1 -> escritura2 . COMMA escritura2
    (97) escritura1 -> escritura2 .

    COMMA           shift and go to state 255
    RPAREN          reduce using rule 97 (escritura1 -> escritura2 .)


state 238

    (98) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 256


state 239

    (99) escritura2 -> CTEI . saveCTE operatorPrintQuad
    (134) pexp -> CTEI . saveCTE
    (143) saveCTE -> .

    COMMA           reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 257

state 240

    (100) escritura2 -> CTEF . saveCTE operatorPrintQuad
    (135) pexp -> CTEF . saveCTE
    (143) saveCTE -> .

    COMMA           reduce using rule 143 (saveCTE -> .)
    RPAREN          reduce using rule 143 (saveCTE -> .)
    MUL             reduce using rule 143 (saveCTE -> .)
    DIV             reduce using rule 143 (saveCTE -> .)
    PLUS            reduce using rule 143 (saveCTE -> .)
    MINUS           reduce using rule 143 (saveCTE -> .)
    GT              reduce using rule 143 (saveCTE -> .)
    LT              reduce using rule 143 (saveCTE -> .)
    GTE             reduce using rule 143 (saveCTE -> .)
    LTE             reduce using rule 143 (saveCTE -> .)
    NE              reduce using rule 143 (saveCTE -> .)
    COMPARE         reduce using rule 143 (saveCTE -> .)
    AND             reduce using rule 143 (saveCTE -> .)
    OR              reduce using rule 143 (saveCTE -> .)

    saveCTE                        shift and go to state 258

state 241

    (101) escritura2 -> exp .

    COMMA           reduce using rule 101 (escritura2 -> exp .)
    RPAREN          reduce using rule 101 (escritura2 -> exp .)


state 242

    (88) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY for_end

    RPAREN          shift and go to state 259


state 243

    (89) for1 -> FROM . asignacion TO exp
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 261

    asignacion                     shift and go to state 260

state 244

    (83) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (108) if_quad -> .

    LCURLY          reduce using rule 108 (if_quad -> .)

    if_quad                        shift and go to state 262

state 245

    (94) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 263


state 246

    (75) llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .

    MUL             reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    DIV             reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    PLUS            reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    MINUS           reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    GT              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    LT              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    GTE             reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    LTE             reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    NE              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    COMPARE         reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    AND             reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    OR              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    RBRACKET        reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    RPAREN          reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    COMMA           reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    SEMICOLON       reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    TO              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    CTEI            reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    CTEF            reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    CTEC            reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    CTESTRING       reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    LPAREN          reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)
    ID              reduce using rule 75 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc .)


state 247

    (77) aux_exp -> exp quad_param COMMA aux_exp . quad_param
    (81) quad_param -> .

    RPAREN          reduce using rule 81 (quad_param -> .)

    quad_param                     shift and go to state 264

state 248

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RCURLY end_func
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 265
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 249

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RETURN          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 266
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 250

    (59) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (62) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 62 (genera_quad_asignacion -> .)
    TO              reduce using rule 62 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 267

state 251

    (60) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    exp                            shift and go to state 268
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 252

    (61) asignacion -> ID saveId2 mat EQUALS addOperadorName . exp genera_quad_asignacion
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)
    TO              reduce using rule 140 (empty -> .)

    exp                            shift and go to state 269
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 253

    (102) lectura -> READ operatorRead LPAREN exp operatorReadQuad . RPAREN

    RPAREN          shift and go to state 270


state 254

    (95) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad . RPAREN

    RPAREN          shift and go to state 271


state 255

    (96) escritura1 -> escritura2 COMMA . escritura2
    (98) escritura2 -> . COMILLA CTESTRING COMILLA
    (99) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (100) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (101) escritura2 -> . exp
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    COMILLA         shift and go to state 238
    CTEI            shift and go to state 239
    CTEF            shift and go to state 240
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    escritura2                     shift and go to state 272
    exp                            shift and go to state 241
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 256

    (98) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 273


state 257

    (99) escritura2 -> CTEI saveCTE . operatorPrintQuad
    (134) pexp -> CTEI saveCTE .
    (127) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 127 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 127 (operatorPrintQuad -> .)
    MUL             reduce using rule 134 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 134 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 134 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 134 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 134 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 134 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 134 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 134 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 134 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 134 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 134 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 134 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 127 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 127 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 134 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 134 (pexp -> CTEI saveCTE .) ]

    operatorPrintQuad              shift and go to state 274

state 258

    (100) escritura2 -> CTEF saveCTE . operatorPrintQuad
    (135) pexp -> CTEF saveCTE .
    (127) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 127 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 127 (operatorPrintQuad -> .)
    MUL             reduce using rule 135 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 135 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 135 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 135 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 135 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 135 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 135 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 135 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 135 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 135 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 135 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 135 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 127 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 127 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 135 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 135 (pexp -> CTEF saveCTE .) ]

    operatorPrintQuad              shift and go to state 275

state 259

    (88) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY for_end
    (87) for_quad -> .

    LCURLY          reduce using rule 87 (for_quad -> .)

    for_quad                       shift and go to state 276

state 260

    (89) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 277


state 261

    (59) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (142) saveId2 -> .

    EQUALS          reduce using rule 142 (saveId2 -> .)
    LBRACKET        reduce using rule 142 (saveId2 -> .)

    saveId2                        shift and go to state 188

state 262

    (83) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 278


state 263

    (94) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement RCURLY loop_end
    (92) while_quad -> .

    LCURLY          reduce using rule 92 (while_quad -> .)

    while_quad                     shift and go to state 279

state 264

    (77) aux_exp -> exp quad_param COMMA aux_exp quad_param .

    RPAREN          reduce using rule 77 (aux_exp -> exp quad_param COMMA aux_exp quad_param .)


state 265

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RCURLY end_func

    RCURLY          shift and go to state 280


state 266

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func

    RETURN          shift and go to state 281


state 267

    (59) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 59 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 59 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 268

    (60) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (62) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 62 (genera_quad_asignacion -> .)
    TO              reduce using rule 62 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 282

state 269

    (61) asignacion -> ID saveId2 mat EQUALS addOperadorName exp . genera_quad_asignacion
    (62) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 62 (genera_quad_asignacion -> .)
    TO              reduce using rule 62 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 283

state 270

    (102) lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 102 (lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .)


state 271

    (95) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .

    SEMICOLON       reduce using rule 95 (escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .)


state 272

    (96) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 96 (escritura1 -> escritura2 COMMA escritura2 .)


state 273

    (98) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 98 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 98 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 274

    (99) escritura2 -> CTEI saveCTE operatorPrintQuad .

    COMMA           reduce using rule 99 (escritura2 -> CTEI saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 99 (escritura2 -> CTEI saveCTE operatorPrintQuad .)


state 275

    (100) escritura2 -> CTEF saveCTE operatorPrintQuad .

    COMMA           reduce using rule 100 (escritura2 -> CTEF saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 100 (escritura2 -> CTEF saveCTE operatorPrintQuad .)


state 276

    (88) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY for_end

    LCURLY          shift and go to state 284


state 277

    (89) for1 -> FROM asignacion TO . exp
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    RPAREN          reduce using rule 140 (empty -> .)

    exp                            shift and go to state 285
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 278

    (83) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 286
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 279

    (94) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 287


state 280

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY . end_func
    (47) end_func -> .

    FUN             reduce using rule 47 (end_func -> .)
    MAIN            reduce using rule 47 (end_func -> .)
    $end            reduce using rule 47 (end_func -> .)

    end_func                       shift and go to state 288

state 281

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY end_func
    (48) operadorReturn -> .

    CTEI            reduce using rule 48 (operadorReturn -> .)
    CTEF            reduce using rule 48 (operadorReturn -> .)
    CTEC            reduce using rule 48 (operadorReturn -> .)
    CTESTRING       reduce using rule 48 (operadorReturn -> .)
    LPAREN          reduce using rule 48 (operadorReturn -> .)
    ID              reduce using rule 48 (operadorReturn -> .)
    SEMICOLON       reduce using rule 48 (operadorReturn -> .)
    OR              reduce using rule 48 (operadorReturn -> .)
    AND             reduce using rule 48 (operadorReturn -> .)
    GT              reduce using rule 48 (operadorReturn -> .)
    LT              reduce using rule 48 (operadorReturn -> .)
    GTE             reduce using rule 48 (operadorReturn -> .)
    LTE             reduce using rule 48 (operadorReturn -> .)
    NE              reduce using rule 48 (operadorReturn -> .)
    COMPARE         reduce using rule 48 (operadorReturn -> .)
    PLUS            reduce using rule 48 (operadorReturn -> .)
    MINUS           reduce using rule 48 (operadorReturn -> .)
    MUL             reduce using rule 48 (operadorReturn -> .)
    DIV             reduce using rule 48 (operadorReturn -> .)

    operadorReturn                 shift and go to state 289

state 282

    (60) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 60 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 60 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 283

    (61) asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 61 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 61 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)


state 284

    (88) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY for_end
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 290
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 285

    (89) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 89 (for1 -> FROM asignacion TO exp .)


state 286

    (83) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 291


state 287

    (94) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement RCURLY loop_end
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 292
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 288

    (44) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .

    FUN             reduce using rule 44 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    MAIN            reduce using rule 44 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)
    $end            reduce using rule 44 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RCURLY end_func .)


state 289

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY end_func
    (103) exp -> . nexp
    (104) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (111) nexp -> . compexp
    (112) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (113) compexp -> . sumexp
    (114) compexp -> . compexp1 sumexp
    (121) sumexp -> . mulexp
    (122) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (123) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (115) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (118) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (119) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (120) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (130) mulexp -> . pexp
    (131) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (132) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (133) pexp -> . var1 saveId
    (134) pexp -> . CTEI saveCTE
    (135) pexp -> . CTEF saveCTE
    (136) pexp -> . CTEC saveCTE
    (137) pexp -> . CTESTRING saveCTE
    (138) pexp -> . llamada
    (139) pexp -> . LPAREN exp RPAREN
    (17) var1 -> . ID
    (18) var1 -> . ID COMMA var1 addV
    (19) var1 -> . ID arr
    (20) var1 -> . ID arr COMMA var1 addV
    (21) var1 -> . ID mat COMMA var1 addV
    (22) var1 -> . ID mat
    (23) var1 -> . ID mat especial
    (24) var1 -> . empty
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (140) empty -> .

    CTEI            shift and go to state 101
    CTEF            shift and go to state 74
    CTEC            shift and go to state 75
    CTESTRING       shift and go to state 76
    LPAREN          shift and go to state 78
    ID              shift and go to state 79
    MUL             reduce using rule 140 (empty -> .)
    DIV             reduce using rule 140 (empty -> .)
    PLUS            reduce using rule 140 (empty -> .)
    MINUS           reduce using rule 140 (empty -> .)
    GT              reduce using rule 140 (empty -> .)
    LT              reduce using rule 140 (empty -> .)
    GTE             reduce using rule 140 (empty -> .)
    LTE             reduce using rule 140 (empty -> .)
    NE              reduce using rule 140 (empty -> .)
    COMPARE         reduce using rule 140 (empty -> .)
    AND             reduce using rule 140 (empty -> .)
    OR              reduce using rule 140 (empty -> .)
    SEMICOLON       reduce using rule 140 (empty -> .)

    exp                            shift and go to state 293
    nexp                           shift and go to state 67
    compexp                        shift and go to state 68
    sumexp                         shift and go to state 69
    compexp1                       shift and go to state 70
    mulexp                         shift and go to state 71
    pexp                           shift and go to state 72
    var1                           shift and go to state 73
    llamada                        shift and go to state 77
    empty                          shift and go to state 36

state 290

    (88) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY for_end

    RCURLY          shift and go to state 294


state 291

    (83) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (84) else -> . ELSE else_quad LCURLY statement RCURLY
    (85) else -> . empty
    (140) empty -> .

    ELSE            shift and go to state 296
    ID              reduce using rule 140 (empty -> .)
    READ            reduce using rule 140 (empty -> .)
    PRINT           reduce using rule 140 (empty -> .)
    FOR             reduce using rule 140 (empty -> .)
    IF              reduce using rule 140 (empty -> .)
    WHILE           reduce using rule 140 (empty -> .)
    RCURLY          reduce using rule 140 (empty -> .)
    RETURN          reduce using rule 140 (empty -> .)

    else                           shift and go to state 295
    empty                          shift and go to state 297

state 292

    (94) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 298


state 293

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY end_func
    (49) quad_return -> .

    SEMICOLON       reduce using rule 49 (quad_return -> .)

    quad_return                    shift and go to state 299

state 294

    (88) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . for_end
    (91) for_end -> .

    ID              reduce using rule 91 (for_end -> .)
    READ            reduce using rule 91 (for_end -> .)
    PRINT           reduce using rule 91 (for_end -> .)
    FOR             reduce using rule 91 (for_end -> .)
    IF              reduce using rule 91 (for_end -> .)
    WHILE           reduce using rule 91 (for_end -> .)
    RCURLY          reduce using rule 91 (for_end -> .)
    RETURN          reduce using rule 91 (for_end -> .)

    for_end                        shift and go to state 300

state 295

    (83) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (109) end_if -> .

    ID              reduce using rule 109 (end_if -> .)
    READ            reduce using rule 109 (end_if -> .)
    PRINT           reduce using rule 109 (end_if -> .)
    FOR             reduce using rule 109 (end_if -> .)
    IF              reduce using rule 109 (end_if -> .)
    WHILE           reduce using rule 109 (end_if -> .)
    RCURLY          reduce using rule 109 (end_if -> .)
    RETURN          reduce using rule 109 (end_if -> .)

    end_if                         shift and go to state 301

state 296

    (84) else -> ELSE . else_quad LCURLY statement RCURLY
    (110) else_quad -> .

    LCURLY          reduce using rule 110 (else_quad -> .)

    else_quad                      shift and go to state 302

state 297

    (85) else -> empty .

    ID              reduce using rule 85 (else -> empty .)
    READ            reduce using rule 85 (else -> empty .)
    PRINT           reduce using rule 85 (else -> empty .)
    FOR             reduce using rule 85 (else -> empty .)
    IF              reduce using rule 85 (else -> empty .)
    WHILE           reduce using rule 85 (else -> empty .)
    RCURLY          reduce using rule 85 (else -> empty .)
    RETURN          reduce using rule 85 (else -> empty .)


state 298

    (94) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY . loop_end
    (90) loop_end -> .

    ID              reduce using rule 90 (loop_end -> .)
    READ            reduce using rule 90 (loop_end -> .)
    PRINT           reduce using rule 90 (loop_end -> .)
    FOR             reduce using rule 90 (loop_end -> .)
    IF              reduce using rule 90 (loop_end -> .)
    WHILE           reduce using rule 90 (loop_end -> .)
    RCURLY          reduce using rule 90 (loop_end -> .)
    RETURN          reduce using rule 90 (loop_end -> .)

    loop_end                       shift and go to state 303

state 299

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY end_func

    SEMICOLON       shift and go to state 304


state 300

    (88) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .

    ID              reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    READ            reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    PRINT           reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    FOR             reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    IF              reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WHILE           reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RCURLY          reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RETURN          reduce using rule 88 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)


state 301

    (83) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    PRINT           reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 83 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 302

    (84) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 305


state 303

    (94) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 94 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)


state 304

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY end_func

    RCURLY          shift and go to state 306


state 305

    (84) else -> ELSE else_quad LCURLY . statement RCURLY
    (50) statement -> . statement1 statement
    (51) statement -> . empty
    (52) statement1 -> . asignacion SEMICOLON
    (53) statement1 -> . llamada SEMICOLON
    (54) statement1 -> . lectura SEMICOLON
    (55) statement1 -> . escritura SEMICOLON
    (56) statement1 -> . for
    (57) statement1 -> . if
    (58) statement1 -> . while
    (140) empty -> .
    (59) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (60) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (61) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (75) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad llena_endproc
    (102) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (95) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (88) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 140 (empty -> .)
    ID              shift and go to state 150
    READ            shift and go to state 151
    PRINT           shift and go to state 152
    FOR             shift and go to state 153
    IF              shift and go to state 154
    WHILE           shift and go to state 155

    statement                      shift and go to state 307
    statement1                     shift and go to state 141
    empty                          shift and go to state 142
    asignacion                     shift and go to state 143
    llamada                        shift and go to state 144
    lectura                        shift and go to state 145
    escritura                      shift and go to state 146
    for                            shift and go to state 147
    if                             shift and go to state 148
    while                          shift and go to state 149

state 306

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY . end_func
    (47) end_func -> .

    FUN             reduce using rule 47 (end_func -> .)
    MAIN            reduce using rule 47 (end_func -> .)
    $end            reduce using rule 47 (end_func -> .)

    end_func                       shift and go to state 308

state 307

    (84) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 309


state 308

    (45) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .

    FUN             reduce using rule 45 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    MAIN            reduce using rule 45 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)
    $end            reduce using rule 45 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars fun_goto statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY end_func .)


state 309

    (84) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    PRINT           reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 84 (else -> ELSE else_quad LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 35 resolved as shift
WARNING: shift/reduce conflict for ID in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 51 resolved as shift
WARNING: shift/reduce conflict for ID in state 59 resolved as shift
WARNING: shift/reduce conflict for ID in state 60 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 65 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 71 resolved as shift
WARNING: shift/reduce conflict for MUL in state 72 resolved as shift
WARNING: shift/reduce conflict for DIV in state 72 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 79 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 126 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 126 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 126 resolved as shift
WARNING: shift/reduce conflict for ID in state 126 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 127 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 127 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 127 resolved as shift
WARNING: shift/reduce conflict for ID in state 127 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 128 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 128 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 128 resolved as shift
WARNING: shift/reduce conflict for ID in state 128 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 129 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 130 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 131 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 131 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 132 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 133 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 134 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 135 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 135 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 161 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 164 resolved as shift
WARNING: reduce/reduce conflict in state 5 resolved using rule (main_end -> <empty>)
WARNING: rejected rule (empty -> <empty>) in state 5
WARNING: reduce/reduce conflict in state 79 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 79
WARNING: reduce/reduce conflict in state 179 resolved using rule (var1 -> empty)
WARNING: rejected rule (aux_exp -> empty) in state 179
WARNING: reduce/reduce conflict in state 257 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 257
WARNING: reduce/reduce conflict in state 258 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 258
WARNING: Rule (aux_exp -> empty) is never reduced
