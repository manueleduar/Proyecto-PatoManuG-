Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars quadMain modules programa2
Rule 4     programa1 -> vars quadMain modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     quadMain -> <empty>
Rule 9     tipo -> INT guardaTipoVar
Rule 10    tipo -> FLOAT guardaTipoVar
Rule 11    tipo -> CHAR guardaTipoVar
Rule 12    guardaTipoVar -> <empty>
Rule 13    vars -> var
Rule 14    vars -> empty
Rule 15    var -> VAR var2
Rule 16    var1 -> ID
Rule 17    var1 -> ID COMMA var1 addV
Rule 18    var1 -> ID arr
Rule 19    var1 -> ID arr COMMA var1 addV
Rule 20    var1 -> ID mat COMMA var1 addV
Rule 21    var1 -> ID mat
Rule 22    var1 -> ID mat especial
Rule 23    var1 -> empty
Rule 24    addV -> <empty>
Rule 25    var2 -> var2 tipo var1 SEMICOLON addV
Rule 26    var2 -> empty
Rule 27    especial -> TRANSPUESTA
Rule 28    especial -> INVERSA
Rule 29    especial -> DETERMINANTE
Rule 30    arr -> LBRACKET CTEI RBRACKET
Rule 31    arr -> LBRACKET exp RBRACKET
Rule 32    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 34    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 35    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 36    modules -> function modules
Rule 37    modules -> empty
Rule 38    save_fun -> <empty>
Rule 39    function -> FUN VOID function1 end_func
Rule 40    function -> FUN INT function2 end_func
Rule 41    function -> FUN CHAR function2 end_func
Rule 42    function -> FUN FLOAT function2 end_func
Rule 43    function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 44    function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
Rule 45    end_func -> <empty>
Rule 46    operadorReturn -> <empty>
Rule 47    quad_return -> <empty>
Rule 48    statement -> statement1 statement
Rule 49    statement -> empty
Rule 50    statement1 -> asignacion SEMICOLON
Rule 51    statement1 -> llamada SEMICOLON
Rule 52    statement1 -> lectura SEMICOLON
Rule 53    statement1 -> escritura SEMICOLON
Rule 54    statement1 -> for
Rule 55    statement1 -> if
Rule 56    statement1 -> while
Rule 57    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 58    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 59    asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 60    genera_quad_asignacion -> <empty>
Rule 61    addOperadorName -> <empty>
Rule 62    param1 -> ID addV
Rule 63    param1 -> ID COMMA var1 addV
Rule 64    param1 -> ID arr
Rule 65    param1 -> ID arr COMMA var1 addV
Rule 66    param1 -> ID mat COMMA var1 addV
Rule 67    param1 -> ID mat
Rule 68    param1 -> ID mat especial
Rule 69    param1 -> empty
Rule 70    addParam -> <empty>
Rule 71    param2 -> param2 tipo param1 addV addParam
Rule 72    param2 -> empty
Rule 73    llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad
Rule 74    aux_exp -> exp
Rule 75    aux_exp -> exp quad_param COMMA aux_exp quad_param
Rule 76    aux_exp -> empty
Rule 77    era_call -> <empty>
Rule 78    quad_param -> <empty>
Rule 79    gosub_quad -> <empty>
Rule 80    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 81    else -> ELSE else_quad LCURLY statement RCURLY
Rule 82    else -> empty
Rule 83    for_op -> <empty>
Rule 84    for_quad -> <empty>
Rule 85    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
Rule 86    for1 -> FROM asignacion TO exp
Rule 87    loop_end -> <empty>
Rule 88    for_end -> <empty>
Rule 89    while_quad -> <empty>
Rule 90    while_op -> <empty>
Rule 91    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
Rule 92    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 93    escritura1 -> escritura2 COMMA escritura2
Rule 94    escritura1 -> escritura2
Rule 95    escritura2 -> COMILLA CTESTRING COMILLA
Rule 96    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 97    escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 98    escritura2 -> exp
Rule 99    lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN
Rule 100   exp -> nexp
Rule 101   exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 102   genera_quad_or -> <empty>
Rule 103   genera_quad_and -> <empty>
Rule 104   compare_quad -> <empty>
Rule 105   if_quad -> <empty>
Rule 106   end_if -> <empty>
Rule 107   else_quad -> <empty>
Rule 108   nexp -> compexp
Rule 109   nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 110   compexp -> sumexp
Rule 111   compexp -> compexp1 sumexp
Rule 112   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 113   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 114   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 115   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 116   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 117   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 118   sumexp -> mulexp
Rule 119   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 120   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 121   genera_sum_quad -> <empty>
Rule 122   genera_mul_quad -> <empty>
Rule 123   operadorPrint -> <empty>
Rule 124   operatorPrintQuad -> <empty>
Rule 125   operatorRead -> <empty>
Rule 126   operatorReadQuad -> <empty>
Rule 127   mulexp -> pexp
Rule 128   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 129   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 130   pexp -> var1 saveId
Rule 131   pexp -> CTEI saveCTE
Rule 132   pexp -> CTEF saveCTE
Rule 133   pexp -> CTEC saveCTE
Rule 134   pexp -> CTESTRING saveCTE
Rule 135   pexp -> llamada
Rule 136   pexp -> LPAREN exp RPAREN
Rule 137   empty -> <empty>
Rule 138   saveId -> <empty>
Rule 139   saveId2 -> <empty>
Rule 140   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 109
CHAR                 : 11 41
COMILLA              : 95 95
COMMA                : 17 19 20 63 65 66 75 93
COMPARE              : 117
CTEC                 : 133
CTEF                 : 97 132
CTEI                 : 30 32 32 34 35 96 131
CTESTRING            : 95 134
DETERMINANTE         : 29
DIV                  : 129
ELSE                 : 81
END                  : 7
EQUALS               : 57 58 59
FLOAT                : 10 42
FOR                  : 85
FROM                 : 86
FUN                  : 39 40 41 42
GT                   : 112
GTE                  : 114
ID                   : 1 16 17 18 19 20 21 22 43 44 57 58 59 62 63 64 65 66 67 68 73
IF                   : 80
INT                  : 9 40
INVERSA              : 28
LBRACKET             : 30 31 32 32 33 33 34 34 35 35
LCURLY               : 7 43 44 80 81 85 91
LPAREN               : 7 43 44 73 80 85 91 92 99 136
LT                   : 113
LTE                  : 115
MAIN                 : 7
MINUS                : 120
MUL                  : 128
NE                   : 116
OR                   : 101
PLUS                 : 119
PRINT                : 92
PROGRAM              : 1
RBRACKET             : 30 31 32 32 33 33 34 34 35 35
RCURLY               : 7 43 44 80 81 85 91
READ                 : 99
RETURN               : 44
RPAREN               : 7 43 44 73 80 85 91 92 99 136
SEMICOLON            : 1 25 43 44 44 50 51 52 53
TO                   : 86
TRANSPUESTA          : 27
VAR                  : 15
VOID                 : 39
WHILE                : 91
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 57 58 59 101 109 112 113 114 115 116 117 119 120 128 129
addP                 : 1
addParam             : 71
addV                 : 17 19 20 25 62 63 65 66 71
arr                  : 18 19 58 64 65
asignacion           : 50 86
aux_exp              : 73 75
compare_quad         : 112 113 114 115 116 117
compexp              : 108 109 109
compexp1             : 111
else                 : 80
else_quad            : 81
empty                : 14 23 26 37 49 69 72 76 82
end_func             : 39 40 41 42
end_if               : 80
era_call             : 73
escritura            : 53
escritura1           : 92
escritura2           : 93 93 94
especial             : 22 68
exp                  : 31 33 33 34 35 44 57 58 59 74 75 80 86 91 98 99 136
for                  : 54
for1                 : 85
for_end              : 85
for_op               : 85
for_quad             : 85
function             : 36
function1            : 39
function2            : 40 41 42
genera_mul_quad      : 128 129
genera_quad_and      : 109
genera_quad_asignacion : 57 58 59
genera_quad_or       : 101
genera_sum_quad      : 119 120
gosub_quad           : 73
guardaTipoVar        : 9 10 11
if                   : 55
if_quad              : 80
lectura              : 52
llamada              : 51 135
loop_end             : 91
main                 : 6
mat                  : 20 21 22 59 66 67 68
modules              : 3 4 36
mulexp               : 118 119 119 120 120
nexp                 : 100 101 101
operadorPrint        : 92
operadorReturn       : 44
operatorPrintQuad    : 92 96 97
operatorRead         : 99
operatorReadQuad     : 99
param1               : 71
param2               : 7 43 44 71
pexp                 : 127 128 128 129 129
programa             : 0
programa1            : 1
programa2            : 3 5
quadMain             : 3 4
quad_param           : 75 75
quad_return          : 44
saveCTE              : 96 97 131 132 133 134
saveId               : 130
saveId2              : 57 58 59
save_fun             : 7 43 44
statement            : 7 43 44 48 80 81 85 91
statement1           : 48
sumexp               : 110 111 112 112 113 113 114 114 115 115 116 116 117 117
tipo                 : 25 71
var                  : 13
var1                 : 17 19 20 25 63 65 66 130
var2                 : 15 25
vars                 : 3 4 7 43 44
while                : 56
while_op             : 91
while_quad           : 91

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUN             reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars quadMain modules programa2
    (4) programa1 -> . vars quadMain modules
    (5) programa1 -> . programa2
    (13) vars -> . var
    (14) vars -> . empty
    (6) programa2 -> . main
    (15) var -> . VAR var2
    (137) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 137 (empty -> .)
    $end            reduce using rule 137 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 137 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . quadMain modules programa2
    (4) programa1 -> vars . quadMain modules
    (8) quadMain -> .

    FUN             reduce using rule 8 (quadMain -> .)
    MAIN            reduce using rule 8 (quadMain -> .)
    $end            reduce using rule 8 (quadMain -> .)

    quadMain                       shift and go to state 14

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (13) vars -> var .

    FUN             reduce using rule 13 (vars -> var .)
    MAIN            reduce using rule 13 (vars -> var .)
    $end            reduce using rule 13 (vars -> var .)
    ID              reduce using rule 13 (vars -> var .)
    READ            reduce using rule 13 (vars -> var .)
    PRINT           reduce using rule 13 (vars -> var .)
    FOR             reduce using rule 13 (vars -> var .)
    IF              reduce using rule 13 (vars -> var .)
    WHILE           reduce using rule 13 (vars -> var .)
    RCURLY          reduce using rule 13 (vars -> var .)
    RETURN          reduce using rule 13 (vars -> var .)


state 10

    (14) vars -> empty .

    FUN             reduce using rule 14 (vars -> empty .)
    MAIN            reduce using rule 14 (vars -> empty .)
    $end            reduce using rule 14 (vars -> empty .)
    ID              reduce using rule 14 (vars -> empty .)
    READ            reduce using rule 14 (vars -> empty .)
    PRINT           reduce using rule 14 (vars -> empty .)
    FOR             reduce using rule 14 (vars -> empty .)
    IF              reduce using rule 14 (vars -> empty .)
    WHILE           reduce using rule 14 (vars -> empty .)
    RCURLY          reduce using rule 14 (vars -> empty .)
    RETURN          reduce using rule 14 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (15) var -> VAR . var2
    (25) var2 -> . var2 tipo var1 SEMICOLON addV
    (26) var2 -> . empty
    (137) empty -> .

    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)
    FUN             reduce using rule 137 (empty -> .)
    MAIN            reduce using rule 137 (empty -> .)
    $end            reduce using rule 137 (empty -> .)
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    PRINT           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    RCURLY          reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    var2                           shift and go to state 15
    empty                          shift and go to state 16

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (38) save_fun -> .

    LPAREN          reduce using rule 38 (save_fun -> .)

    save_fun                       shift and go to state 17

state 14

    (3) programa1 -> vars quadMain . modules programa2
    (4) programa1 -> vars quadMain . modules
    (36) modules -> . function modules
    (37) modules -> . empty
    (39) function -> . FUN VOID function1 end_func
    (40) function -> . FUN INT function2 end_func
    (41) function -> . FUN CHAR function2 end_func
    (42) function -> . FUN FLOAT function2 end_func
    (137) empty -> .

    FUN             shift and go to state 21
    MAIN            reduce using rule 137 (empty -> .)
    $end            reduce using rule 137 (empty -> .)

    modules                        shift and go to state 18
    function                       shift and go to state 19
    empty                          shift and go to state 20

state 15

    (15) var -> VAR var2 .
    (25) var2 -> var2 . tipo var1 SEMICOLON addV
    (9) tipo -> . INT guardaTipoVar
    (10) tipo -> . FLOAT guardaTipoVar
    (11) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 15 (var -> VAR var2 .)
    MAIN            reduce using rule 15 (var -> VAR var2 .)
    $end            reduce using rule 15 (var -> VAR var2 .)
    ID              reduce using rule 15 (var -> VAR var2 .)
    READ            reduce using rule 15 (var -> VAR var2 .)
    PRINT           reduce using rule 15 (var -> VAR var2 .)
    FOR             reduce using rule 15 (var -> VAR var2 .)
    IF              reduce using rule 15 (var -> VAR var2 .)
    WHILE           reduce using rule 15 (var -> VAR var2 .)
    RCURLY          reduce using rule 15 (var -> VAR var2 .)
    RETURN          reduce using rule 15 (var -> VAR var2 .)
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 22

state 16

    (26) var2 -> empty .

    INT             reduce using rule 26 (var2 -> empty .)
    FLOAT           reduce using rule 26 (var2 -> empty .)
    CHAR            reduce using rule 26 (var2 -> empty .)
    FUN             reduce using rule 26 (var2 -> empty .)
    MAIN            reduce using rule 26 (var2 -> empty .)
    $end            reduce using rule 26 (var2 -> empty .)
    ID              reduce using rule 26 (var2 -> empty .)
    READ            reduce using rule 26 (var2 -> empty .)
    PRINT           reduce using rule 26 (var2 -> empty .)
    FOR             reduce using rule 26 (var2 -> empty .)
    IF              reduce using rule 26 (var2 -> empty .)
    WHILE           reduce using rule 26 (var2 -> empty .)
    RCURLY          reduce using rule 26 (var2 -> empty .)
    RETURN          reduce using rule 26 (var2 -> empty .)


state 17

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 26


state 18

    (3) programa1 -> vars quadMain modules . programa2
    (4) programa1 -> vars quadMain modules .
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars quadMain modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 27
    main                           shift and go to state 11

state 19

    (36) modules -> function . modules
    (36) modules -> . function modules
    (37) modules -> . empty
    (39) function -> . FUN VOID function1 end_func
    (40) function -> . FUN INT function2 end_func
    (41) function -> . FUN CHAR function2 end_func
    (42) function -> . FUN FLOAT function2 end_func
    (137) empty -> .

    FUN             shift and go to state 21
    MAIN            reduce using rule 137 (empty -> .)
    $end            reduce using rule 137 (empty -> .)

    function                       shift and go to state 19
    modules                        shift and go to state 28
    empty                          shift and go to state 20

state 20

    (37) modules -> empty .

    MAIN            reduce using rule 37 (modules -> empty .)
    $end            reduce using rule 37 (modules -> empty .)


state 21

    (39) function -> FUN . VOID function1 end_func
    (40) function -> FUN . INT function2 end_func
    (41) function -> FUN . CHAR function2 end_func
    (42) function -> FUN . FLOAT function2 end_func

    VOID            shift and go to state 29
    INT             shift and go to state 30
    CHAR            shift and go to state 31
    FLOAT           shift and go to state 32


state 22

    (25) var2 -> var2 tipo . var1 SEMICOLON addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

    ID              shift and go to state 34
    SEMICOLON       reduce using rule 137 (empty -> .)

    var1                           shift and go to state 33
    empty                          shift and go to state 35

state 23

    (9) tipo -> INT . guardaTipoVar
    (12) guardaTipoVar -> .

    ID              reduce using rule 12 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 12 (guardaTipoVar -> .)
    RPAREN          reduce using rule 12 (guardaTipoVar -> .)
    INT             reduce using rule 12 (guardaTipoVar -> .)
    FLOAT           reduce using rule 12 (guardaTipoVar -> .)
    CHAR            reduce using rule 12 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 36

state 24

    (10) tipo -> FLOAT . guardaTipoVar
    (12) guardaTipoVar -> .

    ID              reduce using rule 12 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 12 (guardaTipoVar -> .)
    RPAREN          reduce using rule 12 (guardaTipoVar -> .)
    INT             reduce using rule 12 (guardaTipoVar -> .)
    FLOAT           reduce using rule 12 (guardaTipoVar -> .)
    CHAR            reduce using rule 12 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 37

state 25

    (11) tipo -> CHAR . guardaTipoVar
    (12) guardaTipoVar -> .

    ID              reduce using rule 12 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 12 (guardaTipoVar -> .)
    RPAREN          reduce using rule 12 (guardaTipoVar -> .)
    INT             reduce using rule 12 (guardaTipoVar -> .)
    FLOAT           reduce using rule 12 (guardaTipoVar -> .)
    CHAR            reduce using rule 12 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 38

state 26

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (71) param2 -> . param2 tipo param1 addV addParam
    (72) param2 -> . empty
    (137) empty -> .

    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    param2                         shift and go to state 39
    empty                          shift and go to state 40

state 27

    (3) programa1 -> vars quadMain modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars quadMain modules programa2 .)


state 28

    (36) modules -> function modules .

    MAIN            reduce using rule 36 (modules -> function modules .)
    $end            reduce using rule 36 (modules -> function modules .)


state 29

    (39) function -> FUN VOID . function1 end_func
    (43) function1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 42

    function1                      shift and go to state 41

state 30

    (40) function -> FUN INT . function2 end_func
    (44) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 44

    function2                      shift and go to state 43

state 31

    (41) function -> FUN CHAR . function2 end_func
    (44) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 44

    function2                      shift and go to state 45

state 32

    (42) function -> FUN FLOAT . function2 end_func
    (44) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 44

    function2                      shift and go to state 46

state 33

    (25) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 47


state 34

    (16) var1 -> ID .
    (17) var1 -> ID . COMMA var1 addV
    (18) var1 -> ID . arr
    (19) var1 -> ID . arr COMMA var1 addV
    (20) var1 -> ID . mat COMMA var1 addV
    (21) var1 -> ID . mat
    (22) var1 -> ID . mat especial
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 16 (var1 -> ID .)
    MUL             reduce using rule 16 (var1 -> ID .)
    DIV             reduce using rule 16 (var1 -> ID .)
    PLUS            reduce using rule 16 (var1 -> ID .)
    MINUS           reduce using rule 16 (var1 -> ID .)
    GT              reduce using rule 16 (var1 -> ID .)
    LT              reduce using rule 16 (var1 -> ID .)
    GTE             reduce using rule 16 (var1 -> ID .)
    LTE             reduce using rule 16 (var1 -> ID .)
    NE              reduce using rule 16 (var1 -> ID .)
    COMPARE         reduce using rule 16 (var1 -> ID .)
    AND             reduce using rule 16 (var1 -> ID .)
    OR              reduce using rule 16 (var1 -> ID .)
    RBRACKET        reduce using rule 16 (var1 -> ID .)
    RPAREN          reduce using rule 16 (var1 -> ID .)
    TO              reduce using rule 16 (var1 -> ID .)
    INT             reduce using rule 16 (var1 -> ID .)
    FLOAT           reduce using rule 16 (var1 -> ID .)
    CHAR            reduce using rule 16 (var1 -> ID .)
    CTEI            reduce using rule 16 (var1 -> ID .)
    CTEF            reduce using rule 16 (var1 -> ID .)
    CTEC            reduce using rule 16 (var1 -> ID .)
    CTESTRING       reduce using rule 16 (var1 -> ID .)
    LPAREN          reduce using rule 16 (var1 -> ID .)
    ID              reduce using rule 16 (var1 -> ID .)
    COMMA           shift and go to state 48
    LBRACKET        shift and go to state 51

  ! COMMA           [ reduce using rule 16 (var1 -> ID .) ]

    arr                            shift and go to state 49
    mat                            shift and go to state 50

state 35

    (23) var1 -> empty .

    SEMICOLON       reduce using rule 23 (var1 -> empty .)
    MUL             reduce using rule 23 (var1 -> empty .)
    DIV             reduce using rule 23 (var1 -> empty .)
    PLUS            reduce using rule 23 (var1 -> empty .)
    MINUS           reduce using rule 23 (var1 -> empty .)
    GT              reduce using rule 23 (var1 -> empty .)
    LT              reduce using rule 23 (var1 -> empty .)
    GTE             reduce using rule 23 (var1 -> empty .)
    LTE             reduce using rule 23 (var1 -> empty .)
    NE              reduce using rule 23 (var1 -> empty .)
    COMPARE         reduce using rule 23 (var1 -> empty .)
    AND             reduce using rule 23 (var1 -> empty .)
    OR              reduce using rule 23 (var1 -> empty .)
    RBRACKET        reduce using rule 23 (var1 -> empty .)
    RPAREN          reduce using rule 23 (var1 -> empty .)
    COMMA           reduce using rule 23 (var1 -> empty .)
    TO              reduce using rule 23 (var1 -> empty .)
    INT             reduce using rule 23 (var1 -> empty .)
    FLOAT           reduce using rule 23 (var1 -> empty .)
    CHAR            reduce using rule 23 (var1 -> empty .)
    CTEI            reduce using rule 23 (var1 -> empty .)
    CTEF            reduce using rule 23 (var1 -> empty .)
    CTEC            reduce using rule 23 (var1 -> empty .)
    CTESTRING       reduce using rule 23 (var1 -> empty .)
    LPAREN          reduce using rule 23 (var1 -> empty .)
    ID              reduce using rule 23 (var1 -> empty .)


state 36

    (9) tipo -> INT guardaTipoVar .

    ID              reduce using rule 9 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 9 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 9 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 9 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 9 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 9 (tipo -> INT guardaTipoVar .)


state 37

    (10) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> FLOAT guardaTipoVar .)


state 38

    (11) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 11 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 11 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 11 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 11 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 11 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 11 (tipo -> CHAR guardaTipoVar .)


state 39

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (71) param2 -> param2 . tipo param1 addV addParam
    (9) tipo -> . INT guardaTipoVar
    (10) tipo -> . FLOAT guardaTipoVar
    (11) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 52
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 40

    (72) param2 -> empty .

    RPAREN          reduce using rule 72 (param2 -> empty .)
    INT             reduce using rule 72 (param2 -> empty .)
    FLOAT           reduce using rule 72 (param2 -> empty .)
    CHAR            reduce using rule 72 (param2 -> empty .)


state 41

    (39) function -> FUN VOID function1 . end_func
    (45) end_func -> .

    FUN             reduce using rule 45 (end_func -> .)
    MAIN            reduce using rule 45 (end_func -> .)
    $end            reduce using rule 45 (end_func -> .)

    end_func                       shift and go to state 54

state 42

    (43) function1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (38) save_fun -> .

    LPAREN          reduce using rule 38 (save_fun -> .)

    save_fun                       shift and go to state 55

state 43

    (40) function -> FUN INT function2 . end_func
    (45) end_func -> .

    FUN             reduce using rule 45 (end_func -> .)
    MAIN            reduce using rule 45 (end_func -> .)
    $end            reduce using rule 45 (end_func -> .)

    end_func                       shift and go to state 56

state 44

    (44) function2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (38) save_fun -> .

    LPAREN          reduce using rule 38 (save_fun -> .)

    save_fun                       shift and go to state 57

state 45

    (41) function -> FUN CHAR function2 . end_func
    (45) end_func -> .

    FUN             reduce using rule 45 (end_func -> .)
    MAIN            reduce using rule 45 (end_func -> .)
    $end            reduce using rule 45 (end_func -> .)

    end_func                       shift and go to state 58

state 46

    (42) function -> FUN FLOAT function2 . end_func
    (45) end_func -> .

    FUN             reduce using rule 45 (end_func -> .)
    MAIN            reduce using rule 45 (end_func -> .)
    $end            reduce using rule 45 (end_func -> .)

    end_func                       shift and go to state 59

state 47

    (25) var2 -> var2 tipo var1 SEMICOLON . addV
    (24) addV -> .

    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)
    FUN             reduce using rule 24 (addV -> .)
    MAIN            reduce using rule 24 (addV -> .)
    $end            reduce using rule 24 (addV -> .)
    ID              reduce using rule 24 (addV -> .)
    READ            reduce using rule 24 (addV -> .)
    PRINT           reduce using rule 24 (addV -> .)
    FOR             reduce using rule 24 (addV -> .)
    IF              reduce using rule 24 (addV -> .)
    WHILE           reduce using rule 24 (addV -> .)
    RCURLY          reduce using rule 24 (addV -> .)
    RETURN          reduce using rule 24 (addV -> .)

    addV                           shift and go to state 60

state 48

    (17) var1 -> ID COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 34
    SEMICOLON       reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)
    CTEI            reduce using rule 137 (empty -> .)
    CTEF            reduce using rule 137 (empty -> .)
    CTEC            reduce using rule 137 (empty -> .)
    CTESTRING       reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]

    var1                           shift and go to state 61
    empty                          shift and go to state 35

state 49

    (18) var1 -> ID arr .
    (19) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 18 (var1 -> ID arr .)
    MUL             reduce using rule 18 (var1 -> ID arr .)
    DIV             reduce using rule 18 (var1 -> ID arr .)
    PLUS            reduce using rule 18 (var1 -> ID arr .)
    MINUS           reduce using rule 18 (var1 -> ID arr .)
    GT              reduce using rule 18 (var1 -> ID arr .)
    LT              reduce using rule 18 (var1 -> ID arr .)
    GTE             reduce using rule 18 (var1 -> ID arr .)
    LTE             reduce using rule 18 (var1 -> ID arr .)
    NE              reduce using rule 18 (var1 -> ID arr .)
    COMPARE         reduce using rule 18 (var1 -> ID arr .)
    AND             reduce using rule 18 (var1 -> ID arr .)
    OR              reduce using rule 18 (var1 -> ID arr .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr .)
    RPAREN          reduce using rule 18 (var1 -> ID arr .)
    TO              reduce using rule 18 (var1 -> ID arr .)
    INT             reduce using rule 18 (var1 -> ID arr .)
    FLOAT           reduce using rule 18 (var1 -> ID arr .)
    CHAR            reduce using rule 18 (var1 -> ID arr .)
    CTEI            reduce using rule 18 (var1 -> ID arr .)
    CTEF            reduce using rule 18 (var1 -> ID arr .)
    CTEC            reduce using rule 18 (var1 -> ID arr .)
    CTESTRING       reduce using rule 18 (var1 -> ID arr .)
    LPAREN          reduce using rule 18 (var1 -> ID arr .)
    ID              reduce using rule 18 (var1 -> ID arr .)
    COMMA           shift and go to state 62

  ! COMMA           [ reduce using rule 18 (var1 -> ID arr .) ]


state 50

    (20) var1 -> ID mat . COMMA var1 addV
    (21) var1 -> ID mat .
    (22) var1 -> ID mat . especial
    (27) especial -> . TRANSPUESTA
    (28) especial -> . INVERSA
    (29) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 63
    SEMICOLON       reduce using rule 21 (var1 -> ID mat .)
    MUL             reduce using rule 21 (var1 -> ID mat .)
    DIV             reduce using rule 21 (var1 -> ID mat .)
    PLUS            reduce using rule 21 (var1 -> ID mat .)
    MINUS           reduce using rule 21 (var1 -> ID mat .)
    GT              reduce using rule 21 (var1 -> ID mat .)
    LT              reduce using rule 21 (var1 -> ID mat .)
    GTE             reduce using rule 21 (var1 -> ID mat .)
    LTE             reduce using rule 21 (var1 -> ID mat .)
    NE              reduce using rule 21 (var1 -> ID mat .)
    COMPARE         reduce using rule 21 (var1 -> ID mat .)
    AND             reduce using rule 21 (var1 -> ID mat .)
    OR              reduce using rule 21 (var1 -> ID mat .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat .)
    RPAREN          reduce using rule 21 (var1 -> ID mat .)
    TO              reduce using rule 21 (var1 -> ID mat .)
    INT             reduce using rule 21 (var1 -> ID mat .)
    FLOAT           reduce using rule 21 (var1 -> ID mat .)
    CHAR            reduce using rule 21 (var1 -> ID mat .)
    CTEI            reduce using rule 21 (var1 -> ID mat .)
    CTEF            reduce using rule 21 (var1 -> ID mat .)
    CTEC            reduce using rule 21 (var1 -> ID mat .)
    CTESTRING       reduce using rule 21 (var1 -> ID mat .)
    LPAREN          reduce using rule 21 (var1 -> ID mat .)
    ID              reduce using rule 21 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 65
    INVERSA         shift and go to state 66
    DETERMINANTE    shift and go to state 67

  ! COMMA           [ reduce using rule 21 (var1 -> ID mat .) ]

    especial                       shift and go to state 64

state 51

    (30) arr -> LBRACKET . CTEI RBRACKET
    (31) arr -> LBRACKET . exp RBRACKET
    (32) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 68
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)

    exp                            shift and go to state 69
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 52

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 83


state 53

    (71) param2 -> param2 tipo . param1 addV addParam
    (62) param1 -> . ID addV
    (63) param1 -> . ID COMMA var1 addV
    (64) param1 -> . ID arr
    (65) param1 -> . ID arr COMMA var1 addV
    (66) param1 -> . ID mat COMMA var1 addV
    (67) param1 -> . ID mat
    (68) param1 -> . ID mat especial
    (69) param1 -> . empty
    (137) empty -> .

    ID              shift and go to state 85
    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    param1                         shift and go to state 84
    empty                          shift and go to state 86

state 54

    (39) function -> FUN VOID function1 end_func .

    FUN             reduce using rule 39 (function -> FUN VOID function1 end_func .)
    MAIN            reduce using rule 39 (function -> FUN VOID function1 end_func .)
    $end            reduce using rule 39 (function -> FUN VOID function1 end_func .)


state 55

    (43) function1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 87


state 56

    (40) function -> FUN INT function2 end_func .

    FUN             reduce using rule 40 (function -> FUN INT function2 end_func .)
    MAIN            reduce using rule 40 (function -> FUN INT function2 end_func .)
    $end            reduce using rule 40 (function -> FUN INT function2 end_func .)


state 57

    (44) function2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LPAREN          shift and go to state 88


state 58

    (41) function -> FUN CHAR function2 end_func .

    FUN             reduce using rule 41 (function -> FUN CHAR function2 end_func .)
    MAIN            reduce using rule 41 (function -> FUN CHAR function2 end_func .)
    $end            reduce using rule 41 (function -> FUN CHAR function2 end_func .)


state 59

    (42) function -> FUN FLOAT function2 end_func .

    FUN             reduce using rule 42 (function -> FUN FLOAT function2 end_func .)
    MAIN            reduce using rule 42 (function -> FUN FLOAT function2 end_func .)
    $end            reduce using rule 42 (function -> FUN FLOAT function2 end_func .)


state 60

    (25) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 25 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 61

    (17) var1 -> ID COMMA var1 . addV
    (24) addV -> .

    SEMICOLON       reduce using rule 24 (addV -> .)
    MUL             reduce using rule 24 (addV -> .)
    DIV             reduce using rule 24 (addV -> .)
    PLUS            reduce using rule 24 (addV -> .)
    MINUS           reduce using rule 24 (addV -> .)
    GT              reduce using rule 24 (addV -> .)
    LT              reduce using rule 24 (addV -> .)
    GTE             reduce using rule 24 (addV -> .)
    LTE             reduce using rule 24 (addV -> .)
    NE              reduce using rule 24 (addV -> .)
    COMPARE         reduce using rule 24 (addV -> .)
    AND             reduce using rule 24 (addV -> .)
    OR              reduce using rule 24 (addV -> .)
    RBRACKET        reduce using rule 24 (addV -> .)
    RPAREN          reduce using rule 24 (addV -> .)
    COMMA           reduce using rule 24 (addV -> .)
    TO              reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)
    CTEI            reduce using rule 24 (addV -> .)
    CTEF            reduce using rule 24 (addV -> .)
    CTEC            reduce using rule 24 (addV -> .)
    CTESTRING       reduce using rule 24 (addV -> .)
    LPAREN          reduce using rule 24 (addV -> .)
    ID              reduce using rule 24 (addV -> .)

    addV                           shift and go to state 89

state 62

    (19) var1 -> ID arr COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 34
    SEMICOLON       reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)
    CTEI            reduce using rule 137 (empty -> .)
    CTEF            reduce using rule 137 (empty -> .)
    CTEC            reduce using rule 137 (empty -> .)
    CTESTRING       reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]

    var1                           shift and go to state 90
    empty                          shift and go to state 35

state 63

    (20) var1 -> ID mat COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 34
    SEMICOLON       reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)
    CTEI            reduce using rule 137 (empty -> .)
    CTEF            reduce using rule 137 (empty -> .)
    CTEC            reduce using rule 137 (empty -> .)
    CTESTRING       reduce using rule 137 (empty -> .)
    LPAREN          reduce using rule 137 (empty -> .)

  ! ID              [ reduce using rule 137 (empty -> .) ]

    var1                           shift and go to state 91
    empty                          shift and go to state 35

state 64

    (22) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 22 (var1 -> ID mat especial .)
    MUL             reduce using rule 22 (var1 -> ID mat especial .)
    DIV             reduce using rule 22 (var1 -> ID mat especial .)
    PLUS            reduce using rule 22 (var1 -> ID mat especial .)
    MINUS           reduce using rule 22 (var1 -> ID mat especial .)
    GT              reduce using rule 22 (var1 -> ID mat especial .)
    LT              reduce using rule 22 (var1 -> ID mat especial .)
    GTE             reduce using rule 22 (var1 -> ID mat especial .)
    LTE             reduce using rule 22 (var1 -> ID mat especial .)
    NE              reduce using rule 22 (var1 -> ID mat especial .)
    COMPARE         reduce using rule 22 (var1 -> ID mat especial .)
    AND             reduce using rule 22 (var1 -> ID mat especial .)
    OR              reduce using rule 22 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 22 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 22 (var1 -> ID mat especial .)
    COMMA           reduce using rule 22 (var1 -> ID mat especial .)
    TO              reduce using rule 22 (var1 -> ID mat especial .)
    INT             reduce using rule 22 (var1 -> ID mat especial .)
    FLOAT           reduce using rule 22 (var1 -> ID mat especial .)
    CHAR            reduce using rule 22 (var1 -> ID mat especial .)
    CTEI            reduce using rule 22 (var1 -> ID mat especial .)
    CTEF            reduce using rule 22 (var1 -> ID mat especial .)
    CTEC            reduce using rule 22 (var1 -> ID mat especial .)
    CTESTRING       reduce using rule 22 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 22 (var1 -> ID mat especial .)
    ID              reduce using rule 22 (var1 -> ID mat especial .)


state 65

    (27) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 27 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 27 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 27 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 27 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 27 (especial -> TRANSPUESTA .)
    GT              reduce using rule 27 (especial -> TRANSPUESTA .)
    LT              reduce using rule 27 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 27 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 27 (especial -> TRANSPUESTA .)
    NE              reduce using rule 27 (especial -> TRANSPUESTA .)
    COMPARE         reduce using rule 27 (especial -> TRANSPUESTA .)
    AND             reduce using rule 27 (especial -> TRANSPUESTA .)
    OR              reduce using rule 27 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 27 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 27 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 27 (especial -> TRANSPUESTA .)
    TO              reduce using rule 27 (especial -> TRANSPUESTA .)
    INT             reduce using rule 27 (especial -> TRANSPUESTA .)
    FLOAT           reduce using rule 27 (especial -> TRANSPUESTA .)
    CHAR            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 27 (especial -> TRANSPUESTA .)
    CTESTRING       reduce using rule 27 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 27 (especial -> TRANSPUESTA .)
    ID              reduce using rule 27 (especial -> TRANSPUESTA .)


state 66

    (28) especial -> INVERSA .

    SEMICOLON       reduce using rule 28 (especial -> INVERSA .)
    MUL             reduce using rule 28 (especial -> INVERSA .)
    DIV             reduce using rule 28 (especial -> INVERSA .)
    PLUS            reduce using rule 28 (especial -> INVERSA .)
    MINUS           reduce using rule 28 (especial -> INVERSA .)
    GT              reduce using rule 28 (especial -> INVERSA .)
    LT              reduce using rule 28 (especial -> INVERSA .)
    GTE             reduce using rule 28 (especial -> INVERSA .)
    LTE             reduce using rule 28 (especial -> INVERSA .)
    NE              reduce using rule 28 (especial -> INVERSA .)
    COMPARE         reduce using rule 28 (especial -> INVERSA .)
    AND             reduce using rule 28 (especial -> INVERSA .)
    OR              reduce using rule 28 (especial -> INVERSA .)
    RBRACKET        reduce using rule 28 (especial -> INVERSA .)
    RPAREN          reduce using rule 28 (especial -> INVERSA .)
    COMMA           reduce using rule 28 (especial -> INVERSA .)
    TO              reduce using rule 28 (especial -> INVERSA .)
    INT             reduce using rule 28 (especial -> INVERSA .)
    FLOAT           reduce using rule 28 (especial -> INVERSA .)
    CHAR            reduce using rule 28 (especial -> INVERSA .)
    CTEI            reduce using rule 28 (especial -> INVERSA .)
    CTEF            reduce using rule 28 (especial -> INVERSA .)
    CTEC            reduce using rule 28 (especial -> INVERSA .)
    CTESTRING       reduce using rule 28 (especial -> INVERSA .)
    LPAREN          reduce using rule 28 (especial -> INVERSA .)
    ID              reduce using rule 28 (especial -> INVERSA .)


state 67

    (29) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 29 (especial -> DETERMINANTE .)
    MUL             reduce using rule 29 (especial -> DETERMINANTE .)
    DIV             reduce using rule 29 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 29 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 29 (especial -> DETERMINANTE .)
    GT              reduce using rule 29 (especial -> DETERMINANTE .)
    LT              reduce using rule 29 (especial -> DETERMINANTE .)
    GTE             reduce using rule 29 (especial -> DETERMINANTE .)
    LTE             reduce using rule 29 (especial -> DETERMINANTE .)
    NE              reduce using rule 29 (especial -> DETERMINANTE .)
    COMPARE         reduce using rule 29 (especial -> DETERMINANTE .)
    AND             reduce using rule 29 (especial -> DETERMINANTE .)
    OR              reduce using rule 29 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 29 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 29 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 29 (especial -> DETERMINANTE .)
    TO              reduce using rule 29 (especial -> DETERMINANTE .)
    INT             reduce using rule 29 (especial -> DETERMINANTE .)
    FLOAT           reduce using rule 29 (especial -> DETERMINANTE .)
    CHAR            reduce using rule 29 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 29 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 29 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 29 (especial -> DETERMINANTE .)
    CTESTRING       reduce using rule 29 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 29 (especial -> DETERMINANTE .)
    ID              reduce using rule 29 (especial -> DETERMINANTE .)


state 68

    (30) arr -> LBRACKET CTEI . RBRACKET
    (32) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (131) pexp -> CTEI . saveCTE
    (140) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 92
    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 140 (saveCTE -> .) ]

    saveCTE                        shift and go to state 93

state 69

    (31) arr -> LBRACKET exp . RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (34) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 94


state 70

    (100) exp -> nexp .
    (101) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 100 (exp -> nexp .)
    RPAREN          reduce using rule 100 (exp -> nexp .)
    COMMA           reduce using rule 100 (exp -> nexp .)
    SEMICOLON       reduce using rule 100 (exp -> nexp .)
    TO              reduce using rule 100 (exp -> nexp .)
    OR              shift and go to state 95


state 71

    (108) nexp -> compexp .
    (109) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 108 (nexp -> compexp .)
    RBRACKET        reduce using rule 108 (nexp -> compexp .)
    RPAREN          reduce using rule 108 (nexp -> compexp .)
    COMMA           reduce using rule 108 (nexp -> compexp .)
    SEMICOLON       reduce using rule 108 (nexp -> compexp .)
    TO              reduce using rule 108 (nexp -> compexp .)
    AND             shift and go to state 96


state 72

    (110) compexp -> sumexp .
    (112) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (113) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (114) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (117) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 110 (compexp -> sumexp .)
    OR              reduce using rule 110 (compexp -> sumexp .)
    RBRACKET        reduce using rule 110 (compexp -> sumexp .)
    RPAREN          reduce using rule 110 (compexp -> sumexp .)
    COMMA           reduce using rule 110 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 110 (compexp -> sumexp .)
    TO              reduce using rule 110 (compexp -> sumexp .)
    GT              shift and go to state 97
    LT              shift and go to state 98
    GTE             shift and go to state 99
    LTE             shift and go to state 100
    NE              shift and go to state 101
    COMPARE         shift and go to state 102


state 73

    (111) compexp -> compexp1 . sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    sumexp                         shift and go to state 103
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 74

    (118) sumexp -> mulexp .
    (119) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 118 (sumexp -> mulexp .)
    LT              reduce using rule 118 (sumexp -> mulexp .)
    GTE             reduce using rule 118 (sumexp -> mulexp .)
    LTE             reduce using rule 118 (sumexp -> mulexp .)
    NE              reduce using rule 118 (sumexp -> mulexp .)
    COMPARE         reduce using rule 118 (sumexp -> mulexp .)
    AND             reduce using rule 118 (sumexp -> mulexp .)
    OR              reduce using rule 118 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 118 (sumexp -> mulexp .)
    RPAREN          reduce using rule 118 (sumexp -> mulexp .)
    COMMA           reduce using rule 118 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 118 (sumexp -> mulexp .)
    TO              reduce using rule 118 (sumexp -> mulexp .)
    CTEI            reduce using rule 118 (sumexp -> mulexp .)
    CTEF            reduce using rule 118 (sumexp -> mulexp .)
    CTEC            reduce using rule 118 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 118 (sumexp -> mulexp .)
    LPAREN          reduce using rule 118 (sumexp -> mulexp .)
    ID              reduce using rule 118 (sumexp -> mulexp .)
    MUL             reduce using rule 118 (sumexp -> mulexp .)
    DIV             reduce using rule 118 (sumexp -> mulexp .)
    PLUS            shift and go to state 105
    MINUS           shift and go to state 106

  ! PLUS            [ reduce using rule 118 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 118 (sumexp -> mulexp .) ]


state 75

    (127) mulexp -> pexp .
    (128) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 127 (mulexp -> pexp .)
    MINUS           reduce using rule 127 (mulexp -> pexp .)
    GT              reduce using rule 127 (mulexp -> pexp .)
    LT              reduce using rule 127 (mulexp -> pexp .)
    GTE             reduce using rule 127 (mulexp -> pexp .)
    LTE             reduce using rule 127 (mulexp -> pexp .)
    NE              reduce using rule 127 (mulexp -> pexp .)
    COMPARE         reduce using rule 127 (mulexp -> pexp .)
    AND             reduce using rule 127 (mulexp -> pexp .)
    OR              reduce using rule 127 (mulexp -> pexp .)
    RBRACKET        reduce using rule 127 (mulexp -> pexp .)
    RPAREN          reduce using rule 127 (mulexp -> pexp .)
    COMMA           reduce using rule 127 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 127 (mulexp -> pexp .)
    TO              reduce using rule 127 (mulexp -> pexp .)
    CTEI            reduce using rule 127 (mulexp -> pexp .)
    CTEF            reduce using rule 127 (mulexp -> pexp .)
    CTEC            reduce using rule 127 (mulexp -> pexp .)
    CTESTRING       reduce using rule 127 (mulexp -> pexp .)
    LPAREN          reduce using rule 127 (mulexp -> pexp .)
    ID              reduce using rule 127 (mulexp -> pexp .)
    MUL             shift and go to state 107
    DIV             shift and go to state 108

  ! MUL             [ reduce using rule 127 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 127 (mulexp -> pexp .) ]


state 76

    (130) pexp -> var1 . saveId
    (138) saveId -> .

    MUL             reduce using rule 138 (saveId -> .)
    DIV             reduce using rule 138 (saveId -> .)
    PLUS            reduce using rule 138 (saveId -> .)
    MINUS           reduce using rule 138 (saveId -> .)
    GT              reduce using rule 138 (saveId -> .)
    LT              reduce using rule 138 (saveId -> .)
    GTE             reduce using rule 138 (saveId -> .)
    LTE             reduce using rule 138 (saveId -> .)
    NE              reduce using rule 138 (saveId -> .)
    COMPARE         reduce using rule 138 (saveId -> .)
    AND             reduce using rule 138 (saveId -> .)
    OR              reduce using rule 138 (saveId -> .)
    RBRACKET        reduce using rule 138 (saveId -> .)
    RPAREN          reduce using rule 138 (saveId -> .)
    COMMA           reduce using rule 138 (saveId -> .)
    SEMICOLON       reduce using rule 138 (saveId -> .)
    TO              reduce using rule 138 (saveId -> .)
    CTEI            reduce using rule 138 (saveId -> .)
    CTEF            reduce using rule 138 (saveId -> .)
    CTEC            reduce using rule 138 (saveId -> .)
    CTESTRING       reduce using rule 138 (saveId -> .)
    LPAREN          reduce using rule 138 (saveId -> .)
    ID              reduce using rule 138 (saveId -> .)

    saveId                         shift and go to state 109

state 77

    (132) pexp -> CTEF . saveCTE
    (140) saveCTE -> .

    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)
    RBRACKET        reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    COMMA           reduce using rule 140 (saveCTE -> .)
    SEMICOLON       reduce using rule 140 (saveCTE -> .)
    TO              reduce using rule 140 (saveCTE -> .)
    CTEI            reduce using rule 140 (saveCTE -> .)
    CTEF            reduce using rule 140 (saveCTE -> .)
    CTEC            reduce using rule 140 (saveCTE -> .)
    CTESTRING       reduce using rule 140 (saveCTE -> .)
    LPAREN          reduce using rule 140 (saveCTE -> .)
    ID              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 110

state 78

    (133) pexp -> CTEC . saveCTE
    (140) saveCTE -> .

    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)
    RBRACKET        reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    COMMA           reduce using rule 140 (saveCTE -> .)
    SEMICOLON       reduce using rule 140 (saveCTE -> .)
    TO              reduce using rule 140 (saveCTE -> .)
    CTEI            reduce using rule 140 (saveCTE -> .)
    CTEF            reduce using rule 140 (saveCTE -> .)
    CTEC            reduce using rule 140 (saveCTE -> .)
    CTESTRING       reduce using rule 140 (saveCTE -> .)
    LPAREN          reduce using rule 140 (saveCTE -> .)
    ID              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 111

state 79

    (134) pexp -> CTESTRING . saveCTE
    (140) saveCTE -> .

    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)
    RBRACKET        reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    COMMA           reduce using rule 140 (saveCTE -> .)
    SEMICOLON       reduce using rule 140 (saveCTE -> .)
    TO              reduce using rule 140 (saveCTE -> .)
    CTEI            reduce using rule 140 (saveCTE -> .)
    CTEF            reduce using rule 140 (saveCTE -> .)
    CTEC            reduce using rule 140 (saveCTE -> .)
    CTESTRING       reduce using rule 140 (saveCTE -> .)
    LPAREN          reduce using rule 140 (saveCTE -> .)
    ID              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 112

state 80

    (135) pexp -> llamada .

    MUL             reduce using rule 135 (pexp -> llamada .)
    DIV             reduce using rule 135 (pexp -> llamada .)
    PLUS            reduce using rule 135 (pexp -> llamada .)
    MINUS           reduce using rule 135 (pexp -> llamada .)
    GT              reduce using rule 135 (pexp -> llamada .)
    LT              reduce using rule 135 (pexp -> llamada .)
    GTE             reduce using rule 135 (pexp -> llamada .)
    LTE             reduce using rule 135 (pexp -> llamada .)
    NE              reduce using rule 135 (pexp -> llamada .)
    COMPARE         reduce using rule 135 (pexp -> llamada .)
    AND             reduce using rule 135 (pexp -> llamada .)
    OR              reduce using rule 135 (pexp -> llamada .)
    RBRACKET        reduce using rule 135 (pexp -> llamada .)
    RPAREN          reduce using rule 135 (pexp -> llamada .)
    COMMA           reduce using rule 135 (pexp -> llamada .)
    SEMICOLON       reduce using rule 135 (pexp -> llamada .)
    TO              reduce using rule 135 (pexp -> llamada .)
    CTEI            reduce using rule 135 (pexp -> llamada .)
    CTEF            reduce using rule 135 (pexp -> llamada .)
    CTEC            reduce using rule 135 (pexp -> llamada .)
    CTESTRING       reduce using rule 135 (pexp -> llamada .)
    LPAREN          reduce using rule 135 (pexp -> llamada .)
    ID              reduce using rule 135 (pexp -> llamada .)


state 81

    (136) pexp -> LPAREN . exp RPAREN
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    exp                            shift and go to state 113
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 82

    (16) var1 -> ID .
    (17) var1 -> ID . COMMA var1 addV
    (18) var1 -> ID . arr
    (19) var1 -> ID . arr COMMA var1 addV
    (20) var1 -> ID . mat COMMA var1 addV
    (21) var1 -> ID . mat
    (22) var1 -> ID . mat especial
    (73) llamada -> ID . era_call LPAREN aux_exp RPAREN gosub_quad
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
    (77) era_call -> .

  ! shift/reduce conflict for COMMA resolved as shift
  ! reduce/reduce conflict for LPAREN resolved using rule 16 (var1 -> ID .)
    MUL             reduce using rule 16 (var1 -> ID .)
    DIV             reduce using rule 16 (var1 -> ID .)
    PLUS            reduce using rule 16 (var1 -> ID .)
    MINUS           reduce using rule 16 (var1 -> ID .)
    GT              reduce using rule 16 (var1 -> ID .)
    LT              reduce using rule 16 (var1 -> ID .)
    GTE             reduce using rule 16 (var1 -> ID .)
    LTE             reduce using rule 16 (var1 -> ID .)
    NE              reduce using rule 16 (var1 -> ID .)
    COMPARE         reduce using rule 16 (var1 -> ID .)
    AND             reduce using rule 16 (var1 -> ID .)
    OR              reduce using rule 16 (var1 -> ID .)
    RBRACKET        reduce using rule 16 (var1 -> ID .)
    RPAREN          reduce using rule 16 (var1 -> ID .)
    SEMICOLON       reduce using rule 16 (var1 -> ID .)
    TO              reduce using rule 16 (var1 -> ID .)
    CTEI            reduce using rule 16 (var1 -> ID .)
    CTEF            reduce using rule 16 (var1 -> ID .)
    CTEC            reduce using rule 16 (var1 -> ID .)
    CTESTRING       reduce using rule 16 (var1 -> ID .)
    LPAREN          reduce using rule 16 (var1 -> ID .)
    ID              reduce using rule 16 (var1 -> ID .)
    COMMA           shift and go to state 48
    LBRACKET        shift and go to state 51

  ! COMMA           [ reduce using rule 16 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 77 (era_call -> .) ]

    arr                            shift and go to state 49
    mat                            shift and go to state 50
    era_call                       shift and go to state 114

state 83

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (13) vars -> . var
    (14) vars -> . empty
    (15) var -> . VAR var2
    (137) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    PRINT           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    RCURLY          reduce using rule 137 (empty -> .)

    vars                           shift and go to state 115
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 84

    (71) param2 -> param2 tipo param1 . addV addParam
    (24) addV -> .

    RPAREN          reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)

    addV                           shift and go to state 116

state 85

    (62) param1 -> ID . addV
    (63) param1 -> ID . COMMA var1 addV
    (64) param1 -> ID . arr
    (65) param1 -> ID . arr COMMA var1 addV
    (66) param1 -> ID . mat COMMA var1 addV
    (67) param1 -> ID . mat
    (68) param1 -> ID . mat especial
    (24) addV -> .
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    COMMA           shift and go to state 118
    RPAREN          reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)
    LBRACKET        shift and go to state 51

    addV                           shift and go to state 117
    arr                            shift and go to state 119
    mat                            shift and go to state 120

state 86

    (69) param1 -> empty .

    RPAREN          reduce using rule 69 (param1 -> empty .)
    INT             reduce using rule 69 (param1 -> empty .)
    FLOAT           reduce using rule 69 (param1 -> empty .)
    CHAR            reduce using rule 69 (param1 -> empty .)


state 87

    (43) function1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (71) param2 -> . param2 tipo param1 addV addParam
    (72) param2 -> . empty
    (137) empty -> .

    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    param2                         shift and go to state 121
    empty                          shift and go to state 40

state 88

    (44) function2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (71) param2 -> . param2 tipo param1 addV addParam
    (72) param2 -> . empty
    (137) empty -> .

    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    param2                         shift and go to state 122
    empty                          shift and go to state 40

state 89

    (17) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    INT             reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 17 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 17 (var1 -> ID COMMA var1 addV .)


state 90

    (19) var1 -> ID arr COMMA var1 . addV
    (24) addV -> .

    SEMICOLON       reduce using rule 24 (addV -> .)
    MUL             reduce using rule 24 (addV -> .)
    DIV             reduce using rule 24 (addV -> .)
    PLUS            reduce using rule 24 (addV -> .)
    MINUS           reduce using rule 24 (addV -> .)
    GT              reduce using rule 24 (addV -> .)
    LT              reduce using rule 24 (addV -> .)
    GTE             reduce using rule 24 (addV -> .)
    LTE             reduce using rule 24 (addV -> .)
    NE              reduce using rule 24 (addV -> .)
    COMPARE         reduce using rule 24 (addV -> .)
    AND             reduce using rule 24 (addV -> .)
    OR              reduce using rule 24 (addV -> .)
    RBRACKET        reduce using rule 24 (addV -> .)
    RPAREN          reduce using rule 24 (addV -> .)
    COMMA           reduce using rule 24 (addV -> .)
    TO              reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)
    CTEI            reduce using rule 24 (addV -> .)
    CTEF            reduce using rule 24 (addV -> .)
    CTEC            reduce using rule 24 (addV -> .)
    CTESTRING       reduce using rule 24 (addV -> .)
    LPAREN          reduce using rule 24 (addV -> .)
    ID              reduce using rule 24 (addV -> .)

    addV                           shift and go to state 123

state 91

    (20) var1 -> ID mat COMMA var1 . addV
    (24) addV -> .

    SEMICOLON       reduce using rule 24 (addV -> .)
    MUL             reduce using rule 24 (addV -> .)
    DIV             reduce using rule 24 (addV -> .)
    PLUS            reduce using rule 24 (addV -> .)
    MINUS           reduce using rule 24 (addV -> .)
    GT              reduce using rule 24 (addV -> .)
    LT              reduce using rule 24 (addV -> .)
    GTE             reduce using rule 24 (addV -> .)
    LTE             reduce using rule 24 (addV -> .)
    NE              reduce using rule 24 (addV -> .)
    COMPARE         reduce using rule 24 (addV -> .)
    AND             reduce using rule 24 (addV -> .)
    OR              reduce using rule 24 (addV -> .)
    RBRACKET        reduce using rule 24 (addV -> .)
    RPAREN          reduce using rule 24 (addV -> .)
    COMMA           reduce using rule 24 (addV -> .)
    TO              reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)
    CTEI            reduce using rule 24 (addV -> .)
    CTEF            reduce using rule 24 (addV -> .)
    CTEC            reduce using rule 24 (addV -> .)
    CTESTRING       reduce using rule 24 (addV -> .)
    LPAREN          reduce using rule 24 (addV -> .)
    ID              reduce using rule 24 (addV -> .)

    addV                           shift and go to state 124

state 92

    (30) arr -> LBRACKET CTEI RBRACKET .
    (32) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (35) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 125


state 93

    (131) pexp -> CTEI saveCTE .

    MUL             reduce using rule 131 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 131 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 131 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 131 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 131 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 131 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 131 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 131 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 131 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 131 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 131 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 131 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 131 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 131 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 131 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 131 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 131 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 131 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 131 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 131 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 131 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 131 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 131 (pexp -> CTEI saveCTE .)


state 94

    (31) arr -> LBRACKET exp RBRACKET .
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (34) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 31 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 126


state 95

    (101) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 127

state 96

    (109) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 128

state 97

    (112) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 129

state 98

    (113) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 130

state 99

    (114) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 131

state 100

    (115) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 132

state 101

    (116) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 133

state 102

    (117) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 134

state 103

    (111) compexp -> compexp1 sumexp .

    AND             reduce using rule 111 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 111 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 111 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 111 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 111 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 111 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 111 (compexp -> compexp1 sumexp .)


state 104

    (131) pexp -> CTEI . saveCTE
    (140) saveCTE -> .

    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)
    RBRACKET        reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    COMMA           reduce using rule 140 (saveCTE -> .)
    SEMICOLON       reduce using rule 140 (saveCTE -> .)
    TO              reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    CTEI            reduce using rule 140 (saveCTE -> .)
    CTEF            reduce using rule 140 (saveCTE -> .)
    CTEC            reduce using rule 140 (saveCTE -> .)
    CTESTRING       reduce using rule 140 (saveCTE -> .)
    LPAREN          reduce using rule 140 (saveCTE -> .)
    ID              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 93

state 105

    (119) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 135

state 106

    (120) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 136

state 107

    (128) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 137

state 108

    (129) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    RBRACKET        reduce using rule 61 (addOperadorName -> .)
    RPAREN          reduce using rule 61 (addOperadorName -> .)
    COMMA           reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 138

state 109

    (130) pexp -> var1 saveId .

    MUL             reduce using rule 130 (pexp -> var1 saveId .)
    DIV             reduce using rule 130 (pexp -> var1 saveId .)
    PLUS            reduce using rule 130 (pexp -> var1 saveId .)
    MINUS           reduce using rule 130 (pexp -> var1 saveId .)
    GT              reduce using rule 130 (pexp -> var1 saveId .)
    LT              reduce using rule 130 (pexp -> var1 saveId .)
    GTE             reduce using rule 130 (pexp -> var1 saveId .)
    LTE             reduce using rule 130 (pexp -> var1 saveId .)
    NE              reduce using rule 130 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 130 (pexp -> var1 saveId .)
    AND             reduce using rule 130 (pexp -> var1 saveId .)
    OR              reduce using rule 130 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 130 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 130 (pexp -> var1 saveId .)
    COMMA           reduce using rule 130 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 130 (pexp -> var1 saveId .)
    TO              reduce using rule 130 (pexp -> var1 saveId .)
    CTEI            reduce using rule 130 (pexp -> var1 saveId .)
    CTEF            reduce using rule 130 (pexp -> var1 saveId .)
    CTEC            reduce using rule 130 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 130 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 130 (pexp -> var1 saveId .)
    ID              reduce using rule 130 (pexp -> var1 saveId .)


state 110

    (132) pexp -> CTEF saveCTE .

    MUL             reduce using rule 132 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 132 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 132 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 132 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 132 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 132 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 132 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 132 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 132 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 132 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 132 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 132 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 132 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 132 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 132 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 132 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 132 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 132 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 132 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 132 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 132 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 132 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 132 (pexp -> CTEF saveCTE .)


state 111

    (133) pexp -> CTEC saveCTE .

    MUL             reduce using rule 133 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 133 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 133 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 133 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 133 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 133 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 133 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 133 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 133 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 133 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 133 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 133 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 133 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 133 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 133 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 133 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 133 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 133 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 133 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 133 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 133 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 133 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 133 (pexp -> CTEC saveCTE .)


state 112

    (134) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 134 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 134 (pexp -> CTESTRING saveCTE .)


state 113

    (136) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 139


state 114

    (73) llamada -> ID era_call . LPAREN aux_exp RPAREN gosub_quad

    LPAREN          shift and go to state 140


state 115

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 141
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 116

    (71) param2 -> param2 tipo param1 addV . addParam
    (70) addParam -> .

    RPAREN          reduce using rule 70 (addParam -> .)
    INT             reduce using rule 70 (addParam -> .)
    FLOAT           reduce using rule 70 (addParam -> .)
    CHAR            reduce using rule 70 (addParam -> .)

    addParam                       shift and go to state 157

state 117

    (62) param1 -> ID addV .

    RPAREN          reduce using rule 62 (param1 -> ID addV .)
    INT             reduce using rule 62 (param1 -> ID addV .)
    FLOAT           reduce using rule 62 (param1 -> ID addV .)
    CHAR            reduce using rule 62 (param1 -> ID addV .)


state 118

    (63) param1 -> ID COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

    ID              shift and go to state 34
    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    var1                           shift and go to state 158
    empty                          shift and go to state 35

state 119

    (64) param1 -> ID arr .
    (65) param1 -> ID arr . COMMA var1 addV

    RPAREN          reduce using rule 64 (param1 -> ID arr .)
    INT             reduce using rule 64 (param1 -> ID arr .)
    FLOAT           reduce using rule 64 (param1 -> ID arr .)
    CHAR            reduce using rule 64 (param1 -> ID arr .)
    COMMA           shift and go to state 159


state 120

    (66) param1 -> ID mat . COMMA var1 addV
    (67) param1 -> ID mat .
    (68) param1 -> ID mat . especial
    (27) especial -> . TRANSPUESTA
    (28) especial -> . INVERSA
    (29) especial -> . DETERMINANTE

    COMMA           shift and go to state 160
    RPAREN          reduce using rule 67 (param1 -> ID mat .)
    INT             reduce using rule 67 (param1 -> ID mat .)
    FLOAT           reduce using rule 67 (param1 -> ID mat .)
    CHAR            reduce using rule 67 (param1 -> ID mat .)
    TRANSPUESTA     shift and go to state 65
    INVERSA         shift and go to state 66
    DETERMINANTE    shift and go to state 67

    especial                       shift and go to state 161

state 121

    (43) function1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RCURLY
    (71) param2 -> param2 . tipo param1 addV addParam
    (9) tipo -> . INT guardaTipoVar
    (10) tipo -> . FLOAT guardaTipoVar
    (11) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 162
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 122

    (44) function2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (71) param2 -> param2 . tipo param1 addV addParam
    (9) tipo -> . INT guardaTipoVar
    (10) tipo -> . FLOAT guardaTipoVar
    (11) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 163
    INT             shift and go to state 23
    FLOAT           shift and go to state 24
    CHAR            shift and go to state 25

    tipo                           shift and go to state 53

state 123

    (19) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 19 (var1 -> ID arr COMMA var1 addV .)


state 124

    (20) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    COMPARE         reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    CTESTRING       reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 20 (var1 -> ID mat COMMA var1 addV .)


state 125

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 164
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)

    exp                            shift and go to state 165
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 126

    (33) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (34) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 167
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)

    exp                            shift and go to state 166
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 127

    (101) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    nexp                           shift and go to state 168
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 128

    (109) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    compexp                        shift and go to state 169
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 129

    (112) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 130

    (113) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 131

    (114) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 172
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 132

    (115) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 173
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 133

    (116) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 174
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 134

    (117) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    sumexp                         shift and go to state 175
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 135

    (119) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    mulexp                         shift and go to state 176
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 136

    (120) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    mulexp                         shift and go to state 177
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 137

    (128) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    pexp                           shift and go to state 178
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 138

    (129) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RBRACKET        reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)

  ! CTEI            [ reduce using rule 137 (empty -> .) ]
  ! CTEF            [ reduce using rule 137 (empty -> .) ]
  ! CTEC            [ reduce using rule 137 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 137 (empty -> .) ]
  ! LPAREN          [ reduce using rule 137 (empty -> .) ]
  ! ID              [ reduce using rule 137 (empty -> .) ]

    pexp                           shift and go to state 179
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 139

    (136) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 136 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 136 (pexp -> LPAREN exp RPAREN .)


state 140

    (73) llamada -> ID era_call LPAREN . aux_exp RPAREN gosub_quad
    (74) aux_exp -> . exp
    (75) aux_exp -> . exp quad_param COMMA aux_exp quad_param
    (76) aux_exp -> . empty
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (137) empty -> .
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad

    RPAREN          reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82

    aux_exp                        shift and go to state 180
    exp                            shift and go to state 181
    empty                          shift and go to state 182
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80

state 141

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 183


state 142

    (48) statement -> statement1 . statement
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement1                     shift and go to state 142
    statement                      shift and go to state 184
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 143

    (49) statement -> empty .

    RCURLY          reduce using rule 49 (statement -> empty .)
    RETURN          reduce using rule 49 (statement -> empty .)


state 144

    (50) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 185


state 145

    (51) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 186


state 146

    (52) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 187


state 147

    (53) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 188


state 148

    (54) statement1 -> for .

    ID              reduce using rule 54 (statement1 -> for .)
    READ            reduce using rule 54 (statement1 -> for .)
    PRINT           reduce using rule 54 (statement1 -> for .)
    FOR             reduce using rule 54 (statement1 -> for .)
    IF              reduce using rule 54 (statement1 -> for .)
    WHILE           reduce using rule 54 (statement1 -> for .)
    RCURLY          reduce using rule 54 (statement1 -> for .)
    RETURN          reduce using rule 54 (statement1 -> for .)


state 149

    (55) statement1 -> if .

    ID              reduce using rule 55 (statement1 -> if .)
    READ            reduce using rule 55 (statement1 -> if .)
    PRINT           reduce using rule 55 (statement1 -> if .)
    FOR             reduce using rule 55 (statement1 -> if .)
    IF              reduce using rule 55 (statement1 -> if .)
    WHILE           reduce using rule 55 (statement1 -> if .)
    RCURLY          reduce using rule 55 (statement1 -> if .)
    RETURN          reduce using rule 55 (statement1 -> if .)


state 150

    (56) statement1 -> while .

    ID              reduce using rule 56 (statement1 -> while .)
    READ            reduce using rule 56 (statement1 -> while .)
    PRINT           reduce using rule 56 (statement1 -> while .)
    FOR             reduce using rule 56 (statement1 -> while .)
    IF              reduce using rule 56 (statement1 -> while .)
    WHILE           reduce using rule 56 (statement1 -> while .)
    RCURLY          reduce using rule 56 (statement1 -> while .)
    RETURN          reduce using rule 56 (statement1 -> while .)


state 151

    (57) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> ID . era_call LPAREN aux_exp RPAREN gosub_quad
    (139) saveId2 -> .
    (77) era_call -> .

    EQUALS          reduce using rule 139 (saveId2 -> .)
    LBRACKET        reduce using rule 139 (saveId2 -> .)
    LPAREN          reduce using rule 77 (era_call -> .)

    saveId2                        shift and go to state 189
    era_call                       shift and go to state 114

state 152

    (99) lectura -> READ . operatorRead LPAREN exp operatorReadQuad RPAREN
    (125) operatorRead -> .

    LPAREN          reduce using rule 125 (operatorRead -> .)

    operatorRead                   shift and go to state 190

state 153

    (92) escritura -> PRINT . LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN

    LPAREN          shift and go to state 191


state 154

    (85) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (83) for_op -> .

    LPAREN          reduce using rule 83 (for_op -> .)

    for_op                         shift and go to state 192

state 155

    (80) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 193


state 156

    (91) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (90) while_op -> .

    LPAREN          reduce using rule 90 (while_op -> .)

    while_op                       shift and go to state 194

state 157

    (71) param2 -> param2 tipo param1 addV addParam .

    RPAREN          reduce using rule 71 (param2 -> param2 tipo param1 addV addParam .)
    INT             reduce using rule 71 (param2 -> param2 tipo param1 addV addParam .)
    FLOAT           reduce using rule 71 (param2 -> param2 tipo param1 addV addParam .)
    CHAR            reduce using rule 71 (param2 -> param2 tipo param1 addV addParam .)


state 158

    (63) param1 -> ID COMMA var1 . addV
    (24) addV -> .

    RPAREN          reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)

    addV                           shift and go to state 195

state 159

    (65) param1 -> ID arr COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

    ID              shift and go to state 34
    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    var1                           shift and go to state 196
    empty                          shift and go to state 35

state 160

    (66) param1 -> ID mat COMMA . var1 addV
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (137) empty -> .

    ID              shift and go to state 34
    RPAREN          reduce using rule 137 (empty -> .)
    INT             reduce using rule 137 (empty -> .)
    FLOAT           reduce using rule 137 (empty -> .)
    CHAR            reduce using rule 137 (empty -> .)

    var1                           shift and go to state 197
    empty                          shift and go to state 35

state 161

    (68) param1 -> ID mat especial .

    RPAREN          reduce using rule 68 (param1 -> ID mat especial .)
    INT             reduce using rule 68 (param1 -> ID mat especial .)
    FLOAT           reduce using rule 68 (param1 -> ID mat especial .)
    CHAR            reduce using rule 68 (param1 -> ID mat especial .)


state 162

    (43) function1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 198


state 163

    (44) function2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    SEMICOLON       shift and go to state 199


state 164

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (131) pexp -> CTEI . saveCTE
    (140) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 200
    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 140 (saveCTE -> .) ]

    saveCTE                        shift and go to state 93

state 165

    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 201


state 166

    (33) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 202


state 167

    (34) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (131) pexp -> CTEI . saveCTE
    (140) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 203
    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 140 (saveCTE -> .) ]

    saveCTE                        shift and go to state 93

state 168

    (101) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (102) genera_quad_or -> .

    RBRACKET        reduce using rule 102 (genera_quad_or -> .)
    RPAREN          reduce using rule 102 (genera_quad_or -> .)
    COMMA           reduce using rule 102 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 102 (genera_quad_or -> .)
    TO              reduce using rule 102 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 204

state 169

    (109) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (103) genera_quad_and -> .

    OR              reduce using rule 103 (genera_quad_and -> .)
    RBRACKET        reduce using rule 103 (genera_quad_and -> .)
    RPAREN          reduce using rule 103 (genera_quad_and -> .)
    COMMA           reduce using rule 103 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 103 (genera_quad_and -> .)
    TO              reduce using rule 103 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 205

state 170

    (112) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 206

state 171

    (113) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 207

state 172

    (114) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 208

state 173

    (115) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 209

state 174

    (116) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 210

state 175

    (117) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (104) compare_quad -> .

    CTEI            reduce using rule 104 (compare_quad -> .)
    CTEF            reduce using rule 104 (compare_quad -> .)
    CTEC            reduce using rule 104 (compare_quad -> .)
    CTESTRING       reduce using rule 104 (compare_quad -> .)
    LPAREN          reduce using rule 104 (compare_quad -> .)
    ID              reduce using rule 104 (compare_quad -> .)
    PLUS            reduce using rule 104 (compare_quad -> .)
    MINUS           reduce using rule 104 (compare_quad -> .)
    MUL             reduce using rule 104 (compare_quad -> .)
    DIV             reduce using rule 104 (compare_quad -> .)
    AND             reduce using rule 104 (compare_quad -> .)
    OR              reduce using rule 104 (compare_quad -> .)
    RBRACKET        reduce using rule 104 (compare_quad -> .)
    RPAREN          reduce using rule 104 (compare_quad -> .)
    COMMA           reduce using rule 104 (compare_quad -> .)
    SEMICOLON       reduce using rule 104 (compare_quad -> .)
    TO              reduce using rule 104 (compare_quad -> .)

    compare_quad                   shift and go to state 211

state 176

    (119) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (121) genera_sum_quad -> .

    GT              reduce using rule 121 (genera_sum_quad -> .)
    LT              reduce using rule 121 (genera_sum_quad -> .)
    GTE             reduce using rule 121 (genera_sum_quad -> .)
    LTE             reduce using rule 121 (genera_sum_quad -> .)
    NE              reduce using rule 121 (genera_sum_quad -> .)
    COMPARE         reduce using rule 121 (genera_sum_quad -> .)
    AND             reduce using rule 121 (genera_sum_quad -> .)
    OR              reduce using rule 121 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 121 (genera_sum_quad -> .)
    RPAREN          reduce using rule 121 (genera_sum_quad -> .)
    COMMA           reduce using rule 121 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 121 (genera_sum_quad -> .)
    TO              reduce using rule 121 (genera_sum_quad -> .)
    CTEI            reduce using rule 121 (genera_sum_quad -> .)
    CTEF            reduce using rule 121 (genera_sum_quad -> .)
    CTEC            reduce using rule 121 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 121 (genera_sum_quad -> .)
    LPAREN          reduce using rule 121 (genera_sum_quad -> .)
    ID              reduce using rule 121 (genera_sum_quad -> .)
    PLUS            reduce using rule 121 (genera_sum_quad -> .)
    MINUS           reduce using rule 121 (genera_sum_quad -> .)
    MUL             reduce using rule 121 (genera_sum_quad -> .)
    DIV             reduce using rule 121 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 212

state 177

    (120) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (121) genera_sum_quad -> .

    GT              reduce using rule 121 (genera_sum_quad -> .)
    LT              reduce using rule 121 (genera_sum_quad -> .)
    GTE             reduce using rule 121 (genera_sum_quad -> .)
    LTE             reduce using rule 121 (genera_sum_quad -> .)
    NE              reduce using rule 121 (genera_sum_quad -> .)
    COMPARE         reduce using rule 121 (genera_sum_quad -> .)
    AND             reduce using rule 121 (genera_sum_quad -> .)
    OR              reduce using rule 121 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 121 (genera_sum_quad -> .)
    RPAREN          reduce using rule 121 (genera_sum_quad -> .)
    COMMA           reduce using rule 121 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 121 (genera_sum_quad -> .)
    TO              reduce using rule 121 (genera_sum_quad -> .)
    CTEI            reduce using rule 121 (genera_sum_quad -> .)
    CTEF            reduce using rule 121 (genera_sum_quad -> .)
    CTEC            reduce using rule 121 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 121 (genera_sum_quad -> .)
    LPAREN          reduce using rule 121 (genera_sum_quad -> .)
    ID              reduce using rule 121 (genera_sum_quad -> .)
    PLUS            reduce using rule 121 (genera_sum_quad -> .)
    MINUS           reduce using rule 121 (genera_sum_quad -> .)
    MUL             reduce using rule 121 (genera_sum_quad -> .)
    DIV             reduce using rule 121 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 213

state 178

    (128) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (122) genera_mul_quad -> .

    PLUS            reduce using rule 122 (genera_mul_quad -> .)
    MINUS           reduce using rule 122 (genera_mul_quad -> .)
    GT              reduce using rule 122 (genera_mul_quad -> .)
    LT              reduce using rule 122 (genera_mul_quad -> .)
    GTE             reduce using rule 122 (genera_mul_quad -> .)
    LTE             reduce using rule 122 (genera_mul_quad -> .)
    NE              reduce using rule 122 (genera_mul_quad -> .)
    COMPARE         reduce using rule 122 (genera_mul_quad -> .)
    AND             reduce using rule 122 (genera_mul_quad -> .)
    OR              reduce using rule 122 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 122 (genera_mul_quad -> .)
    RPAREN          reduce using rule 122 (genera_mul_quad -> .)
    COMMA           reduce using rule 122 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 122 (genera_mul_quad -> .)
    TO              reduce using rule 122 (genera_mul_quad -> .)
    CTEI            reduce using rule 122 (genera_mul_quad -> .)
    CTEF            reduce using rule 122 (genera_mul_quad -> .)
    CTEC            reduce using rule 122 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 122 (genera_mul_quad -> .)
    LPAREN          reduce using rule 122 (genera_mul_quad -> .)
    ID              reduce using rule 122 (genera_mul_quad -> .)
    MUL             reduce using rule 122 (genera_mul_quad -> .)
    DIV             reduce using rule 122 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 214

state 179

    (129) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (122) genera_mul_quad -> .

    PLUS            reduce using rule 122 (genera_mul_quad -> .)
    MINUS           reduce using rule 122 (genera_mul_quad -> .)
    GT              reduce using rule 122 (genera_mul_quad -> .)
    LT              reduce using rule 122 (genera_mul_quad -> .)
    GTE             reduce using rule 122 (genera_mul_quad -> .)
    LTE             reduce using rule 122 (genera_mul_quad -> .)
    NE              reduce using rule 122 (genera_mul_quad -> .)
    COMPARE         reduce using rule 122 (genera_mul_quad -> .)
    AND             reduce using rule 122 (genera_mul_quad -> .)
    OR              reduce using rule 122 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 122 (genera_mul_quad -> .)
    RPAREN          reduce using rule 122 (genera_mul_quad -> .)
    COMMA           reduce using rule 122 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 122 (genera_mul_quad -> .)
    TO              reduce using rule 122 (genera_mul_quad -> .)
    CTEI            reduce using rule 122 (genera_mul_quad -> .)
    CTEF            reduce using rule 122 (genera_mul_quad -> .)
    CTEC            reduce using rule 122 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 122 (genera_mul_quad -> .)
    LPAREN          reduce using rule 122 (genera_mul_quad -> .)
    ID              reduce using rule 122 (genera_mul_quad -> .)
    MUL             reduce using rule 122 (genera_mul_quad -> .)
    DIV             reduce using rule 122 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 215

state 180

    (73) llamada -> ID era_call LPAREN aux_exp . RPAREN gosub_quad

    RPAREN          shift and go to state 216


state 181

    (74) aux_exp -> exp .
    (75) aux_exp -> exp . quad_param COMMA aux_exp quad_param
    (78) quad_param -> .

    RPAREN          reduce using rule 74 (aux_exp -> exp .)
    COMMA           reduce using rule 78 (quad_param -> .)

    quad_param                     shift and go to state 217

state 182

    (76) aux_exp -> empty .
    (23) var1 -> empty .

  ! reduce/reduce conflict for RPAREN resolved using rule 23 (var1 -> empty .)
    MUL             reduce using rule 23 (var1 -> empty .)
    DIV             reduce using rule 23 (var1 -> empty .)
    PLUS            reduce using rule 23 (var1 -> empty .)
    MINUS           reduce using rule 23 (var1 -> empty .)
    GT              reduce using rule 23 (var1 -> empty .)
    LT              reduce using rule 23 (var1 -> empty .)
    GTE             reduce using rule 23 (var1 -> empty .)
    LTE             reduce using rule 23 (var1 -> empty .)
    NE              reduce using rule 23 (var1 -> empty .)
    COMPARE         reduce using rule 23 (var1 -> empty .)
    AND             reduce using rule 23 (var1 -> empty .)
    OR              reduce using rule 23 (var1 -> empty .)
    COMMA           reduce using rule 23 (var1 -> empty .)
    RPAREN          reduce using rule 23 (var1 -> empty .)

  ! RPAREN          [ reduce using rule 76 (aux_exp -> empty .) ]


state 183

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 218


state 184

    (48) statement -> statement1 statement .

    RCURLY          reduce using rule 48 (statement -> statement1 statement .)
    RETURN          reduce using rule 48 (statement -> statement1 statement .)


state 185

    (50) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 50 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 50 (statement1 -> asignacion SEMICOLON .)


state 186

    (51) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 51 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 51 (statement1 -> llamada SEMICOLON .)


state 187

    (52) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 52 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 52 (statement1 -> lectura SEMICOLON .)


state 188

    (53) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 53 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 53 (statement1 -> escritura SEMICOLON .)


state 189

    (57) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> ID saveId2 . mat EQUALS addOperadorName exp genera_quad_asignacion
    (30) arr -> . LBRACKET CTEI RBRACKET
    (31) arr -> . LBRACKET exp RBRACKET
    (32) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (34) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (35) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 219
    LBRACKET        shift and go to state 51

    arr                            shift and go to state 220
    mat                            shift and go to state 221

state 190

    (99) lectura -> READ operatorRead . LPAREN exp operatorReadQuad RPAREN

    LPAREN          shift and go to state 222


state 191

    (92) escritura -> PRINT LPAREN . operadorPrint escritura1 operatorPrintQuad RPAREN
    (123) operadorPrint -> .

    COMILLA         reduce using rule 123 (operadorPrint -> .)
    CTEI            reduce using rule 123 (operadorPrint -> .)
    CTEF            reduce using rule 123 (operadorPrint -> .)
    CTEC            reduce using rule 123 (operadorPrint -> .)
    CTESTRING       reduce using rule 123 (operadorPrint -> .)
    LPAREN          reduce using rule 123 (operadorPrint -> .)
    ID              reduce using rule 123 (operadorPrint -> .)
    RPAREN          reduce using rule 123 (operadorPrint -> .)
    COMMA           reduce using rule 123 (operadorPrint -> .)
    OR              reduce using rule 123 (operadorPrint -> .)
    AND             reduce using rule 123 (operadorPrint -> .)
    GT              reduce using rule 123 (operadorPrint -> .)
    LT              reduce using rule 123 (operadorPrint -> .)
    GTE             reduce using rule 123 (operadorPrint -> .)
    LTE             reduce using rule 123 (operadorPrint -> .)
    NE              reduce using rule 123 (operadorPrint -> .)
    COMPARE         reduce using rule 123 (operadorPrint -> .)
    PLUS            reduce using rule 123 (operadorPrint -> .)
    MINUS           reduce using rule 123 (operadorPrint -> .)
    MUL             reduce using rule 123 (operadorPrint -> .)
    DIV             reduce using rule 123 (operadorPrint -> .)

    operadorPrint                  shift and go to state 223

state 192

    (85) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end

    LPAREN          shift and go to state 224


state 193

    (80) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    exp                            shift and go to state 225
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 194

    (91) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 226


state 195

    (63) param1 -> ID COMMA var1 addV .

    RPAREN          reduce using rule 63 (param1 -> ID COMMA var1 addV .)
    INT             reduce using rule 63 (param1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 63 (param1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 63 (param1 -> ID COMMA var1 addV .)


state 196

    (65) param1 -> ID arr COMMA var1 . addV
    (24) addV -> .

    RPAREN          reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)

    addV                           shift and go to state 227

state 197

    (66) param1 -> ID mat COMMA var1 . addV
    (24) addV -> .

    RPAREN          reduce using rule 24 (addV -> .)
    INT             reduce using rule 24 (addV -> .)
    FLOAT           reduce using rule 24 (addV -> .)
    CHAR            reduce using rule 24 (addV -> .)

    addV                           shift and go to state 228

state 198

    (43) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 229


state 199

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LCURLY          shift and go to state 230


state 200

    (32) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 201

    (35) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 35 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 202

    (33) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 203

    (34) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 204

    (101) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 101 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 101 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 101 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 101 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 101 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 205

    (109) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 109 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 206

    (112) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 112 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 207

    (113) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 113 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 208

    (114) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 114 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 209

    (115) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 115 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 210

    (116) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 116 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 211

    (117) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 117 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 212

    (119) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 119 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 213

    (120) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 120 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 214

    (128) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 128 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 215

    (129) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 129 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 216

    (73) llamada -> ID era_call LPAREN aux_exp RPAREN . gosub_quad
    (79) gosub_quad -> .

    MUL             reduce using rule 79 (gosub_quad -> .)
    DIV             reduce using rule 79 (gosub_quad -> .)
    PLUS            reduce using rule 79 (gosub_quad -> .)
    MINUS           reduce using rule 79 (gosub_quad -> .)
    GT              reduce using rule 79 (gosub_quad -> .)
    LT              reduce using rule 79 (gosub_quad -> .)
    GTE             reduce using rule 79 (gosub_quad -> .)
    LTE             reduce using rule 79 (gosub_quad -> .)
    NE              reduce using rule 79 (gosub_quad -> .)
    COMPARE         reduce using rule 79 (gosub_quad -> .)
    AND             reduce using rule 79 (gosub_quad -> .)
    OR              reduce using rule 79 (gosub_quad -> .)
    RBRACKET        reduce using rule 79 (gosub_quad -> .)
    RPAREN          reduce using rule 79 (gosub_quad -> .)
    COMMA           reduce using rule 79 (gosub_quad -> .)
    SEMICOLON       reduce using rule 79 (gosub_quad -> .)
    TO              reduce using rule 79 (gosub_quad -> .)
    CTEI            reduce using rule 79 (gosub_quad -> .)
    CTEF            reduce using rule 79 (gosub_quad -> .)
    CTEC            reduce using rule 79 (gosub_quad -> .)
    CTESTRING       reduce using rule 79 (gosub_quad -> .)
    LPAREN          reduce using rule 79 (gosub_quad -> .)
    ID              reduce using rule 79 (gosub_quad -> .)

    gosub_quad                     shift and go to state 231

state 217

    (75) aux_exp -> exp quad_param . COMMA aux_exp quad_param

    COMMA           shift and go to state 232


state 218

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 219

    (57) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 233

state 220

    (58) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 234


state 221

    (59) asignacion -> ID saveId2 mat . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 235


state 222

    (99) lectura -> READ operatorRead LPAREN . exp operatorReadQuad RPAREN
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    exp                            shift and go to state 236
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 223

    (92) escritura -> PRINT LPAREN operadorPrint . escritura1 operatorPrintQuad RPAREN
    (93) escritura1 -> . escritura2 COMMA escritura2
    (94) escritura1 -> . escritura2
    (95) escritura2 -> . COMILLA CTESTRING COMILLA
    (96) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (97) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (98) escritura2 -> . exp
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    COMILLA         shift and go to state 239
    CTEI            shift and go to state 240
    CTEF            shift and go to state 241
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    escritura1                     shift and go to state 237
    escritura2                     shift and go to state 238
    exp                            shift and go to state 242
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 224

    (85) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (86) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 244

    for1                           shift and go to state 243

state 225

    (80) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 245


state 226

    (91) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    exp                            shift and go to state 246
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 227

    (65) param1 -> ID arr COMMA var1 addV .

    RPAREN          reduce using rule 65 (param1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 65 (param1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 65 (param1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 65 (param1 -> ID arr COMMA var1 addV .)


state 228

    (66) param1 -> ID mat COMMA var1 addV .

    RPAREN          reduce using rule 66 (param1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 66 (param1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 66 (param1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 66 (param1 -> ID mat COMMA var1 addV .)


state 229

    (43) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (13) vars -> . var
    (14) vars -> . empty
    (15) var -> . VAR var2
    (137) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    PRINT           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    RCURLY          reduce using rule 137 (empty -> .)

    vars                           shift and go to state 247
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 230

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (13) vars -> . var
    (14) vars -> . empty
    (15) var -> . VAR var2
    (137) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    PRINT           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    vars                           shift and go to state 248
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 231

    (73) llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .

    MUL             reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    DIV             reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    PLUS            reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    MINUS           reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    GT              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    LT              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    GTE             reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    LTE             reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    NE              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    COMPARE         reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    AND             reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    OR              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    RBRACKET        reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    RPAREN          reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    COMMA           reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    SEMICOLON       reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    TO              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    CTEI            reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    CTEF            reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    CTEC            reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    CTESTRING       reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    LPAREN          reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)
    ID              reduce using rule 73 (llamada -> ID era_call LPAREN aux_exp RPAREN gosub_quad .)


state 232

    (75) aux_exp -> exp quad_param COMMA . aux_exp quad_param
    (74) aux_exp -> . exp
    (75) aux_exp -> . exp quad_param COMMA aux_exp quad_param
    (76) aux_exp -> . empty
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (137) empty -> .
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad

    RPAREN          reduce using rule 137 (empty -> .)
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    COMMA           reduce using rule 137 (empty -> .)
    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82

    exp                            shift and go to state 181
    aux_exp                        shift and go to state 249
    empty                          shift and go to state 182
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80

state 233

    (57) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    exp                            shift and go to state 250
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 234

    (58) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 251

state 235

    (59) asignacion -> ID saveId2 mat EQUALS . addOperadorName exp genera_quad_asignacion
    (61) addOperadorName -> .

    CTEI            reduce using rule 61 (addOperadorName -> .)
    CTEF            reduce using rule 61 (addOperadorName -> .)
    CTEC            reduce using rule 61 (addOperadorName -> .)
    CTESTRING       reduce using rule 61 (addOperadorName -> .)
    LPAREN          reduce using rule 61 (addOperadorName -> .)
    ID              reduce using rule 61 (addOperadorName -> .)
    OR              reduce using rule 61 (addOperadorName -> .)
    AND             reduce using rule 61 (addOperadorName -> .)
    GT              reduce using rule 61 (addOperadorName -> .)
    LT              reduce using rule 61 (addOperadorName -> .)
    GTE             reduce using rule 61 (addOperadorName -> .)
    LTE             reduce using rule 61 (addOperadorName -> .)
    NE              reduce using rule 61 (addOperadorName -> .)
    COMPARE         reduce using rule 61 (addOperadorName -> .)
    PLUS            reduce using rule 61 (addOperadorName -> .)
    MINUS           reduce using rule 61 (addOperadorName -> .)
    MUL             reduce using rule 61 (addOperadorName -> .)
    DIV             reduce using rule 61 (addOperadorName -> .)
    SEMICOLON       reduce using rule 61 (addOperadorName -> .)
    TO              reduce using rule 61 (addOperadorName -> .)

    addOperadorName                shift and go to state 252

state 236

    (99) lectura -> READ operatorRead LPAREN exp . operatorReadQuad RPAREN
    (126) operatorReadQuad -> .

    RPAREN          reduce using rule 126 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 253

state 237

    (92) escritura -> PRINT LPAREN operadorPrint escritura1 . operatorPrintQuad RPAREN
    (124) operatorPrintQuad -> .

    RPAREN          reduce using rule 124 (operatorPrintQuad -> .)

    operatorPrintQuad              shift and go to state 254

state 238

    (93) escritura1 -> escritura2 . COMMA escritura2
    (94) escritura1 -> escritura2 .

    COMMA           shift and go to state 255
    RPAREN          reduce using rule 94 (escritura1 -> escritura2 .)


state 239

    (95) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 256


state 240

    (96) escritura2 -> CTEI . saveCTE operatorPrintQuad
    (131) pexp -> CTEI . saveCTE
    (140) saveCTE -> .

    COMMA           reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 257

state 241

    (97) escritura2 -> CTEF . saveCTE operatorPrintQuad
    (132) pexp -> CTEF . saveCTE
    (140) saveCTE -> .

    COMMA           reduce using rule 140 (saveCTE -> .)
    RPAREN          reduce using rule 140 (saveCTE -> .)
    MUL             reduce using rule 140 (saveCTE -> .)
    DIV             reduce using rule 140 (saveCTE -> .)
    PLUS            reduce using rule 140 (saveCTE -> .)
    MINUS           reduce using rule 140 (saveCTE -> .)
    GT              reduce using rule 140 (saveCTE -> .)
    LT              reduce using rule 140 (saveCTE -> .)
    GTE             reduce using rule 140 (saveCTE -> .)
    LTE             reduce using rule 140 (saveCTE -> .)
    NE              reduce using rule 140 (saveCTE -> .)
    COMPARE         reduce using rule 140 (saveCTE -> .)
    AND             reduce using rule 140 (saveCTE -> .)
    OR              reduce using rule 140 (saveCTE -> .)

    saveCTE                        shift and go to state 258

state 242

    (98) escritura2 -> exp .

    COMMA           reduce using rule 98 (escritura2 -> exp .)
    RPAREN          reduce using rule 98 (escritura2 -> exp .)


state 243

    (85) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY for_end

    RPAREN          shift and go to state 259


state 244

    (86) for1 -> FROM . asignacion TO exp
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 261

    asignacion                     shift and go to state 260

state 245

    (80) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (105) if_quad -> .

    LCURLY          reduce using rule 105 (if_quad -> .)

    if_quad                        shift and go to state 262

state 246

    (91) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 263


state 247

    (43) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 264
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 248

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RETURN          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 265
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 249

    (75) aux_exp -> exp quad_param COMMA aux_exp . quad_param
    (78) quad_param -> .

    RPAREN          reduce using rule 78 (quad_param -> .)

    quad_param                     shift and go to state 266

state 250

    (57) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (60) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 60 (genera_quad_asignacion -> .)
    TO              reduce using rule 60 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 267

state 251

    (58) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    exp                            shift and go to state 268
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 252

    (59) asignacion -> ID saveId2 mat EQUALS addOperadorName . exp genera_quad_asignacion
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)
    TO              reduce using rule 137 (empty -> .)

    exp                            shift and go to state 269
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 253

    (99) lectura -> READ operatorRead LPAREN exp operatorReadQuad . RPAREN

    RPAREN          shift and go to state 270


state 254

    (92) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad . RPAREN

    RPAREN          shift and go to state 271


state 255

    (93) escritura1 -> escritura2 COMMA . escritura2
    (95) escritura2 -> . COMILLA CTESTRING COMILLA
    (96) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (97) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (98) escritura2 -> . exp
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    COMILLA         shift and go to state 239
    CTEI            shift and go to state 240
    CTEF            shift and go to state 241
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    escritura2                     shift and go to state 272
    exp                            shift and go to state 242
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 256

    (95) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 273


state 257

    (96) escritura2 -> CTEI saveCTE . operatorPrintQuad
    (131) pexp -> CTEI saveCTE .
    (124) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 124 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 124 (operatorPrintQuad -> .)
    MUL             reduce using rule 131 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 131 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 131 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 131 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 131 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 131 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 131 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 131 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 131 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 131 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 131 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 131 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 124 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 124 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 131 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 131 (pexp -> CTEI saveCTE .) ]

    operatorPrintQuad              shift and go to state 274

state 258

    (97) escritura2 -> CTEF saveCTE . operatorPrintQuad
    (132) pexp -> CTEF saveCTE .
    (124) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 124 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 124 (operatorPrintQuad -> .)
    MUL             reduce using rule 132 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 132 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 132 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 132 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 132 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 132 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 132 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 132 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 132 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 132 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 132 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 132 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 124 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 124 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 132 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 132 (pexp -> CTEF saveCTE .) ]

    operatorPrintQuad              shift and go to state 275

state 259

    (85) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY for_end
    (84) for_quad -> .

    LCURLY          reduce using rule 84 (for_quad -> .)

    for_quad                       shift and go to state 276

state 260

    (86) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 277


state 261

    (57) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (139) saveId2 -> .

    EQUALS          reduce using rule 139 (saveId2 -> .)
    LBRACKET        reduce using rule 139 (saveId2 -> .)

    saveId2                        shift and go to state 189

state 262

    (80) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 278


state 263

    (91) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement RCURLY loop_end
    (89) while_quad -> .

    LCURLY          reduce using rule 89 (while_quad -> .)

    while_quad                     shift and go to state 279

state 264

    (43) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 280


state 265

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    RETURN          shift and go to state 281


state 266

    (75) aux_exp -> exp quad_param COMMA aux_exp quad_param .

    RPAREN          reduce using rule 75 (aux_exp -> exp quad_param COMMA aux_exp quad_param .)


state 267

    (57) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 57 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 57 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 268

    (58) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (60) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 60 (genera_quad_asignacion -> .)
    TO              reduce using rule 60 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 282

state 269

    (59) asignacion -> ID saveId2 mat EQUALS addOperadorName exp . genera_quad_asignacion
    (60) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 60 (genera_quad_asignacion -> .)
    TO              reduce using rule 60 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 283

state 270

    (99) lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 99 (lectura -> READ operatorRead LPAREN exp operatorReadQuad RPAREN .)


state 271

    (92) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .

    SEMICOLON       reduce using rule 92 (escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .)


state 272

    (93) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 93 (escritura1 -> escritura2 COMMA escritura2 .)


state 273

    (95) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 95 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 95 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 274

    (96) escritura2 -> CTEI saveCTE operatorPrintQuad .

    COMMA           reduce using rule 96 (escritura2 -> CTEI saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 96 (escritura2 -> CTEI saveCTE operatorPrintQuad .)


state 275

    (97) escritura2 -> CTEF saveCTE operatorPrintQuad .

    COMMA           reduce using rule 97 (escritura2 -> CTEF saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 97 (escritura2 -> CTEF saveCTE operatorPrintQuad .)


state 276

    (85) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY for_end

    LCURLY          shift and go to state 284


state 277

    (86) for1 -> FROM asignacion TO . exp
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    RPAREN          reduce using rule 137 (empty -> .)

    exp                            shift and go to state 285
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 278

    (80) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 286
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 279

    (91) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 287


state 280

    (43) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 43 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 43 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 43 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 281

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY
    (46) operadorReturn -> .

    CTEI            reduce using rule 46 (operadorReturn -> .)
    CTEF            reduce using rule 46 (operadorReturn -> .)
    CTEC            reduce using rule 46 (operadorReturn -> .)
    CTESTRING       reduce using rule 46 (operadorReturn -> .)
    LPAREN          reduce using rule 46 (operadorReturn -> .)
    ID              reduce using rule 46 (operadorReturn -> .)
    SEMICOLON       reduce using rule 46 (operadorReturn -> .)
    OR              reduce using rule 46 (operadorReturn -> .)
    AND             reduce using rule 46 (operadorReturn -> .)
    GT              reduce using rule 46 (operadorReturn -> .)
    LT              reduce using rule 46 (operadorReturn -> .)
    GTE             reduce using rule 46 (operadorReturn -> .)
    LTE             reduce using rule 46 (operadorReturn -> .)
    NE              reduce using rule 46 (operadorReturn -> .)
    COMPARE         reduce using rule 46 (operadorReturn -> .)
    PLUS            reduce using rule 46 (operadorReturn -> .)
    MINUS           reduce using rule 46 (operadorReturn -> .)
    MUL             reduce using rule 46 (operadorReturn -> .)
    DIV             reduce using rule 46 (operadorReturn -> .)

    operadorReturn                 shift and go to state 288

state 282

    (58) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 58 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 58 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 283

    (59) asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 59 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 59 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)


state 284

    (85) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY for_end
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 289
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 285

    (86) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 86 (for1 -> FROM asignacion TO exp .)


state 286

    (80) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 290


state 287

    (91) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement RCURLY loop_end
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 291
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 288

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY
    (100) exp -> . nexp
    (101) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (108) nexp -> . compexp
    (109) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (110) compexp -> . sumexp
    (111) compexp -> . compexp1 sumexp
    (118) sumexp -> . mulexp
    (119) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (120) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (112) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (113) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (114) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (115) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (116) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (117) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (127) mulexp -> . pexp
    (128) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (129) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (130) pexp -> . var1 saveId
    (131) pexp -> . CTEI saveCTE
    (132) pexp -> . CTEF saveCTE
    (133) pexp -> . CTEC saveCTE
    (134) pexp -> . CTESTRING saveCTE
    (135) pexp -> . llamada
    (136) pexp -> . LPAREN exp RPAREN
    (16) var1 -> . ID
    (17) var1 -> . ID COMMA var1 addV
    (18) var1 -> . ID arr
    (19) var1 -> . ID arr COMMA var1 addV
    (20) var1 -> . ID mat COMMA var1 addV
    (21) var1 -> . ID mat
    (22) var1 -> . ID mat especial
    (23) var1 -> . empty
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (137) empty -> .

    CTEI            shift and go to state 104
    CTEF            shift and go to state 77
    CTEC            shift and go to state 78
    CTESTRING       shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 137 (empty -> .)
    DIV             reduce using rule 137 (empty -> .)
    PLUS            reduce using rule 137 (empty -> .)
    MINUS           reduce using rule 137 (empty -> .)
    GT              reduce using rule 137 (empty -> .)
    LT              reduce using rule 137 (empty -> .)
    GTE             reduce using rule 137 (empty -> .)
    LTE             reduce using rule 137 (empty -> .)
    NE              reduce using rule 137 (empty -> .)
    COMPARE         reduce using rule 137 (empty -> .)
    AND             reduce using rule 137 (empty -> .)
    OR              reduce using rule 137 (empty -> .)
    SEMICOLON       reduce using rule 137 (empty -> .)

    exp                            shift and go to state 292
    nexp                           shift and go to state 70
    compexp                        shift and go to state 71
    sumexp                         shift and go to state 72
    compexp1                       shift and go to state 73
    mulexp                         shift and go to state 74
    pexp                           shift and go to state 75
    var1                           shift and go to state 76
    llamada                        shift and go to state 80
    empty                          shift and go to state 35

state 289

    (85) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY for_end

    RCURLY          shift and go to state 293


state 290

    (80) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (81) else -> . ELSE else_quad LCURLY statement RCURLY
    (82) else -> . empty
    (137) empty -> .

    ELSE            shift and go to state 295
    ID              reduce using rule 137 (empty -> .)
    READ            reduce using rule 137 (empty -> .)
    PRINT           reduce using rule 137 (empty -> .)
    FOR             reduce using rule 137 (empty -> .)
    IF              reduce using rule 137 (empty -> .)
    WHILE           reduce using rule 137 (empty -> .)
    RCURLY          reduce using rule 137 (empty -> .)
    RETURN          reduce using rule 137 (empty -> .)

    else                           shift and go to state 294
    empty                          shift and go to state 296

state 291

    (91) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 297


state 292

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY
    (47) quad_return -> .

    SEMICOLON       reduce using rule 47 (quad_return -> .)

    quad_return                    shift and go to state 298

state 293

    (85) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . for_end
    (88) for_end -> .

    ID              reduce using rule 88 (for_end -> .)
    READ            reduce using rule 88 (for_end -> .)
    PRINT           reduce using rule 88 (for_end -> .)
    FOR             reduce using rule 88 (for_end -> .)
    IF              reduce using rule 88 (for_end -> .)
    WHILE           reduce using rule 88 (for_end -> .)
    RCURLY          reduce using rule 88 (for_end -> .)
    RETURN          reduce using rule 88 (for_end -> .)

    for_end                        shift and go to state 299

state 294

    (80) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (106) end_if -> .

    ID              reduce using rule 106 (end_if -> .)
    READ            reduce using rule 106 (end_if -> .)
    PRINT           reduce using rule 106 (end_if -> .)
    FOR             reduce using rule 106 (end_if -> .)
    IF              reduce using rule 106 (end_if -> .)
    WHILE           reduce using rule 106 (end_if -> .)
    RCURLY          reduce using rule 106 (end_if -> .)
    RETURN          reduce using rule 106 (end_if -> .)

    end_if                         shift and go to state 300

state 295

    (81) else -> ELSE . else_quad LCURLY statement RCURLY
    (107) else_quad -> .

    LCURLY          reduce using rule 107 (else_quad -> .)

    else_quad                      shift and go to state 301

state 296

    (82) else -> empty .

    ID              reduce using rule 82 (else -> empty .)
    READ            reduce using rule 82 (else -> empty .)
    PRINT           reduce using rule 82 (else -> empty .)
    FOR             reduce using rule 82 (else -> empty .)
    IF              reduce using rule 82 (else -> empty .)
    WHILE           reduce using rule 82 (else -> empty .)
    RCURLY          reduce using rule 82 (else -> empty .)
    RETURN          reduce using rule 82 (else -> empty .)


state 297

    (91) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY . loop_end
    (87) loop_end -> .

    ID              reduce using rule 87 (loop_end -> .)
    READ            reduce using rule 87 (loop_end -> .)
    PRINT           reduce using rule 87 (loop_end -> .)
    FOR             reduce using rule 87 (loop_end -> .)
    IF              reduce using rule 87 (loop_end -> .)
    WHILE           reduce using rule 87 (loop_end -> .)
    RCURLY          reduce using rule 87 (loop_end -> .)
    RETURN          reduce using rule 87 (loop_end -> .)

    loop_end                       shift and go to state 302

state 298

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 303


state 299

    (85) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .

    ID              reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    READ            reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    PRINT           reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    FOR             reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    IF              reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    WHILE           reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RCURLY          reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)
    RETURN          reduce using rule 85 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end .)


state 300

    (80) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    PRINT           reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 80 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 301

    (81) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 304


state 302

    (91) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 91 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)


state 303

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY

    RCURLY          shift and go to state 305


state 304

    (81) else -> ELSE else_quad LCURLY . statement RCURLY
    (48) statement -> . statement1 statement
    (49) statement -> . empty
    (50) statement1 -> . asignacion SEMICOLON
    (51) statement1 -> . llamada SEMICOLON
    (52) statement1 -> . lectura SEMICOLON
    (53) statement1 -> . escritura SEMICOLON
    (54) statement1 -> . for
    (55) statement1 -> . if
    (56) statement1 -> . while
    (137) empty -> .
    (57) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (59) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (73) llamada -> . ID era_call LPAREN aux_exp RPAREN gosub_quad
    (99) lectura -> . READ operatorRead LPAREN exp operatorReadQuad RPAREN
    (92) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (85) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY for_end
    (80) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (91) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 137 (empty -> .)
    ID              shift and go to state 151
    READ            shift and go to state 152
    PRINT           shift and go to state 153
    FOR             shift and go to state 154
    IF              shift and go to state 155
    WHILE           shift and go to state 156

    statement                      shift and go to state 306
    statement1                     shift and go to state 142
    empty                          shift and go to state 143
    asignacion                     shift and go to state 144
    llamada                        shift and go to state 145
    lectura                        shift and go to state 146
    escritura                      shift and go to state 147
    for                            shift and go to state 148
    if                             shift and go to state 149
    while                          shift and go to state 150

state 305

    (44) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .

    FUN             reduce using rule 44 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    MAIN            reduce using rule 44 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    $end            reduce using rule 44 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)


state 306

    (81) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 307


state 307

    (81) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    PRINT           reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 81 (else -> ELSE else_quad LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 34 resolved as shift
WARNING: shift/reduce conflict for ID in state 48 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 49 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 50 resolved as shift
WARNING: shift/reduce conflict for ID in state 62 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 68 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 74 resolved as shift
WARNING: shift/reduce conflict for MUL in state 75 resolved as shift
WARNING: shift/reduce conflict for DIV in state 75 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 129 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 130 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 131 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 131 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 132 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 133 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 134 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 135 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 135 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 136 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 136 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 137 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 137 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 138 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 138 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 164 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 167 resolved as shift
WARNING: reduce/reduce conflict in state 82 resolved using rule (var1 -> ID)
WARNING: rejected rule (era_call -> <empty>) in state 82
WARNING: reduce/reduce conflict in state 182 resolved using rule (var1 -> empty)
WARNING: rejected rule (aux_exp -> empty) in state 182
WARNING: reduce/reduce conflict in state 257 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 257
WARNING: reduce/reduce conflict in state 258 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 258
WARNING: Rule (aux_exp -> empty) is never reduced
