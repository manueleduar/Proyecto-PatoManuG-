Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Unused terminals:

    COMILLA

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID addP SEMICOLON programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT guardaTipoVar
Rule 9     tipo -> FLOAT guardaTipoVar
Rule 10    tipo -> CHAR guardaTipoVar
Rule 11    guardaTipoVar -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1 addV
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1 addV
Rule 19    var1 -> ID mat COMMA var1 addV
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    addV -> <empty>
Rule 24    var2 -> var2 tipo var1 SEMICOLON addV
Rule 25    var2 -> empty
Rule 26    especial -> TRANSPUESTA
Rule 27    especial -> INVERSA
Rule 28    especial -> DETERMINANTE
Rule 29    arr -> LBRACKET CTEI RBRACKET
Rule 30    arr -> LBRACKET exp RBRACKET
Rule 31    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 32    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 34    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 35    modules -> function modules
Rule 36    modules -> empty
Rule 37    function -> FUN VOID function1
Rule 38    function -> FUN INT function2
Rule 39    function -> FUN CHAR function2
Rule 40    function -> FUN FLOAT function2
Rule 41    save_fun -> <empty>
Rule 42    function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 43    function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 44    statement -> statement1 statement
Rule 45    statement -> empty
Rule 46    statement1 -> asignacion SEMICOLON
Rule 47    statement1 -> llamada SEMICOLON
Rule 48    statement1 -> lectura SEMICOLON
Rule 49    statement1 -> escritura SEMICOLON
Rule 50    statement1 -> for
Rule 51    statement1 -> if
Rule 52    statement1 -> while
Rule 53    asignacion -> ID EQUALS exp
Rule 54    asignacion -> ID arr EQUALS exp
Rule 55    asignacion -> ID mat EQUALS exp
Rule 56    param -> tipo param1
Rule 57    param -> empty
Rule 58    param1 -> ID
Rule 59    param1 -> ID COMMA param1
Rule 60    param1 -> empty
Rule 61    llamada -> ID LPAREN exp RPAREN
Rule 62    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY
Rule 63    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else
Rule 64    else -> ELSE LCURLY statement RCURLY
Rule 65    else -> empty
Rule 66    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 67    for1 -> FROM asignacion TO exp
Rule 68    while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY
Rule 69    escritura -> PRINT LPAREN escritura1 RPAREN
Rule 70    escritura1 -> escritura2 COMMA escritura2
Rule 71    escritura1 -> escritura2
Rule 72    escritura2 -> CTESTRING
Rule 73    escritura2 -> CTEI
Rule 74    escritura2 -> CTEF
Rule 75    escritura2 -> exp
Rule 76    lectura -> READ LPAREN var1 RPAREN
Rule 77    exp -> nexp
Rule 78    exp -> nexp OR nexp
Rule 79    nexp -> compexp
Rule 80    nexp -> compexp AND compexp
Rule 81    compexp -> sumexp
Rule 82    compexp -> compexp1 sumexp
Rule 83    compexp1 -> sumexp GT sumexp
Rule 84    compexp1 -> sumexp LT sumexp
Rule 85    compexp1 -> sumexp GTE sumexp
Rule 86    compexp1 -> sumexp LTE sumexp
Rule 87    compexp1 -> sumexp NE sumexp
Rule 88    sumexp -> mulexp
Rule 89    sumexp -> mulexp PLUS mulexp
Rule 90    sumexp -> mulexp MINUS mulexp
Rule 91    mulexp -> pexp
Rule 92    mulexp -> pexp MUL pexp
Rule 93    mulexp -> pexp DIV pexp
Rule 94    pexp -> var1
Rule 95    pexp -> CTEI
Rule 96    pexp -> CTEF
Rule 97    pexp -> CTEC
Rule 98    pexp -> llamada
Rule 99    pexp -> LPAREN exp RPAREN
Rule 100   empty -> <empty>

Terminals, with rules where they appear

AND                  : 80
CHAR                 : 10 39
COMILLA              : 
COMMA                : 16 18 19 59 70
CTEC                 : 97
CTEF                 : 74 96
CTEI                 : 29 31 31 33 34 73 95
CTESTRING            : 72
DETERMINANTE         : 28
DIV                  : 93
ELSE                 : 64
END                  : 7
EQUALS               : 53 54 55
FLOAT                : 9 40
FOR                  : 66
FROM                 : 67
FUN                  : 37 38 39 40
GT                   : 83
GTE                  : 85
ID                   : 1 15 16 17 18 19 20 21 42 43 53 54 55 58 59 61
IF                   : 62 63
INT                  : 8 38
INVERSA              : 27
LBRACKET             : 29 30 31 31 32 32 33 33 34 34
LCURLY               : 7 42 43 62 63 64 66 68
LPAREN               : 7 42 43 61 62 63 66 68 69 76 99
LT                   : 84
LTE                  : 86
MAIN                 : 7
MINUS                : 90
MUL                  : 92
NE                   : 87
OR                   : 78
PLUS                 : 89
PRINT                : 69
PROGRAM              : 1
RBRACKET             : 29 30 31 31 32 32 33 33 34 34
RCURLY               : 7 42 43 62 63 64 66 68
READ                 : 76
RETURN               : 43
RPAREN               : 7 42 43 61 62 63 66 68 69 76 99
SEMICOLON            : 1 24 42 43 43 46 47 48 49
TO                   : 67
TRANSPUESTA          : 26
VAR                  : 14
VOID                 : 37
WHILE                : 68
error                : 

Nonterminals, with rules where they appear

addP                 : 1
addV                 : 16 18 19 24
arr                  : 17 18 54
asignacion           : 46 67
compexp              : 79 80 80
compexp1             : 82
else                 : 63
empty                : 13 22 25 36 45 57 60 65
escritura            : 49
escritura1           : 69
escritura2           : 70 70 71
especial             : 21
exp                  : 30 32 32 33 34 43 53 54 55 61 62 63 67 68 75 99
for                  : 50
for1                 : 66
function             : 35
function1            : 37
function2            : 38 39 40
guardaTipoVar        : 8 9 10
if                   : 51
lectura              : 48
llamada              : 47 98
main                 : 6
mat                  : 19 20 21 55
modules              : 3 4 35
mulexp               : 88 89 89 90 90
nexp                 : 77 78 78
param                : 7 42 43
param1               : 56 59
pexp                 : 91 92 92 93 93
programa             : 0
programa1            : 1
programa2            : 3 5
save_fun             : 42 43
statement            : 7 42 43 44 62 63 64 66 68
statement1           : 44
sumexp               : 81 82 83 83 84 84 85 85 86 86 87 87
tipo                 : 24 56
var                  : 12
var1                 : 16 18 19 24 76 94
var2                 : 14 24
vars                 : 3 4 7 42 43
while                : 52

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID addP SEMICOLON programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID addP SEMICOLON programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . addP SEMICOLON programa1
    (2) addP -> .

    SEMICOLON       reduce using rule 2 (addP -> .)

    addP                           shift and go to state 4

state 4

    (1) programa -> PROGRAM ID addP . SEMICOLON programa1

    SEMICOLON       shift and go to state 5


state 5

    (1) programa -> PROGRAM ID addP SEMICOLON . programa1
    (3) programa1 -> . vars modules programa2
    (4) programa1 -> . vars modules
    (5) programa1 -> . programa2
    (12) vars -> . var
    (13) vars -> . empty
    (6) programa2 -> . main
    (14) var -> . VAR var2
    (100) empty -> .
    (7) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 100 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID addP SEMICOLON programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID addP SEMICOLON programa1 .)


state 7

    (3) programa1 -> vars . modules programa2
    (4) programa1 -> vars . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (37) function -> . FUN VOID function1
    (38) function -> . FUN INT function2
    (39) function -> . FUN CHAR function2
    (40) function -> . FUN FLOAT function2
    (100) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)

    modules                        shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (12) vars -> var .

    FUN             reduce using rule 12 (vars -> var .)
    MAIN            reduce using rule 12 (vars -> var .)
    $end            reduce using rule 12 (vars -> var .)
    ID              reduce using rule 12 (vars -> var .)
    READ            reduce using rule 12 (vars -> var .)
    PRINT           reduce using rule 12 (vars -> var .)
    FOR             reduce using rule 12 (vars -> var .)
    IF              reduce using rule 12 (vars -> var .)
    WHILE           reduce using rule 12 (vars -> var .)
    RCURLY          reduce using rule 12 (vars -> var .)
    RETURN          reduce using rule 12 (vars -> var .)


state 10

    (13) vars -> empty .

    FUN             reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    $end            reduce using rule 13 (vars -> empty .)
    ID              reduce using rule 13 (vars -> empty .)
    READ            reduce using rule 13 (vars -> empty .)
    PRINT           reduce using rule 13 (vars -> empty .)
    FOR             reduce using rule 13 (vars -> empty .)
    IF              reduce using rule 13 (vars -> empty .)
    WHILE           reduce using rule 13 (vars -> empty .)
    RCURLY          reduce using rule 13 (vars -> empty .)
    RETURN          reduce using rule 13 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (14) var -> VAR . var2
    (24) var2 -> . var2 tipo var1 SEMICOLON addV
    (25) var2 -> . empty
    (100) empty -> .

    INT             reduce using rule 100 (empty -> .)
    FLOAT           reduce using rule 100 (empty -> .)
    CHAR            reduce using rule 100 (empty -> .)
    FUN             reduce using rule 100 (empty -> .)
    MAIN            reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)
    ID              reduce using rule 100 (empty -> .)
    READ            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RCURLY          reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)

    var2                           shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) main -> MAIN . LPAREN param RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 20


state 14

    (3) programa1 -> vars modules . programa2
    (4) programa1 -> vars modules .
    (6) programa2 -> . main
    (7) main -> . MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 21
    main                           shift and go to state 11

state 15

    (35) modules -> function . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (37) function -> . FUN VOID function1
    (38) function -> . FUN INT function2
    (39) function -> . FUN CHAR function2
    (40) function -> . FUN FLOAT function2
    (100) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 100 (empty -> .)
    $end            reduce using rule 100 (empty -> .)

    function                       shift and go to state 15
    modules                        shift and go to state 22
    empty                          shift and go to state 16

state 16

    (36) modules -> empty .

    MAIN            reduce using rule 36 (modules -> empty .)
    $end            reduce using rule 36 (modules -> empty .)


state 17

    (37) function -> FUN . VOID function1
    (38) function -> FUN . INT function2
    (39) function -> FUN . CHAR function2
    (40) function -> FUN . FLOAT function2

    VOID            shift and go to state 23
    INT             shift and go to state 24
    CHAR            shift and go to state 25
    FLOAT           shift and go to state 26


state 18

    (14) var -> VAR var2 .
    (24) var2 -> var2 . tipo var1 SEMICOLON addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 14 (var -> VAR var2 .)
    MAIN            reduce using rule 14 (var -> VAR var2 .)
    $end            reduce using rule 14 (var -> VAR var2 .)
    ID              reduce using rule 14 (var -> VAR var2 .)
    READ            reduce using rule 14 (var -> VAR var2 .)
    PRINT           reduce using rule 14 (var -> VAR var2 .)
    FOR             reduce using rule 14 (var -> VAR var2 .)
    IF              reduce using rule 14 (var -> VAR var2 .)
    WHILE           reduce using rule 14 (var -> VAR var2 .)
    RCURLY          reduce using rule 14 (var -> VAR var2 .)
    RETURN          reduce using rule 14 (var -> VAR var2 .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 27

state 19

    (25) var2 -> empty .

    INT             reduce using rule 25 (var2 -> empty .)
    FLOAT           reduce using rule 25 (var2 -> empty .)
    CHAR            reduce using rule 25 (var2 -> empty .)
    FUN             reduce using rule 25 (var2 -> empty .)
    MAIN            reduce using rule 25 (var2 -> empty .)
    $end            reduce using rule 25 (var2 -> empty .)
    ID              reduce using rule 25 (var2 -> empty .)
    READ            reduce using rule 25 (var2 -> empty .)
    PRINT           reduce using rule 25 (var2 -> empty .)
    FOR             reduce using rule 25 (var2 -> empty .)
    IF              reduce using rule 25 (var2 -> empty .)
    WHILE           reduce using rule 25 (var2 -> empty .)
    RCURLY          reduce using rule 25 (var2 -> empty .)
    RETURN          reduce using rule 25 (var2 -> empty .)


state 20

    (7) main -> MAIN LPAREN . param RPAREN LCURLY vars statement RCURLY END
    (56) param -> . tipo param1
    (57) param -> . empty
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar
    (100) empty -> .

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    RPAREN          reduce using rule 100 (empty -> .)

    param                          shift and go to state 31
    tipo                           shift and go to state 32
    empty                          shift and go to state 33

state 21

    (3) programa1 -> vars modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars modules programa2 .)


state 22

    (35) modules -> function modules .

    MAIN            reduce using rule 35 (modules -> function modules .)
    $end            reduce using rule 35 (modules -> function modules .)


state 23

    (37) function -> FUN VOID . function1
    (42) function1 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 35

    function1                      shift and go to state 34

state 24

    (38) function -> FUN INT . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 37

    function2                      shift and go to state 36

state 25

    (39) function -> FUN CHAR . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 37

    function2                      shift and go to state 38

state 26

    (40) function -> FUN FLOAT . function2
    (43) function2 -> . ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    ID              shift and go to state 37

    function2                      shift and go to state 39

state 27

    (24) var2 -> var2 tipo . var1 SEMICOLON addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (100) empty -> .

    ID              shift and go to state 41
    SEMICOLON       reduce using rule 100 (empty -> .)

    var1                           shift and go to state 40
    empty                          shift and go to state 42

state 28

    (8) tipo -> INT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 43

state 29

    (9) tipo -> FLOAT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 44

state 30

    (10) tipo -> CHAR . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 45

state 31

    (7) main -> MAIN LPAREN param . RPAREN LCURLY vars statement RCURLY END

    RPAREN          shift and go to state 46


state 32

    (56) param -> tipo . param1
    (58) param1 -> . ID
    (59) param1 -> . ID COMMA param1
    (60) param1 -> . empty
    (100) empty -> .

    ID              shift and go to state 48
    RPAREN          reduce using rule 100 (empty -> .)

    param1                         shift and go to state 47
    empty                          shift and go to state 49

state 33

    (57) param -> empty .

    RPAREN          reduce using rule 57 (param -> empty .)


state 34

    (37) function -> FUN VOID function1 .

    FUN             reduce using rule 37 (function -> FUN VOID function1 .)
    MAIN            reduce using rule 37 (function -> FUN VOID function1 .)
    $end            reduce using rule 37 (function -> FUN VOID function1 .)


state 35

    (42) function1 -> ID . save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
    (41) save_fun -> .

    LPAREN          reduce using rule 41 (save_fun -> .)

    save_fun                       shift and go to state 50

state 36

    (38) function -> FUN INT function2 .

    FUN             reduce using rule 38 (function -> FUN INT function2 .)
    MAIN            reduce using rule 38 (function -> FUN INT function2 .)
    $end            reduce using rule 38 (function -> FUN INT function2 .)


state 37

    (43) function2 -> ID . save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (41) save_fun -> .

    LPAREN          reduce using rule 41 (save_fun -> .)

    save_fun                       shift and go to state 51

state 38

    (39) function -> FUN CHAR function2 .

    FUN             reduce using rule 39 (function -> FUN CHAR function2 .)
    MAIN            reduce using rule 39 (function -> FUN CHAR function2 .)
    $end            reduce using rule 39 (function -> FUN CHAR function2 .)


state 39

    (40) function -> FUN FLOAT function2 .

    FUN             reduce using rule 40 (function -> FUN FLOAT function2 .)
    MAIN            reduce using rule 40 (function -> FUN FLOAT function2 .)
    $end            reduce using rule 40 (function -> FUN FLOAT function2 .)


state 40

    (24) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 52


state 41

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55

state 42

    (22) var1 -> empty .

    SEMICOLON       reduce using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    RBRACKET        reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)
    TO              reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    CTEI            reduce using rule 22 (var1 -> empty .)
    CTEF            reduce using rule 22 (var1 -> empty .)
    CTEC            reduce using rule 22 (var1 -> empty .)
    LPAREN          reduce using rule 22 (var1 -> empty .)
    ID              reduce using rule 22 (var1 -> empty .)


state 43

    (8) tipo -> INT guardaTipoVar .

    ID              reduce using rule 8 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 8 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 8 (tipo -> INT guardaTipoVar .)


state 44

    (9) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)


state 45

    (10) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> CHAR guardaTipoVar .)


state 46

    (7) main -> MAIN LPAREN param RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 57


state 47

    (56) param -> tipo param1 .

    RPAREN          reduce using rule 56 (param -> tipo param1 .)


state 48

    (58) param1 -> ID .
    (59) param1 -> ID . COMMA param1

    RPAREN          reduce using rule 58 (param1 -> ID .)
    COMMA           shift and go to state 58


state 49

    (60) param1 -> empty .

    RPAREN          reduce using rule 60 (param1 -> empty .)


state 50

    (42) function1 -> ID save_fun . LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 59


state 51

    (43) function2 -> ID save_fun . LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LPAREN          shift and go to state 60


state 52

    (24) var2 -> var2 tipo var1 SEMICOLON . addV
    (23) addV -> .

    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    FUN             reduce using rule 23 (addV -> .)
    MAIN            reduce using rule 23 (addV -> .)
    $end            reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)
    READ            reduce using rule 23 (addV -> .)
    PRINT           reduce using rule 23 (addV -> .)
    FOR             reduce using rule 23 (addV -> .)
    IF              reduce using rule 23 (addV -> .)
    WHILE           reduce using rule 23 (addV -> .)
    RCURLY          reduce using rule 23 (addV -> .)
    RETURN          reduce using rule 23 (addV -> .)

    addV                           shift and go to state 61

state 53

    (16) var1 -> ID COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (100) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 41
    SEMICOLON       reduce using rule 100 (empty -> .)
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    CTEI            reduce using rule 100 (empty -> .)
    CTEF            reduce using rule 100 (empty -> .)
    CTEC            reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)

  ! ID              [ reduce using rule 100 (empty -> .) ]

    var1                           shift and go to state 62
    empty                          shift and go to state 42

state 54

    (17) var1 -> ID arr .
    (18) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID arr .)
    MUL             reduce using rule 17 (var1 -> ID arr .)
    DIV             reduce using rule 17 (var1 -> ID arr .)
    PLUS            reduce using rule 17 (var1 -> ID arr .)
    MINUS           reduce using rule 17 (var1 -> ID arr .)
    GT              reduce using rule 17 (var1 -> ID arr .)
    LT              reduce using rule 17 (var1 -> ID arr .)
    GTE             reduce using rule 17 (var1 -> ID arr .)
    LTE             reduce using rule 17 (var1 -> ID arr .)
    NE              reduce using rule 17 (var1 -> ID arr .)
    AND             reduce using rule 17 (var1 -> ID arr .)
    OR              reduce using rule 17 (var1 -> ID arr .)
    RBRACKET        reduce using rule 17 (var1 -> ID arr .)
    RPAREN          reduce using rule 17 (var1 -> ID arr .)
    TO              reduce using rule 17 (var1 -> ID arr .)
    CTEI            reduce using rule 17 (var1 -> ID arr .)
    CTEF            reduce using rule 17 (var1 -> ID arr .)
    CTEC            reduce using rule 17 (var1 -> ID arr .)
    LPAREN          reduce using rule 17 (var1 -> ID arr .)
    ID              reduce using rule 17 (var1 -> ID arr .)
    COMMA           shift and go to state 63

  ! COMMA           [ reduce using rule 17 (var1 -> ID arr .) ]


state 55

    (19) var1 -> ID mat . COMMA var1 addV
    (20) var1 -> ID mat .
    (21) var1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 20 (var1 -> ID mat .)
    MUL             reduce using rule 20 (var1 -> ID mat .)
    DIV             reduce using rule 20 (var1 -> ID mat .)
    PLUS            reduce using rule 20 (var1 -> ID mat .)
    MINUS           reduce using rule 20 (var1 -> ID mat .)
    GT              reduce using rule 20 (var1 -> ID mat .)
    LT              reduce using rule 20 (var1 -> ID mat .)
    GTE             reduce using rule 20 (var1 -> ID mat .)
    LTE             reduce using rule 20 (var1 -> ID mat .)
    NE              reduce using rule 20 (var1 -> ID mat .)
    AND             reduce using rule 20 (var1 -> ID mat .)
    OR              reduce using rule 20 (var1 -> ID mat .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat .)
    RPAREN          reduce using rule 20 (var1 -> ID mat .)
    TO              reduce using rule 20 (var1 -> ID mat .)
    CTEI            reduce using rule 20 (var1 -> ID mat .)
    CTEF            reduce using rule 20 (var1 -> ID mat .)
    CTEC            reduce using rule 20 (var1 -> ID mat .)
    LPAREN          reduce using rule 20 (var1 -> ID mat .)
    ID              reduce using rule 20 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 66
    INVERSA         shift and go to state 67
    DETERMINANTE    shift and go to state 68

  ! COMMA           [ reduce using rule 20 (var1 -> ID mat .) ]

    especial                       shift and go to state 65

state 56

    (29) arr -> LBRACKET . CTEI RBRACKET
    (30) arr -> LBRACKET . exp RBRACKET
    (31) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 69
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)

    exp                            shift and go to state 70
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 57

    (7) main -> MAIN LPAREN param RPAREN LCURLY . vars statement RCURLY END
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (100) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 100 (empty -> .)
    READ            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RCURLY          reduce using rule 100 (empty -> .)

    vars                           shift and go to state 83
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 58

    (59) param1 -> ID COMMA . param1
    (58) param1 -> . ID
    (59) param1 -> . ID COMMA param1
    (60) param1 -> . empty
    (100) empty -> .

    ID              shift and go to state 48
    RPAREN          reduce using rule 100 (empty -> .)

    param1                         shift and go to state 84
    empty                          shift and go to state 49

state 59

    (42) function1 -> ID save_fun LPAREN . param RPAREN SEMICOLON LCURLY vars statement RCURLY
    (56) param -> . tipo param1
    (57) param -> . empty
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar
    (100) empty -> .

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    RPAREN          reduce using rule 100 (empty -> .)

    param                          shift and go to state 85
    tipo                           shift and go to state 32
    empty                          shift and go to state 33

state 60

    (43) function2 -> ID save_fun LPAREN . param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
    (56) param -> . tipo param1
    (57) param -> . empty
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar
    (100) empty -> .

    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30
    RPAREN          reduce using rule 100 (empty -> .)

    param                          shift and go to state 86
    tipo                           shift and go to state 32
    empty                          shift and go to state 33

state 61

    (24) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 62

    (16) var1 -> ID COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 87

state 63

    (18) var1 -> ID arr COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (100) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 41
    SEMICOLON       reduce using rule 100 (empty -> .)
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    CTEI            reduce using rule 100 (empty -> .)
    CTEF            reduce using rule 100 (empty -> .)
    CTEC            reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)

  ! ID              [ reduce using rule 100 (empty -> .) ]

    var1                           shift and go to state 88
    empty                          shift and go to state 42

state 64

    (19) var1 -> ID mat COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (100) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 41
    SEMICOLON       reduce using rule 100 (empty -> .)
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    CTEI            reduce using rule 100 (empty -> .)
    CTEF            reduce using rule 100 (empty -> .)
    CTEC            reduce using rule 100 (empty -> .)
    LPAREN          reduce using rule 100 (empty -> .)

  ! ID              [ reduce using rule 100 (empty -> .) ]

    var1                           shift and go to state 89
    empty                          shift and go to state 42

state 65

    (21) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat especial .)
    MUL             reduce using rule 21 (var1 -> ID mat especial .)
    DIV             reduce using rule 21 (var1 -> ID mat especial .)
    PLUS            reduce using rule 21 (var1 -> ID mat especial .)
    MINUS           reduce using rule 21 (var1 -> ID mat especial .)
    GT              reduce using rule 21 (var1 -> ID mat especial .)
    LT              reduce using rule 21 (var1 -> ID mat especial .)
    GTE             reduce using rule 21 (var1 -> ID mat especial .)
    LTE             reduce using rule 21 (var1 -> ID mat especial .)
    NE              reduce using rule 21 (var1 -> ID mat especial .)
    AND             reduce using rule 21 (var1 -> ID mat especial .)
    OR              reduce using rule 21 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    TO              reduce using rule 21 (var1 -> ID mat especial .)
    COMMA           reduce using rule 21 (var1 -> ID mat especial .)
    CTEI            reduce using rule 21 (var1 -> ID mat especial .)
    CTEF            reduce using rule 21 (var1 -> ID mat especial .)
    CTEC            reduce using rule 21 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    ID              reduce using rule 21 (var1 -> ID mat especial .)


state 66

    (26) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 26 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 26 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 26 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 26 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 26 (especial -> TRANSPUESTA .)
    GT              reduce using rule 26 (especial -> TRANSPUESTA .)
    LT              reduce using rule 26 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    NE              reduce using rule 26 (especial -> TRANSPUESTA .)
    AND             reduce using rule 26 (especial -> TRANSPUESTA .)
    OR              reduce using rule 26 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 26 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    TO              reduce using rule 26 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 26 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    ID              reduce using rule 26 (especial -> TRANSPUESTA .)


state 67

    (27) especial -> INVERSA .

    SEMICOLON       reduce using rule 27 (especial -> INVERSA .)
    MUL             reduce using rule 27 (especial -> INVERSA .)
    DIV             reduce using rule 27 (especial -> INVERSA .)
    PLUS            reduce using rule 27 (especial -> INVERSA .)
    MINUS           reduce using rule 27 (especial -> INVERSA .)
    GT              reduce using rule 27 (especial -> INVERSA .)
    LT              reduce using rule 27 (especial -> INVERSA .)
    GTE             reduce using rule 27 (especial -> INVERSA .)
    LTE             reduce using rule 27 (especial -> INVERSA .)
    NE              reduce using rule 27 (especial -> INVERSA .)
    AND             reduce using rule 27 (especial -> INVERSA .)
    OR              reduce using rule 27 (especial -> INVERSA .)
    RBRACKET        reduce using rule 27 (especial -> INVERSA .)
    RPAREN          reduce using rule 27 (especial -> INVERSA .)
    TO              reduce using rule 27 (especial -> INVERSA .)
    COMMA           reduce using rule 27 (especial -> INVERSA .)
    CTEI            reduce using rule 27 (especial -> INVERSA .)
    CTEF            reduce using rule 27 (especial -> INVERSA .)
    CTEC            reduce using rule 27 (especial -> INVERSA .)
    LPAREN          reduce using rule 27 (especial -> INVERSA .)
    ID              reduce using rule 27 (especial -> INVERSA .)


state 68

    (28) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 28 (especial -> DETERMINANTE .)
    MUL             reduce using rule 28 (especial -> DETERMINANTE .)
    DIV             reduce using rule 28 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 28 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 28 (especial -> DETERMINANTE .)
    GT              reduce using rule 28 (especial -> DETERMINANTE .)
    LT              reduce using rule 28 (especial -> DETERMINANTE .)
    GTE             reduce using rule 28 (especial -> DETERMINANTE .)
    LTE             reduce using rule 28 (especial -> DETERMINANTE .)
    NE              reduce using rule 28 (especial -> DETERMINANTE .)
    AND             reduce using rule 28 (especial -> DETERMINANTE .)
    OR              reduce using rule 28 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 28 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    TO              reduce using rule 28 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 28 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 28 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    ID              reduce using rule 28 (especial -> DETERMINANTE .)


state 69

    (29) arr -> LBRACKET CTEI . RBRACKET
    (31) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (95) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 90
    MUL             reduce using rule 95 (pexp -> CTEI .)
    DIV             reduce using rule 95 (pexp -> CTEI .)
    PLUS            reduce using rule 95 (pexp -> CTEI .)
    MINUS           reduce using rule 95 (pexp -> CTEI .)
    GT              reduce using rule 95 (pexp -> CTEI .)
    LT              reduce using rule 95 (pexp -> CTEI .)
    GTE             reduce using rule 95 (pexp -> CTEI .)
    LTE             reduce using rule 95 (pexp -> CTEI .)
    NE              reduce using rule 95 (pexp -> CTEI .)
    AND             reduce using rule 95 (pexp -> CTEI .)
    OR              reduce using rule 95 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 95 (pexp -> CTEI .) ]


state 70

    (30) arr -> LBRACKET exp . RBRACKET
    (32) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 91


state 71

    (77) exp -> nexp .
    (78) exp -> nexp . OR nexp

    RBRACKET        reduce using rule 77 (exp -> nexp .)
    RPAREN          reduce using rule 77 (exp -> nexp .)
    SEMICOLON       reduce using rule 77 (exp -> nexp .)
    TO              reduce using rule 77 (exp -> nexp .)
    COMMA           reduce using rule 77 (exp -> nexp .)
    OR              shift and go to state 92


state 72

    (79) nexp -> compexp .
    (80) nexp -> compexp . AND compexp

    OR              reduce using rule 79 (nexp -> compexp .)
    RBRACKET        reduce using rule 79 (nexp -> compexp .)
    RPAREN          reduce using rule 79 (nexp -> compexp .)
    SEMICOLON       reduce using rule 79 (nexp -> compexp .)
    TO              reduce using rule 79 (nexp -> compexp .)
    COMMA           reduce using rule 79 (nexp -> compexp .)
    AND             shift and go to state 93


state 73

    (81) compexp -> sumexp .
    (83) compexp1 -> sumexp . GT sumexp
    (84) compexp1 -> sumexp . LT sumexp
    (85) compexp1 -> sumexp . GTE sumexp
    (86) compexp1 -> sumexp . LTE sumexp
    (87) compexp1 -> sumexp . NE sumexp

    AND             reduce using rule 81 (compexp -> sumexp .)
    OR              reduce using rule 81 (compexp -> sumexp .)
    RBRACKET        reduce using rule 81 (compexp -> sumexp .)
    RPAREN          reduce using rule 81 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 81 (compexp -> sumexp .)
    TO              reduce using rule 81 (compexp -> sumexp .)
    COMMA           reduce using rule 81 (compexp -> sumexp .)
    GT              shift and go to state 94
    LT              shift and go to state 95
    GTE             shift and go to state 96
    LTE             shift and go to state 97
    NE              shift and go to state 98


state 74

    (82) compexp -> compexp1 . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

    sumexp                         shift and go to state 99
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 75

    (88) sumexp -> mulexp .
    (89) sumexp -> mulexp . PLUS mulexp
    (90) sumexp -> mulexp . MINUS mulexp

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 88 (sumexp -> mulexp .)
    LT              reduce using rule 88 (sumexp -> mulexp .)
    GTE             reduce using rule 88 (sumexp -> mulexp .)
    LTE             reduce using rule 88 (sumexp -> mulexp .)
    NE              reduce using rule 88 (sumexp -> mulexp .)
    AND             reduce using rule 88 (sumexp -> mulexp .)
    OR              reduce using rule 88 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 88 (sumexp -> mulexp .)
    RPAREN          reduce using rule 88 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 88 (sumexp -> mulexp .)
    TO              reduce using rule 88 (sumexp -> mulexp .)
    COMMA           reduce using rule 88 (sumexp -> mulexp .)
    CTEI            reduce using rule 88 (sumexp -> mulexp .)
    CTEF            reduce using rule 88 (sumexp -> mulexp .)
    CTEC            reduce using rule 88 (sumexp -> mulexp .)
    LPAREN          reduce using rule 88 (sumexp -> mulexp .)
    ID              reduce using rule 88 (sumexp -> mulexp .)
    MUL             reduce using rule 88 (sumexp -> mulexp .)
    DIV             reduce using rule 88 (sumexp -> mulexp .)
    PLUS            shift and go to state 101
    MINUS           shift and go to state 102

  ! PLUS            [ reduce using rule 88 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 88 (sumexp -> mulexp .) ]


state 76

    (91) mulexp -> pexp .
    (92) mulexp -> pexp . MUL pexp
    (93) mulexp -> pexp . DIV pexp

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 91 (mulexp -> pexp .)
    MINUS           reduce using rule 91 (mulexp -> pexp .)
    GT              reduce using rule 91 (mulexp -> pexp .)
    LT              reduce using rule 91 (mulexp -> pexp .)
    GTE             reduce using rule 91 (mulexp -> pexp .)
    LTE             reduce using rule 91 (mulexp -> pexp .)
    NE              reduce using rule 91 (mulexp -> pexp .)
    AND             reduce using rule 91 (mulexp -> pexp .)
    OR              reduce using rule 91 (mulexp -> pexp .)
    RBRACKET        reduce using rule 91 (mulexp -> pexp .)
    RPAREN          reduce using rule 91 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 91 (mulexp -> pexp .)
    TO              reduce using rule 91 (mulexp -> pexp .)
    COMMA           reduce using rule 91 (mulexp -> pexp .)
    CTEI            reduce using rule 91 (mulexp -> pexp .)
    CTEF            reduce using rule 91 (mulexp -> pexp .)
    CTEC            reduce using rule 91 (mulexp -> pexp .)
    LPAREN          reduce using rule 91 (mulexp -> pexp .)
    ID              reduce using rule 91 (mulexp -> pexp .)
    MUL             shift and go to state 103
    DIV             shift and go to state 104

  ! MUL             [ reduce using rule 91 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 91 (mulexp -> pexp .) ]


state 77

    (94) pexp -> var1 .

    MUL             reduce using rule 94 (pexp -> var1 .)
    DIV             reduce using rule 94 (pexp -> var1 .)
    PLUS            reduce using rule 94 (pexp -> var1 .)
    MINUS           reduce using rule 94 (pexp -> var1 .)
    GT              reduce using rule 94 (pexp -> var1 .)
    LT              reduce using rule 94 (pexp -> var1 .)
    GTE             reduce using rule 94 (pexp -> var1 .)
    LTE             reduce using rule 94 (pexp -> var1 .)
    NE              reduce using rule 94 (pexp -> var1 .)
    AND             reduce using rule 94 (pexp -> var1 .)
    OR              reduce using rule 94 (pexp -> var1 .)
    RBRACKET        reduce using rule 94 (pexp -> var1 .)
    RPAREN          reduce using rule 94 (pexp -> var1 .)
    SEMICOLON       reduce using rule 94 (pexp -> var1 .)
    TO              reduce using rule 94 (pexp -> var1 .)
    COMMA           reduce using rule 94 (pexp -> var1 .)
    CTEI            reduce using rule 94 (pexp -> var1 .)
    CTEF            reduce using rule 94 (pexp -> var1 .)
    CTEC            reduce using rule 94 (pexp -> var1 .)
    LPAREN          reduce using rule 94 (pexp -> var1 .)
    ID              reduce using rule 94 (pexp -> var1 .)


state 78

    (96) pexp -> CTEF .

    MUL             reduce using rule 96 (pexp -> CTEF .)
    DIV             reduce using rule 96 (pexp -> CTEF .)
    PLUS            reduce using rule 96 (pexp -> CTEF .)
    MINUS           reduce using rule 96 (pexp -> CTEF .)
    GT              reduce using rule 96 (pexp -> CTEF .)
    LT              reduce using rule 96 (pexp -> CTEF .)
    GTE             reduce using rule 96 (pexp -> CTEF .)
    LTE             reduce using rule 96 (pexp -> CTEF .)
    NE              reduce using rule 96 (pexp -> CTEF .)
    AND             reduce using rule 96 (pexp -> CTEF .)
    OR              reduce using rule 96 (pexp -> CTEF .)
    RBRACKET        reduce using rule 96 (pexp -> CTEF .)
    RPAREN          reduce using rule 96 (pexp -> CTEF .)
    SEMICOLON       reduce using rule 96 (pexp -> CTEF .)
    TO              reduce using rule 96 (pexp -> CTEF .)
    COMMA           reduce using rule 96 (pexp -> CTEF .)
    CTEI            reduce using rule 96 (pexp -> CTEF .)
    CTEF            reduce using rule 96 (pexp -> CTEF .)
    CTEC            reduce using rule 96 (pexp -> CTEF .)
    LPAREN          reduce using rule 96 (pexp -> CTEF .)
    ID              reduce using rule 96 (pexp -> CTEF .)


state 79

    (97) pexp -> CTEC .

    MUL             reduce using rule 97 (pexp -> CTEC .)
    DIV             reduce using rule 97 (pexp -> CTEC .)
    PLUS            reduce using rule 97 (pexp -> CTEC .)
    MINUS           reduce using rule 97 (pexp -> CTEC .)
    GT              reduce using rule 97 (pexp -> CTEC .)
    LT              reduce using rule 97 (pexp -> CTEC .)
    GTE             reduce using rule 97 (pexp -> CTEC .)
    LTE             reduce using rule 97 (pexp -> CTEC .)
    NE              reduce using rule 97 (pexp -> CTEC .)
    AND             reduce using rule 97 (pexp -> CTEC .)
    OR              reduce using rule 97 (pexp -> CTEC .)
    RBRACKET        reduce using rule 97 (pexp -> CTEC .)
    RPAREN          reduce using rule 97 (pexp -> CTEC .)
    SEMICOLON       reduce using rule 97 (pexp -> CTEC .)
    TO              reduce using rule 97 (pexp -> CTEC .)
    COMMA           reduce using rule 97 (pexp -> CTEC .)
    CTEI            reduce using rule 97 (pexp -> CTEC .)
    CTEF            reduce using rule 97 (pexp -> CTEC .)
    CTEC            reduce using rule 97 (pexp -> CTEC .)
    LPAREN          reduce using rule 97 (pexp -> CTEC .)
    ID              reduce using rule 97 (pexp -> CTEC .)


state 80

    (98) pexp -> llamada .

    MUL             reduce using rule 98 (pexp -> llamada .)
    DIV             reduce using rule 98 (pexp -> llamada .)
    PLUS            reduce using rule 98 (pexp -> llamada .)
    MINUS           reduce using rule 98 (pexp -> llamada .)
    GT              reduce using rule 98 (pexp -> llamada .)
    LT              reduce using rule 98 (pexp -> llamada .)
    GTE             reduce using rule 98 (pexp -> llamada .)
    LTE             reduce using rule 98 (pexp -> llamada .)
    NE              reduce using rule 98 (pexp -> llamada .)
    AND             reduce using rule 98 (pexp -> llamada .)
    OR              reduce using rule 98 (pexp -> llamada .)
    RBRACKET        reduce using rule 98 (pexp -> llamada .)
    RPAREN          reduce using rule 98 (pexp -> llamada .)
    SEMICOLON       reduce using rule 98 (pexp -> llamada .)
    TO              reduce using rule 98 (pexp -> llamada .)
    COMMA           reduce using rule 98 (pexp -> llamada .)
    CTEI            reduce using rule 98 (pexp -> llamada .)
    CTEF            reduce using rule 98 (pexp -> llamada .)
    CTEC            reduce using rule 98 (pexp -> llamada .)
    LPAREN          reduce using rule 98 (pexp -> llamada .)
    ID              reduce using rule 98 (pexp -> llamada .)


state 81

    (99) pexp -> LPAREN . exp RPAREN
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    exp                            shift and go to state 105
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 82

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (61) llamada -> ID . LPAREN exp RPAREN
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LPAREN          shift and go to state 106
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55

state 83

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars . statement RCURLY END
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 107
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 84

    (59) param1 -> ID COMMA param1 .

    RPAREN          reduce using rule 59 (param1 -> ID COMMA param1 .)


state 85

    (42) function1 -> ID save_fun LPAREN param . RPAREN SEMICOLON LCURLY vars statement RCURLY

    RPAREN          shift and go to state 123


state 86

    (43) function2 -> ID save_fun LPAREN param . RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    RPAREN          shift and go to state 124


state 87

    (16) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 16 (var1 -> ID COMMA var1 addV .)


state 88

    (18) var1 -> ID arr COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 125

state 89

    (19) var1 -> ID mat COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 126

state 90

    (29) arr -> LBRACKET CTEI RBRACKET .
    (31) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 127


state 91

    (30) arr -> LBRACKET exp RBRACKET .
    (32) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 128


state 92

    (78) exp -> nexp OR . nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

    nexp                           shift and go to state 129
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 93

    (80) nexp -> compexp AND . compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

    compexp                        shift and go to state 130
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 94

    (83) compexp1 -> sumexp GT . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    sumexp                         shift and go to state 131
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 95

    (84) compexp1 -> sumexp LT . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    sumexp                         shift and go to state 132
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 96

    (85) compexp1 -> sumexp GTE . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    sumexp                         shift and go to state 133
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 97

    (86) compexp1 -> sumexp LTE . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    sumexp                         shift and go to state 134
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 98

    (87) compexp1 -> sumexp NE . sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    sumexp                         shift and go to state 135
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 99

    (82) compexp -> compexp1 sumexp .

    AND             reduce using rule 82 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 82 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 82 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 82 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 82 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 82 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 82 (compexp -> compexp1 sumexp .)


state 100

    (95) pexp -> CTEI .

    MUL             reduce using rule 95 (pexp -> CTEI .)
    DIV             reduce using rule 95 (pexp -> CTEI .)
    PLUS            reduce using rule 95 (pexp -> CTEI .)
    MINUS           reduce using rule 95 (pexp -> CTEI .)
    AND             reduce using rule 95 (pexp -> CTEI .)
    OR              reduce using rule 95 (pexp -> CTEI .)
    RBRACKET        reduce using rule 95 (pexp -> CTEI .)
    RPAREN          reduce using rule 95 (pexp -> CTEI .)
    SEMICOLON       reduce using rule 95 (pexp -> CTEI .)
    TO              reduce using rule 95 (pexp -> CTEI .)
    COMMA           reduce using rule 95 (pexp -> CTEI .)
    GT              reduce using rule 95 (pexp -> CTEI .)
    LT              reduce using rule 95 (pexp -> CTEI .)
    GTE             reduce using rule 95 (pexp -> CTEI .)
    LTE             reduce using rule 95 (pexp -> CTEI .)
    NE              reduce using rule 95 (pexp -> CTEI .)
    CTEI            reduce using rule 95 (pexp -> CTEI .)
    CTEF            reduce using rule 95 (pexp -> CTEI .)
    CTEC            reduce using rule 95 (pexp -> CTEI .)
    LPAREN          reduce using rule 95 (pexp -> CTEI .)
    ID              reduce using rule 95 (pexp -> CTEI .)


state 101

    (89) sumexp -> mulexp PLUS . mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    mulexp                         shift and go to state 136
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 102

    (90) sumexp -> mulexp MINUS . mulexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    mulexp                         shift and go to state 137
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 103

    (92) mulexp -> pexp MUL . pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    pexp                           shift and go to state 138
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 104

    (93) mulexp -> pexp DIV . pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)

  ! CTEI            [ reduce using rule 100 (empty -> .) ]
  ! CTEF            [ reduce using rule 100 (empty -> .) ]
  ! CTEC            [ reduce using rule 100 (empty -> .) ]
  ! LPAREN          [ reduce using rule 100 (empty -> .) ]
  ! ID              [ reduce using rule 100 (empty -> .) ]

    pexp                           shift and go to state 139
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 105

    (99) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 140


state 106

    (61) llamada -> ID LPAREN . exp RPAREN
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    exp                            shift and go to state 141
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 107

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 142


state 108

    (44) statement -> statement1 . statement
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement1                     shift and go to state 108
    statement                      shift and go to state 143
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 109

    (45) statement -> empty .

    RCURLY          reduce using rule 45 (statement -> empty .)
    RETURN          reduce using rule 45 (statement -> empty .)


state 110

    (46) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 144


state 111

    (47) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 145


state 112

    (48) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 146


state 113

    (49) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 147


state 114

    (50) statement1 -> for .

    ID              reduce using rule 50 (statement1 -> for .)
    READ            reduce using rule 50 (statement1 -> for .)
    PRINT           reduce using rule 50 (statement1 -> for .)
    FOR             reduce using rule 50 (statement1 -> for .)
    IF              reduce using rule 50 (statement1 -> for .)
    WHILE           reduce using rule 50 (statement1 -> for .)
    RCURLY          reduce using rule 50 (statement1 -> for .)
    RETURN          reduce using rule 50 (statement1 -> for .)


state 115

    (51) statement1 -> if .

    ID              reduce using rule 51 (statement1 -> if .)
    READ            reduce using rule 51 (statement1 -> if .)
    PRINT           reduce using rule 51 (statement1 -> if .)
    FOR             reduce using rule 51 (statement1 -> if .)
    IF              reduce using rule 51 (statement1 -> if .)
    WHILE           reduce using rule 51 (statement1 -> if .)
    RCURLY          reduce using rule 51 (statement1 -> if .)
    RETURN          reduce using rule 51 (statement1 -> if .)


state 116

    (52) statement1 -> while .

    ID              reduce using rule 52 (statement1 -> while .)
    READ            reduce using rule 52 (statement1 -> while .)
    PRINT           reduce using rule 52 (statement1 -> while .)
    FOR             reduce using rule 52 (statement1 -> while .)
    IF              reduce using rule 52 (statement1 -> while .)
    WHILE           reduce using rule 52 (statement1 -> while .)
    RCURLY          reduce using rule 52 (statement1 -> while .)
    RETURN          reduce using rule 52 (statement1 -> while .)


state 117

    (53) asignacion -> ID . EQUALS exp
    (54) asignacion -> ID . arr EQUALS exp
    (55) asignacion -> ID . mat EQUALS exp
    (61) llamada -> ID . LPAREN exp RPAREN
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 148
    LPAREN          shift and go to state 106
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 149
    mat                            shift and go to state 150

state 118

    (76) lectura -> READ . LPAREN var1 RPAREN

    LPAREN          shift and go to state 151


state 119

    (69) escritura -> PRINT . LPAREN escritura1 RPAREN

    LPAREN          shift and go to state 152


state 120

    (66) for -> FOR . LPAREN for1 RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 153


state 121

    (62) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> IF . LPAREN exp RPAREN LCURLY statement RCURLY else

    LPAREN          shift and go to state 154


state 122

    (68) while -> WHILE . LPAREN exp RPAREN LCURLY statement RCURLY

    LPAREN          shift and go to state 155


state 123

    (42) function1 -> ID save_fun LPAREN param RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 156


state 124

    (43) function2 -> ID save_fun LPAREN param RPAREN . SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY

    SEMICOLON       shift and go to state 157


state 125

    (18) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)


state 126

    (19) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)


state 127

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 158
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)

    exp                            shift and go to state 159
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 128

    (32) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 161
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RBRACKET        reduce using rule 100 (empty -> .)

    exp                            shift and go to state 160
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 129

    (78) exp -> nexp OR nexp .

    RBRACKET        reduce using rule 78 (exp -> nexp OR nexp .)
    RPAREN          reduce using rule 78 (exp -> nexp OR nexp .)
    SEMICOLON       reduce using rule 78 (exp -> nexp OR nexp .)
    TO              reduce using rule 78 (exp -> nexp OR nexp .)
    COMMA           reduce using rule 78 (exp -> nexp OR nexp .)


state 130

    (80) nexp -> compexp AND compexp .

    OR              reduce using rule 80 (nexp -> compexp AND compexp .)
    RBRACKET        reduce using rule 80 (nexp -> compexp AND compexp .)
    RPAREN          reduce using rule 80 (nexp -> compexp AND compexp .)
    SEMICOLON       reduce using rule 80 (nexp -> compexp AND compexp .)
    TO              reduce using rule 80 (nexp -> compexp AND compexp .)
    COMMA           reduce using rule 80 (nexp -> compexp AND compexp .)


state 131

    (83) compexp1 -> sumexp GT sumexp .

    CTEI            reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    CTEF            reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    CTEC            reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    LPAREN          reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    ID              reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    PLUS            reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    MINUS           reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    MUL             reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    DIV             reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    AND             reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    OR              reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    RBRACKET        reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    RPAREN          reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    SEMICOLON       reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    TO              reduce using rule 83 (compexp1 -> sumexp GT sumexp .)
    COMMA           reduce using rule 83 (compexp1 -> sumexp GT sumexp .)


state 132

    (84) compexp1 -> sumexp LT sumexp .

    CTEI            reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    CTEF            reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    CTEC            reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    LPAREN          reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    ID              reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    PLUS            reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    MINUS           reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    MUL             reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    DIV             reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    AND             reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    OR              reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    RBRACKET        reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    RPAREN          reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    SEMICOLON       reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    TO              reduce using rule 84 (compexp1 -> sumexp LT sumexp .)
    COMMA           reduce using rule 84 (compexp1 -> sumexp LT sumexp .)


state 133

    (85) compexp1 -> sumexp GTE sumexp .

    CTEI            reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    CTEF            reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    CTEC            reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    LPAREN          reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    ID              reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    PLUS            reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    MINUS           reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    MUL             reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    DIV             reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    AND             reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    OR              reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    RBRACKET        reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    RPAREN          reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    SEMICOLON       reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    TO              reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)
    COMMA           reduce using rule 85 (compexp1 -> sumexp GTE sumexp .)


state 134

    (86) compexp1 -> sumexp LTE sumexp .

    CTEI            reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    CTEF            reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    CTEC            reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    LPAREN          reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    ID              reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    PLUS            reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    MINUS           reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    MUL             reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    DIV             reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    AND             reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    OR              reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    RBRACKET        reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    RPAREN          reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    SEMICOLON       reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    TO              reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)
    COMMA           reduce using rule 86 (compexp1 -> sumexp LTE sumexp .)


state 135

    (87) compexp1 -> sumexp NE sumexp .

    CTEI            reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    CTEF            reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    CTEC            reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    LPAREN          reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    ID              reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    PLUS            reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    MINUS           reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    MUL             reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    DIV             reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    AND             reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    OR              reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    RBRACKET        reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    RPAREN          reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    SEMICOLON       reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    TO              reduce using rule 87 (compexp1 -> sumexp NE sumexp .)
    COMMA           reduce using rule 87 (compexp1 -> sumexp NE sumexp .)


state 136

    (89) sumexp -> mulexp PLUS mulexp .

    GT              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    LT              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    GTE             reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    LTE             reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    NE              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    AND             reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    OR              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    RBRACKET        reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    RPAREN          reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    SEMICOLON       reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    TO              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    COMMA           reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    CTEI            reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    CTEF            reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    CTEC            reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    LPAREN          reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    ID              reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    PLUS            reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    MINUS           reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    MUL             reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)
    DIV             reduce using rule 89 (sumexp -> mulexp PLUS mulexp .)


state 137

    (90) sumexp -> mulexp MINUS mulexp .

    GT              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    LT              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    GTE             reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    LTE             reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    NE              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    AND             reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    OR              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    RBRACKET        reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    RPAREN          reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    SEMICOLON       reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    TO              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    COMMA           reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    CTEI            reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    CTEF            reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    CTEC            reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    LPAREN          reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    ID              reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    PLUS            reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    MINUS           reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    MUL             reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)
    DIV             reduce using rule 90 (sumexp -> mulexp MINUS mulexp .)


state 138

    (92) mulexp -> pexp MUL pexp .

    PLUS            reduce using rule 92 (mulexp -> pexp MUL pexp .)
    MINUS           reduce using rule 92 (mulexp -> pexp MUL pexp .)
    GT              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    LT              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    GTE             reduce using rule 92 (mulexp -> pexp MUL pexp .)
    LTE             reduce using rule 92 (mulexp -> pexp MUL pexp .)
    NE              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    AND             reduce using rule 92 (mulexp -> pexp MUL pexp .)
    OR              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    RBRACKET        reduce using rule 92 (mulexp -> pexp MUL pexp .)
    RPAREN          reduce using rule 92 (mulexp -> pexp MUL pexp .)
    SEMICOLON       reduce using rule 92 (mulexp -> pexp MUL pexp .)
    TO              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    COMMA           reduce using rule 92 (mulexp -> pexp MUL pexp .)
    CTEI            reduce using rule 92 (mulexp -> pexp MUL pexp .)
    CTEF            reduce using rule 92 (mulexp -> pexp MUL pexp .)
    CTEC            reduce using rule 92 (mulexp -> pexp MUL pexp .)
    LPAREN          reduce using rule 92 (mulexp -> pexp MUL pexp .)
    ID              reduce using rule 92 (mulexp -> pexp MUL pexp .)
    MUL             reduce using rule 92 (mulexp -> pexp MUL pexp .)
    DIV             reduce using rule 92 (mulexp -> pexp MUL pexp .)


state 139

    (93) mulexp -> pexp DIV pexp .

    PLUS            reduce using rule 93 (mulexp -> pexp DIV pexp .)
    MINUS           reduce using rule 93 (mulexp -> pexp DIV pexp .)
    GT              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    LT              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    GTE             reduce using rule 93 (mulexp -> pexp DIV pexp .)
    LTE             reduce using rule 93 (mulexp -> pexp DIV pexp .)
    NE              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    AND             reduce using rule 93 (mulexp -> pexp DIV pexp .)
    OR              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    RBRACKET        reduce using rule 93 (mulexp -> pexp DIV pexp .)
    RPAREN          reduce using rule 93 (mulexp -> pexp DIV pexp .)
    SEMICOLON       reduce using rule 93 (mulexp -> pexp DIV pexp .)
    TO              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    COMMA           reduce using rule 93 (mulexp -> pexp DIV pexp .)
    CTEI            reduce using rule 93 (mulexp -> pexp DIV pexp .)
    CTEF            reduce using rule 93 (mulexp -> pexp DIV pexp .)
    CTEC            reduce using rule 93 (mulexp -> pexp DIV pexp .)
    LPAREN          reduce using rule 93 (mulexp -> pexp DIV pexp .)
    ID              reduce using rule 93 (mulexp -> pexp DIV pexp .)
    MUL             reduce using rule 93 (mulexp -> pexp DIV pexp .)
    DIV             reduce using rule 93 (mulexp -> pexp DIV pexp .)


state 140

    (99) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 99 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 99 (pexp -> LPAREN exp RPAREN .)


state 141

    (61) llamada -> ID LPAREN exp . RPAREN

    RPAREN          shift and go to state 162


state 142

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 163


state 143

    (44) statement -> statement1 statement .

    RCURLY          reduce using rule 44 (statement -> statement1 statement .)
    RETURN          reduce using rule 44 (statement -> statement1 statement .)


state 144

    (46) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 46 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 46 (statement1 -> asignacion SEMICOLON .)


state 145

    (47) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 47 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 47 (statement1 -> llamada SEMICOLON .)


state 146

    (48) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 48 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 48 (statement1 -> lectura SEMICOLON .)


state 147

    (49) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 49 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 49 (statement1 -> escritura SEMICOLON .)


state 148

    (53) asignacion -> ID EQUALS . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)

    exp                            shift and go to state 164
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 149

    (54) asignacion -> ID arr . EQUALS exp

    EQUALS          shift and go to state 165


state 150

    (55) asignacion -> ID mat . EQUALS exp

    EQUALS          shift and go to state 166


state 151

    (76) lectura -> READ LPAREN . var1 RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (100) empty -> .

    ID              shift and go to state 41
    RPAREN          reduce using rule 100 (empty -> .)

    var1                           shift and go to state 167
    empty                          shift and go to state 42

state 152

    (69) escritura -> PRINT LPAREN . escritura1 RPAREN
    (70) escritura1 -> . escritura2 COMMA escritura2
    (71) escritura1 -> . escritura2
    (72) escritura2 -> . CTESTRING
    (73) escritura2 -> . CTEI
    (74) escritura2 -> . CTEF
    (75) escritura2 -> . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTESTRING       shift and go to state 170
    CTEI            shift and go to state 171
    CTEF            shift and go to state 172
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    COMMA           reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    escritura1                     shift and go to state 168
    escritura2                     shift and go to state 169
    exp                            shift and go to state 173
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 153

    (66) for -> FOR LPAREN . for1 RPAREN LCURLY statement RCURLY
    (67) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 175

    for1                           shift and go to state 174

state 154

    (62) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY
    (63) if -> IF LPAREN . exp RPAREN LCURLY statement RCURLY else
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    exp                            shift and go to state 176
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 155

    (68) while -> WHILE LPAREN . exp RPAREN LCURLY statement RCURLY
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    exp                            shift and go to state 177
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 156

    (42) function1 -> ID save_fun LPAREN param RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 178


state 157

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON . LCURLY vars statement RETURN exp SEMICOLON RCURLY

    LCURLY          shift and go to state 179


state 158

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (95) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 180
    MUL             reduce using rule 95 (pexp -> CTEI .)
    DIV             reduce using rule 95 (pexp -> CTEI .)
    PLUS            reduce using rule 95 (pexp -> CTEI .)
    MINUS           reduce using rule 95 (pexp -> CTEI .)
    GT              reduce using rule 95 (pexp -> CTEI .)
    LT              reduce using rule 95 (pexp -> CTEI .)
    GTE             reduce using rule 95 (pexp -> CTEI .)
    LTE             reduce using rule 95 (pexp -> CTEI .)
    NE              reduce using rule 95 (pexp -> CTEI .)
    AND             reduce using rule 95 (pexp -> CTEI .)
    OR              reduce using rule 95 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 95 (pexp -> CTEI .) ]


state 159

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 181


state 160

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 182


state 161

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (95) pexp -> CTEI .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 183
    MUL             reduce using rule 95 (pexp -> CTEI .)
    DIV             reduce using rule 95 (pexp -> CTEI .)
    PLUS            reduce using rule 95 (pexp -> CTEI .)
    MINUS           reduce using rule 95 (pexp -> CTEI .)
    GT              reduce using rule 95 (pexp -> CTEI .)
    LT              reduce using rule 95 (pexp -> CTEI .)
    GTE             reduce using rule 95 (pexp -> CTEI .)
    LTE             reduce using rule 95 (pexp -> CTEI .)
    NE              reduce using rule 95 (pexp -> CTEI .)
    AND             reduce using rule 95 (pexp -> CTEI .)
    OR              reduce using rule 95 (pexp -> CTEI .)

  ! RBRACKET        [ reduce using rule 95 (pexp -> CTEI .) ]


state 162

    (61) llamada -> ID LPAREN exp RPAREN .

    MUL             reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    DIV             reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    PLUS            reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    MINUS           reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    GT              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    LT              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    GTE             reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    LTE             reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    NE              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    AND             reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    OR              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    RPAREN          reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    TO              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    COMMA           reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    CTEI            reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    CTEF            reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    CTEC            reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    LPAREN          reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)
    ID              reduce using rule 61 (llamada -> ID LPAREN exp RPAREN .)


state 163

    (7) main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN LPAREN param RPAREN LCURLY vars statement RCURLY END .)


state 164

    (53) asignacion -> ID EQUALS exp .

    SEMICOLON       reduce using rule 53 (asignacion -> ID EQUALS exp .)
    TO              reduce using rule 53 (asignacion -> ID EQUALS exp .)


state 165

    (54) asignacion -> ID arr EQUALS . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)

    exp                            shift and go to state 184
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 166

    (55) asignacion -> ID mat EQUALS . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)
    TO              reduce using rule 100 (empty -> .)

    exp                            shift and go to state 185
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 167

    (76) lectura -> READ LPAREN var1 . RPAREN

    RPAREN          shift and go to state 186


state 168

    (69) escritura -> PRINT LPAREN escritura1 . RPAREN

    RPAREN          shift and go to state 187


state 169

    (70) escritura1 -> escritura2 . COMMA escritura2
    (71) escritura1 -> escritura2 .

    COMMA           shift and go to state 188
    RPAREN          reduce using rule 71 (escritura1 -> escritura2 .)


state 170

    (72) escritura2 -> CTESTRING .

    COMMA           reduce using rule 72 (escritura2 -> CTESTRING .)
    RPAREN          reduce using rule 72 (escritura2 -> CTESTRING .)


state 171

    (73) escritura2 -> CTEI .
    (95) pexp -> CTEI .

  ! reduce/reduce conflict for COMMA resolved using rule 73 (escritura2 -> CTEI .)
  ! reduce/reduce conflict for RPAREN resolved using rule 73 (escritura2 -> CTEI .)
    COMMA           reduce using rule 73 (escritura2 -> CTEI .)
    RPAREN          reduce using rule 73 (escritura2 -> CTEI .)
    MUL             reduce using rule 95 (pexp -> CTEI .)
    DIV             reduce using rule 95 (pexp -> CTEI .)
    PLUS            reduce using rule 95 (pexp -> CTEI .)
    MINUS           reduce using rule 95 (pexp -> CTEI .)
    GT              reduce using rule 95 (pexp -> CTEI .)
    LT              reduce using rule 95 (pexp -> CTEI .)
    GTE             reduce using rule 95 (pexp -> CTEI .)
    LTE             reduce using rule 95 (pexp -> CTEI .)
    NE              reduce using rule 95 (pexp -> CTEI .)
    AND             reduce using rule 95 (pexp -> CTEI .)
    OR              reduce using rule 95 (pexp -> CTEI .)

  ! COMMA           [ reduce using rule 95 (pexp -> CTEI .) ]
  ! RPAREN          [ reduce using rule 95 (pexp -> CTEI .) ]


state 172

    (74) escritura2 -> CTEF .
    (96) pexp -> CTEF .

  ! reduce/reduce conflict for COMMA resolved using rule 74 (escritura2 -> CTEF .)
  ! reduce/reduce conflict for RPAREN resolved using rule 74 (escritura2 -> CTEF .)
    COMMA           reduce using rule 74 (escritura2 -> CTEF .)
    RPAREN          reduce using rule 74 (escritura2 -> CTEF .)
    MUL             reduce using rule 96 (pexp -> CTEF .)
    DIV             reduce using rule 96 (pexp -> CTEF .)
    PLUS            reduce using rule 96 (pexp -> CTEF .)
    MINUS           reduce using rule 96 (pexp -> CTEF .)
    GT              reduce using rule 96 (pexp -> CTEF .)
    LT              reduce using rule 96 (pexp -> CTEF .)
    GTE             reduce using rule 96 (pexp -> CTEF .)
    LTE             reduce using rule 96 (pexp -> CTEF .)
    NE              reduce using rule 96 (pexp -> CTEF .)
    AND             reduce using rule 96 (pexp -> CTEF .)
    OR              reduce using rule 96 (pexp -> CTEF .)

  ! COMMA           [ reduce using rule 96 (pexp -> CTEF .) ]
  ! RPAREN          [ reduce using rule 96 (pexp -> CTEF .) ]


state 173

    (75) escritura2 -> exp .

    COMMA           reduce using rule 75 (escritura2 -> exp .)
    RPAREN          reduce using rule 75 (escritura2 -> exp .)


state 174

    (66) for -> FOR LPAREN for1 . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 189


state 175

    (67) for1 -> FROM . asignacion TO exp
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp

    ID              shift and go to state 191

    asignacion                     shift and go to state 190

state 176

    (62) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY
    (63) if -> IF LPAREN exp . RPAREN LCURLY statement RCURLY else

    RPAREN          shift and go to state 192


state 177

    (68) while -> WHILE LPAREN exp . RPAREN LCURLY statement RCURLY

    RPAREN          shift and go to state 193


state 178

    (42) function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (100) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 100 (empty -> .)
    READ            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RCURLY          reduce using rule 100 (empty -> .)

    vars                           shift and go to state 194
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 179

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY . vars statement RETURN exp SEMICOLON RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (100) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 100 (empty -> .)
    READ            reduce using rule 100 (empty -> .)
    PRINT           reduce using rule 100 (empty -> .)
    FOR             reduce using rule 100 (empty -> .)
    IF              reduce using rule 100 (empty -> .)
    WHILE           reduce using rule 100 (empty -> .)
    RETURN          reduce using rule 100 (empty -> .)

    vars                           shift and go to state 195
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 180

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 181

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 182

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 183

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 184

    (54) asignacion -> ID arr EQUALS exp .

    SEMICOLON       reduce using rule 54 (asignacion -> ID arr EQUALS exp .)
    TO              reduce using rule 54 (asignacion -> ID arr EQUALS exp .)


state 185

    (55) asignacion -> ID mat EQUALS exp .

    SEMICOLON       reduce using rule 55 (asignacion -> ID mat EQUALS exp .)
    TO              reduce using rule 55 (asignacion -> ID mat EQUALS exp .)


state 186

    (76) lectura -> READ LPAREN var1 RPAREN .

    SEMICOLON       reduce using rule 76 (lectura -> READ LPAREN var1 RPAREN .)


state 187

    (69) escritura -> PRINT LPAREN escritura1 RPAREN .

    SEMICOLON       reduce using rule 69 (escritura -> PRINT LPAREN escritura1 RPAREN .)


state 188

    (70) escritura1 -> escritura2 COMMA . escritura2
    (72) escritura2 -> . CTESTRING
    (73) escritura2 -> . CTEI
    (74) escritura2 -> . CTEF
    (75) escritura2 -> . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTESTRING       shift and go to state 170
    CTEI            shift and go to state 171
    CTEF            shift and go to state 172
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    escritura2                     shift and go to state 196
    exp                            shift and go to state 173
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 189

    (66) for -> FOR LPAREN for1 RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 197


state 190

    (67) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 198


state 191

    (53) asignacion -> ID . EQUALS exp
    (54) asignacion -> ID . arr EQUALS exp
    (55) asignacion -> ID . mat EQUALS exp
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 148
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 149
    mat                            shift and go to state 150

state 192

    (62) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY
    (63) if -> IF LPAREN exp RPAREN . LCURLY statement RCURLY else

    LCURLY          shift and go to state 199


state 193

    (68) while -> WHILE LPAREN exp RPAREN . LCURLY statement RCURLY

    LCURLY          shift and go to state 200


state 194

    (42) function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 201
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 195

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars . statement RETURN exp SEMICOLON RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RETURN          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 202
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 196

    (70) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 70 (escritura1 -> escritura2 COMMA escritura2 .)


state 197

    (66) for -> FOR LPAREN for1 RPAREN LCURLY . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 203
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 198

    (67) for1 -> FROM asignacion TO . exp
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    RPAREN          reduce using rule 100 (empty -> .)

    exp                            shift and go to state 204
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 199

    (62) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY
    (63) if -> IF LPAREN exp RPAREN LCURLY . statement RCURLY else
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 205
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 200

    (68) while -> WHILE LPAREN exp RPAREN LCURLY . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 206
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 201

    (42) function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 207


state 202

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement . RETURN exp SEMICOLON RCURLY

    RETURN          shift and go to state 208


state 203

    (66) for -> FOR LPAREN for1 RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 209


state 204

    (67) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 67 (for1 -> FROM asignacion TO exp .)


state 205

    (62) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY
    (63) if -> IF LPAREN exp RPAREN LCURLY statement . RCURLY else

    RCURLY          shift and go to state 210


state 206

    (68) while -> WHILE LPAREN exp RPAREN LCURLY statement . RCURLY

    RCURLY          shift and go to state 211


state 207

    (42) function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 42 (function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 42 (function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 42 (function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 208

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN . exp SEMICOLON RCURLY
    (77) exp -> . nexp
    (78) exp -> . nexp OR nexp
    (79) nexp -> . compexp
    (80) nexp -> . compexp AND compexp
    (81) compexp -> . sumexp
    (82) compexp -> . compexp1 sumexp
    (88) sumexp -> . mulexp
    (89) sumexp -> . mulexp PLUS mulexp
    (90) sumexp -> . mulexp MINUS mulexp
    (83) compexp1 -> . sumexp GT sumexp
    (84) compexp1 -> . sumexp LT sumexp
    (85) compexp1 -> . sumexp GTE sumexp
    (86) compexp1 -> . sumexp LTE sumexp
    (87) compexp1 -> . sumexp NE sumexp
    (91) mulexp -> . pexp
    (92) mulexp -> . pexp MUL pexp
    (93) mulexp -> . pexp DIV pexp
    (94) pexp -> . var1
    (95) pexp -> . CTEI
    (96) pexp -> . CTEF
    (97) pexp -> . CTEC
    (98) pexp -> . llamada
    (99) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (61) llamada -> . ID LPAREN exp RPAREN
    (100) empty -> .

    CTEI            shift and go to state 100
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    LPAREN          shift and go to state 81
    ID              shift and go to state 82
    MUL             reduce using rule 100 (empty -> .)
    DIV             reduce using rule 100 (empty -> .)
    PLUS            reduce using rule 100 (empty -> .)
    MINUS           reduce using rule 100 (empty -> .)
    GT              reduce using rule 100 (empty -> .)
    LT              reduce using rule 100 (empty -> .)
    GTE             reduce using rule 100 (empty -> .)
    LTE             reduce using rule 100 (empty -> .)
    NE              reduce using rule 100 (empty -> .)
    AND             reduce using rule 100 (empty -> .)
    OR              reduce using rule 100 (empty -> .)
    SEMICOLON       reduce using rule 100 (empty -> .)

    exp                            shift and go to state 212
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 80
    empty                          shift and go to state 42

state 209

    (66) for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 66 (for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY .)


state 210

    (62) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .
    (63) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY . else
    (64) else -> . ELSE LCURLY statement RCURLY
    (65) else -> . empty
    (100) empty -> .

  ! reduce/reduce conflict for ID resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for READ resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for PRINT resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for FOR resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for IF resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for WHILE resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RCURLY resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
  ! reduce/reduce conflict for RETURN resolved using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ID              reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 62 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY .)
    ELSE            shift and go to state 214

  ! ID              [ reduce using rule 100 (empty -> .) ]
  ! READ            [ reduce using rule 100 (empty -> .) ]
  ! PRINT           [ reduce using rule 100 (empty -> .) ]
  ! FOR             [ reduce using rule 100 (empty -> .) ]
  ! IF              [ reduce using rule 100 (empty -> .) ]
  ! WHILE           [ reduce using rule 100 (empty -> .) ]
  ! RCURLY          [ reduce using rule 100 (empty -> .) ]
  ! RETURN          [ reduce using rule 100 (empty -> .) ]

    else                           shift and go to state 213
    empty                          shift and go to state 215

state 211

    (68) while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .

    ID              reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    READ            reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    PRINT           reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    FOR             reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    IF              reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    WHILE           reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RCURLY          reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)
    RETURN          reduce using rule 68 (while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY .)


state 212

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 216


state 213

    (63) if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .

    ID              reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    READ            reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    PRINT           reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    FOR             reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    IF              reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    WHILE           reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RCURLY          reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)
    RETURN          reduce using rule 63 (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else .)


state 214

    (64) else -> ELSE . LCURLY statement RCURLY

    LCURLY          shift and go to state 217


state 215

    (65) else -> empty .

    ID              reduce using rule 65 (else -> empty .)
    READ            reduce using rule 65 (else -> empty .)
    PRINT           reduce using rule 65 (else -> empty .)
    FOR             reduce using rule 65 (else -> empty .)
    IF              reduce using rule 65 (else -> empty .)
    WHILE           reduce using rule 65 (else -> empty .)
    RCURLY          reduce using rule 65 (else -> empty .)
    RETURN          reduce using rule 65 (else -> empty .)


state 216

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON . RCURLY

    RCURLY          shift and go to state 218


state 217

    (64) else -> ELSE LCURLY . statement RCURLY
    (44) statement -> . statement1 statement
    (45) statement -> . empty
    (46) statement1 -> . asignacion SEMICOLON
    (47) statement1 -> . llamada SEMICOLON
    (48) statement1 -> . lectura SEMICOLON
    (49) statement1 -> . escritura SEMICOLON
    (50) statement1 -> . for
    (51) statement1 -> . if
    (52) statement1 -> . while
    (100) empty -> .
    (53) asignacion -> . ID EQUALS exp
    (54) asignacion -> . ID arr EQUALS exp
    (55) asignacion -> . ID mat EQUALS exp
    (61) llamada -> . ID LPAREN exp RPAREN
    (76) lectura -> . READ LPAREN var1 RPAREN
    (69) escritura -> . PRINT LPAREN escritura1 RPAREN
    (66) for -> . FOR LPAREN for1 RPAREN LCURLY statement RCURLY
    (62) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY
    (63) if -> . IF LPAREN exp RPAREN LCURLY statement RCURLY else
    (68) while -> . WHILE LPAREN exp RPAREN LCURLY statement RCURLY

    RCURLY          reduce using rule 100 (empty -> .)
    ID              shift and go to state 117
    READ            shift and go to state 118
    PRINT           shift and go to state 119
    FOR             shift and go to state 120
    IF              shift and go to state 121
    WHILE           shift and go to state 122

    statement                      shift and go to state 219
    statement1                     shift and go to state 108
    empty                          shift and go to state 109
    asignacion                     shift and go to state 110
    llamada                        shift and go to state 111
    lectura                        shift and go to state 112
    escritura                      shift and go to state 113
    for                            shift and go to state 114
    if                             shift and go to state 115
    while                          shift and go to state 116

state 218

    (43) function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .

    FUN             reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    MAIN            reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)
    $end            reduce using rule 43 (function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY .)


state 219

    (64) else -> ELSE LCURLY statement . RCURLY

    RCURLY          shift and go to state 220


state 220

    (64) else -> ELSE LCURLY statement RCURLY .

    ID              reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    READ            reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    PRINT           reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    FOR             reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    IF              reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    WHILE           reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    RCURLY          reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)
    RETURN          reduce using rule 64 (else -> ELSE LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 41 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 82 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 82 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 94 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 94 resolved as shift
WARNING: shift/reduce conflict for ID in state 94 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 95 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 95 resolved as shift
WARNING: shift/reduce conflict for ID in state 95 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 96 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 96 resolved as shift
WARNING: shift/reduce conflict for ID in state 96 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 97 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 97 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 97 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 97 resolved as shift
WARNING: shift/reduce conflict for ID in state 97 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 98 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 98 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 98 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 98 resolved as shift
WARNING: shift/reduce conflict for ID in state 98 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 101 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 101 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 101 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 101 resolved as shift
WARNING: shift/reduce conflict for ID in state 101 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 102 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 102 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 102 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 102 resolved as shift
WARNING: shift/reduce conflict for ID in state 102 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 103 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 103 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 103 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 103 resolved as shift
WARNING: shift/reduce conflict for ID in state 103 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 104 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 104 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 104 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 104 resolved as shift
WARNING: shift/reduce conflict for ID in state 104 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 158 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 161 resolved as shift
WARNING: reduce/reduce conflict in state 171 resolved using rule (escritura2 -> CTEI)
WARNING: rejected rule (pexp -> CTEI) in state 171
WARNING: reduce/reduce conflict in state 172 resolved using rule (escritura2 -> CTEF)
WARNING: rejected rule (pexp -> CTEF) in state 172
WARNING: reduce/reduce conflict in state 210 resolved using rule (if -> IF LPAREN exp RPAREN LCURLY statement RCURLY)
WARNING: rejected rule (empty -> <empty>) in state 210
