Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT guardaTipoVar
Rule 9     tipo -> FLOAT guardaTipoVar
Rule 10    tipo -> CHAR guardaTipoVar
Rule 11    guardaTipoVar -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1 addV
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1 addV
Rule 19    var1 -> ID mat COMMA var1 addV
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    addV -> <empty>
Rule 24    var2 -> var2 tipo var1 SEMICOLON addV
Rule 25    var2 -> empty
Rule 26    especial -> TRANSPUESTA
Rule 27    especial -> INVERSA
Rule 28    especial -> DETERMINANTE
Rule 29    arr -> LBRACKET CTEI RBRACKET
Rule 30    arr -> LBRACKET exp RBRACKET
Rule 31    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 32    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 34    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 35    modules -> function modules
Rule 36    modules -> empty
Rule 37    save_fun -> <empty>
Rule 38    function -> FUN VOID function1 end_func
Rule 39    function -> FUN INT function2 end_func
Rule 40    function -> FUN CHAR function2 end_func
Rule 41    function -> FUN FLOAT function2 end_func
Rule 42    function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 43    function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
Rule 44    end_func -> <empty>
Rule 45    operadorReturn -> <empty>
Rule 46    quad_return -> <empty>
Rule 47    statement -> statement1 statement
Rule 48    statement -> empty
Rule 49    statement1 -> asignacion SEMICOLON
Rule 50    statement1 -> llamada SEMICOLON
Rule 51    statement1 -> lectura SEMICOLON
Rule 52    statement1 -> escritura SEMICOLON
Rule 53    statement1 -> for
Rule 54    statement1 -> if
Rule 55    statement1 -> while
Rule 56    asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
Rule 57    asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 58    asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 59    genera_quad_asignacion -> <empty>
Rule 60    addOperadorName -> <empty>
Rule 61    param1 -> ID
Rule 62    param1 -> ID COMMA var1 addV
Rule 63    param1 -> ID arr
Rule 64    param1 -> ID arr COMMA var1 addV
Rule 65    param1 -> ID mat COMMA var1 addV
Rule 66    param1 -> ID mat
Rule 67    param1 -> ID mat especial
Rule 68    param1 -> empty
Rule 69    param2 -> param2 tipo param1 addV
Rule 70    param2 -> empty
Rule 71    llamada -> ID LPAREN p_arg RPAREN
Rule 72    p_arg -> exp
Rule 73    p_arg -> exp COMMA exp
Rule 74    era_call -> <empty>
Rule 75    if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
Rule 76    else -> ELSE else_quad LCURLY statement RCURLY
Rule 77    else -> empty
Rule 78    for_op -> <empty>
Rule 79    for_quad -> <empty>
Rule 80    for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
Rule 81    for1 -> FROM asignacion TO exp
Rule 82    loop_end -> <empty>
Rule 83    while_quad -> <empty>
Rule 84    while_op -> <empty>
Rule 85    while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
Rule 86    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 87    escritura1 -> escritura2 COMMA escritura2
Rule 88    escritura1 -> escritura2
Rule 89    escritura2 -> COMILLA CTESTRING COMILLA
Rule 90    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 91    escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 92    escritura2 -> exp
Rule 93    lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN
Rule 94    exp -> nexp
Rule 95    exp -> nexp OR addOperadorName nexp genera_quad_or
Rule 96    genera_quad_or -> <empty>
Rule 97    genera_quad_and -> <empty>
Rule 98    compare_quad -> <empty>
Rule 99    if_quad -> <empty>
Rule 100   end_if -> <empty>
Rule 101   else_quad -> <empty>
Rule 102   nexp -> compexp
Rule 103   nexp -> compexp AND addOperadorName compexp genera_quad_and
Rule 104   compexp -> sumexp
Rule 105   compexp -> compexp1 sumexp
Rule 106   compexp1 -> sumexp GT addOperadorName sumexp compare_quad
Rule 107   compexp1 -> sumexp LT addOperadorName sumexp compare_quad
Rule 108   compexp1 -> sumexp GTE addOperadorName sumexp compare_quad
Rule 109   compexp1 -> sumexp LTE addOperadorName sumexp compare_quad
Rule 110   compexp1 -> sumexp NE addOperadorName sumexp compare_quad
Rule 111   compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad
Rule 112   sumexp -> mulexp
Rule 113   sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad
Rule 114   sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad
Rule 115   genera_sum_quad -> <empty>
Rule 116   genera_mul_quad -> <empty>
Rule 117   operadorPrint -> <empty>
Rule 118   operatorPrintQuad -> <empty>
Rule 119   operatorRead -> <empty>
Rule 120   operatorReadQuad -> <empty>
Rule 121   mulexp -> pexp
Rule 122   mulexp -> pexp MUL addOperadorName pexp genera_mul_quad
Rule 123   mulexp -> pexp DIV addOperadorName pexp genera_mul_quad
Rule 124   pexp -> var1 saveId
Rule 125   pexp -> CTEI saveCTE
Rule 126   pexp -> CTEF saveCTE
Rule 127   pexp -> CTEC saveCTE
Rule 128   pexp -> CTESTRING saveCTE
Rule 129   pexp -> llamada
Rule 130   pexp -> LPAREN exp RPAREN
Rule 131   empty -> <empty>
Rule 132   saveId -> <empty>
Rule 133   saveId2 -> <empty>
Rule 134   saveCTE -> <empty>

Terminals, with rules where they appear

AND                  : 103
CHAR                 : 10 40
COMILLA              : 89 89
COMMA                : 16 18 19 62 64 65 73 87
COMPARE              : 111
CTEC                 : 127
CTEF                 : 91 126
CTEI                 : 29 31 31 33 34 90 125
CTESTRING            : 89 128
DETERMINANTE         : 28
DIV                  : 123
ELSE                 : 76
END                  : 7
EQUALS               : 56 57 58
FLOAT                : 9 41
FOR                  : 80
FROM                 : 81
FUN                  : 38 39 40 41
GT                   : 106
GTE                  : 108
ID                   : 1 15 16 17 18 19 20 21 42 43 56 57 58 61 62 63 64 65 66 67 71
IF                   : 75
INT                  : 8 39
INVERSA              : 27
LBRACKET             : 29 30 31 31 32 32 33 33 34 34
LCURLY               : 7 42 43 75 76 80 85
LPAREN               : 7 42 43 71 75 80 85 86 93 130
LT                   : 107
LTE                  : 109
MAIN                 : 7
MINUS                : 114
MUL                  : 122
NE                   : 110
OR                   : 95
PLUS                 : 113
PRINT                : 86
PROGRAM              : 1
RBRACKET             : 29 30 31 31 32 32 33 33 34 34
RCURLY               : 7 42 43 75 76 80 85
READ                 : 93
RETURN               : 43
RPAREN               : 7 42 43 71 75 80 85 86 93 130
SEMICOLON            : 1 24 42 43 43 49 50 51 52
TO                   : 81
TRANSPUESTA          : 26
VAR                  : 14
VOID                 : 38
WHILE                : 85
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 56 57 58 95 103 106 107 108 109 110 111 113 114 122 123
addP                 : 1
addV                 : 16 18 19 24 62 64 65 69
arr                  : 17 18 57 63 64
asignacion           : 49 81
compare_quad         : 106 107 108 109 110 111
compexp              : 102 103 103
compexp1             : 105
else                 : 75
else_quad            : 76
empty                : 13 22 25 36 48 68 70 77
end_func             : 38 39 40 41
end_if               : 75
era_call             : 
escritura            : 52
escritura1           : 86
escritura2           : 87 87 88
especial             : 21 67
exp                  : 30 32 32 33 34 43 56 57 58 72 73 73 75 81 85 92 130
for                  : 53
for1                 : 80
for_op               : 80
for_quad             : 80
function             : 35
function1            : 38
function2            : 39 40 41
genera_mul_quad      : 122 123
genera_quad_and      : 103
genera_quad_asignacion : 56 57 58
genera_quad_or       : 95
genera_sum_quad      : 113 114
guardaTipoVar        : 8 9 10
if                   : 54
if_quad              : 75
lectura              : 51
llamada              : 50 129
loop_end             : 80 85
main                 : 6
mat                  : 19 20 21 58 65 66 67
modules              : 3 4 35
mulexp               : 112 113 113 114 114
nexp                 : 94 95 95
operadorPrint        : 86
operadorReturn       : 43
operatorPrintQuad    : 86 90 91
operatorRead         : 93
operatorReadQuad     : 93
p_arg                : 71
param1               : 69
param2               : 7 42 43 69
pexp                 : 121 122 122 123 123
programa             : 0
programa1            : 1
programa2            : 3 5
quad_return          : 43
saveCTE              : 90 91 125 126 127 128
saveId               : 124
saveId2              : 56 57 58
save_fun             : 7 42 43
statement            : 7 42 43 47 75 76 80 85
statement1           : 47
sumexp               : 104 105 106 106 107 107 108 108 109 109 110 110 111 111
tipo                 : 24 69
var                  : 12
var1                 : 16 18 19 24 62 64 65 93 124
var2                 : 14 24
vars                 : 3 4 7 42 43
while                : 55
while_op             : 85
while_quad           : 85

Parsing method: LALR

state 0

    (0) S' -> . programa
    (1) programa -> . PROGRAM ID SEMICOLON addP programa1

    PROGRAM         shift and go to state 2

    programa                       shift and go to state 1

state 1

    (0) S' -> programa .



state 2

    (1) programa -> PROGRAM . ID SEMICOLON addP programa1

    ID              shift and go to state 3


state 3

    (1) programa -> PROGRAM ID . SEMICOLON addP programa1

    SEMICOLON       shift and go to state 4


state 4

    (1) programa -> PROGRAM ID SEMICOLON . addP programa1
    (2) addP -> .

    VAR             reduce using rule 2 (addP -> .)
    MAIN            reduce using rule 2 (addP -> .)
    FUN             reduce using rule 2 (addP -> .)
    $end            reduce using rule 2 (addP -> .)

    addP                           shift and go to state 5

state 5

    (1) programa -> PROGRAM ID SEMICOLON addP . programa1
    (3) programa1 -> . vars modules programa2
    (4) programa1 -> . vars modules
    (5) programa1 -> . programa2
    (12) vars -> . var
    (13) vars -> . empty
    (6) programa2 -> . main
    (14) var -> . VAR var2
    (131) empty -> .
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

  ! shift/reduce conflict for MAIN resolved as shift
    VAR             shift and go to state 12
    FUN             reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)
    MAIN            shift and go to state 13

  ! MAIN            [ reduce using rule 131 (empty -> .) ]

    programa1                      shift and go to state 6
    vars                           shift and go to state 7
    programa2                      shift and go to state 8
    var                            shift and go to state 9
    empty                          shift and go to state 10
    main                           shift and go to state 11

state 6

    (1) programa -> PROGRAM ID SEMICOLON addP programa1 .

    $end            reduce using rule 1 (programa -> PROGRAM ID SEMICOLON addP programa1 .)


state 7

    (3) programa1 -> vars . modules programa2
    (4) programa1 -> vars . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1 end_func
    (39) function -> . FUN INT function2 end_func
    (40) function -> . FUN CHAR function2 end_func
    (41) function -> . FUN FLOAT function2 end_func
    (131) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)

    modules                        shift and go to state 14
    function                       shift and go to state 15
    empty                          shift and go to state 16

state 8

    (5) programa1 -> programa2 .

    $end            reduce using rule 5 (programa1 -> programa2 .)


state 9

    (12) vars -> var .

    FUN             reduce using rule 12 (vars -> var .)
    MAIN            reduce using rule 12 (vars -> var .)
    $end            reduce using rule 12 (vars -> var .)
    ID              reduce using rule 12 (vars -> var .)
    READ            reduce using rule 12 (vars -> var .)
    PRINT           reduce using rule 12 (vars -> var .)
    FOR             reduce using rule 12 (vars -> var .)
    IF              reduce using rule 12 (vars -> var .)
    WHILE           reduce using rule 12 (vars -> var .)
    RCURLY          reduce using rule 12 (vars -> var .)
    RETURN          reduce using rule 12 (vars -> var .)


state 10

    (13) vars -> empty .

    FUN             reduce using rule 13 (vars -> empty .)
    MAIN            reduce using rule 13 (vars -> empty .)
    $end            reduce using rule 13 (vars -> empty .)
    ID              reduce using rule 13 (vars -> empty .)
    READ            reduce using rule 13 (vars -> empty .)
    PRINT           reduce using rule 13 (vars -> empty .)
    FOR             reduce using rule 13 (vars -> empty .)
    IF              reduce using rule 13 (vars -> empty .)
    WHILE           reduce using rule 13 (vars -> empty .)
    RCURLY          reduce using rule 13 (vars -> empty .)
    RETURN          reduce using rule 13 (vars -> empty .)


state 11

    (6) programa2 -> main .

    $end            reduce using rule 6 (programa2 -> main .)


state 12

    (14) var -> VAR . var2
    (24) var2 -> . var2 tipo var1 SEMICOLON addV
    (25) var2 -> . empty
    (131) empty -> .

    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    FUN             reduce using rule 131 (empty -> .)
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    var2                           shift and go to state 18
    empty                          shift and go to state 19

state 13

    (7) main -> MAIN . save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 20

state 14

    (3) programa1 -> vars modules . programa2
    (4) programa1 -> vars modules .
    (6) programa2 -> . main
    (7) main -> . MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    $end            reduce using rule 4 (programa1 -> vars modules .)
    MAIN            shift and go to state 13

    programa2                      shift and go to state 21
    main                           shift and go to state 11

state 15

    (35) modules -> function . modules
    (35) modules -> . function modules
    (36) modules -> . empty
    (38) function -> . FUN VOID function1 end_func
    (39) function -> . FUN INT function2 end_func
    (40) function -> . FUN CHAR function2 end_func
    (41) function -> . FUN FLOAT function2 end_func
    (131) empty -> .

    FUN             shift and go to state 17
    MAIN            reduce using rule 131 (empty -> .)
    $end            reduce using rule 131 (empty -> .)

    function                       shift and go to state 15
    modules                        shift and go to state 22
    empty                          shift and go to state 16

state 16

    (36) modules -> empty .

    MAIN            reduce using rule 36 (modules -> empty .)
    $end            reduce using rule 36 (modules -> empty .)


state 17

    (38) function -> FUN . VOID function1 end_func
    (39) function -> FUN . INT function2 end_func
    (40) function -> FUN . CHAR function2 end_func
    (41) function -> FUN . FLOAT function2 end_func

    VOID            shift and go to state 23
    INT             shift and go to state 24
    CHAR            shift and go to state 25
    FLOAT           shift and go to state 26


state 18

    (14) var -> VAR var2 .
    (24) var2 -> var2 . tipo var1 SEMICOLON addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    FUN             reduce using rule 14 (var -> VAR var2 .)
    MAIN            reduce using rule 14 (var -> VAR var2 .)
    $end            reduce using rule 14 (var -> VAR var2 .)
    ID              reduce using rule 14 (var -> VAR var2 .)
    READ            reduce using rule 14 (var -> VAR var2 .)
    PRINT           reduce using rule 14 (var -> VAR var2 .)
    FOR             reduce using rule 14 (var -> VAR var2 .)
    IF              reduce using rule 14 (var -> VAR var2 .)
    WHILE           reduce using rule 14 (var -> VAR var2 .)
    RCURLY          reduce using rule 14 (var -> VAR var2 .)
    RETURN          reduce using rule 14 (var -> VAR var2 .)
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 27

state 19

    (25) var2 -> empty .

    INT             reduce using rule 25 (var2 -> empty .)
    FLOAT           reduce using rule 25 (var2 -> empty .)
    CHAR            reduce using rule 25 (var2 -> empty .)
    FUN             reduce using rule 25 (var2 -> empty .)
    MAIN            reduce using rule 25 (var2 -> empty .)
    $end            reduce using rule 25 (var2 -> empty .)
    ID              reduce using rule 25 (var2 -> empty .)
    READ            reduce using rule 25 (var2 -> empty .)
    PRINT           reduce using rule 25 (var2 -> empty .)
    FOR             reduce using rule 25 (var2 -> empty .)
    IF              reduce using rule 25 (var2 -> empty .)
    WHILE           reduce using rule 25 (var2 -> empty .)
    RCURLY          reduce using rule 25 (var2 -> empty .)
    RETURN          reduce using rule 25 (var2 -> empty .)


state 20

    (7) main -> MAIN save_fun . LPAREN param2 RPAREN LCURLY vars statement RCURLY END

    LPAREN          shift and go to state 31


state 21

    (3) programa1 -> vars modules programa2 .

    $end            reduce using rule 3 (programa1 -> vars modules programa2 .)


state 22

    (35) modules -> function modules .

    MAIN            reduce using rule 35 (modules -> function modules .)
    $end            reduce using rule 35 (modules -> function modules .)


state 23

    (38) function -> FUN VOID . function1 end_func
    (42) function1 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    ID              shift and go to state 33

    function1                      shift and go to state 32

state 24

    (39) function -> FUN INT . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 34

state 25

    (40) function -> FUN CHAR . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 36

state 26

    (41) function -> FUN FLOAT . function2 end_func
    (43) function2 -> . ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    ID              shift and go to state 35

    function2                      shift and go to state 37

state 27

    (24) var2 -> var2 tipo . var1 SEMICOLON addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 39
    SEMICOLON       reduce using rule 131 (empty -> .)

    var1                           shift and go to state 38
    empty                          shift and go to state 40

state 28

    (8) tipo -> INT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 41

state 29

    (9) tipo -> FLOAT . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 42

state 30

    (10) tipo -> CHAR . guardaTipoVar
    (11) guardaTipoVar -> .

    ID              reduce using rule 11 (guardaTipoVar -> .)
    SEMICOLON       reduce using rule 11 (guardaTipoVar -> .)
    RPAREN          reduce using rule 11 (guardaTipoVar -> .)
    INT             reduce using rule 11 (guardaTipoVar -> .)
    FLOAT           reduce using rule 11 (guardaTipoVar -> .)
    CHAR            reduce using rule 11 (guardaTipoVar -> .)

    guardaTipoVar                  shift and go to state 43

state 31

    (7) main -> MAIN save_fun LPAREN . param2 RPAREN LCURLY vars statement RCURLY END
    (69) param2 -> . param2 tipo param1 addV
    (70) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 44
    empty                          shift and go to state 45

state 32

    (38) function -> FUN VOID function1 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 46

state 33

    (42) function1 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 47

state 34

    (39) function -> FUN INT function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 48

state 35

    (43) function2 -> ID . save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (37) save_fun -> .

    LPAREN          reduce using rule 37 (save_fun -> .)

    save_fun                       shift and go to state 49

state 36

    (40) function -> FUN CHAR function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 50

state 37

    (41) function -> FUN FLOAT function2 . end_func
    (44) end_func -> .

    FUN             reduce using rule 44 (end_func -> .)
    MAIN            reduce using rule 44 (end_func -> .)
    $end            reduce using rule 44 (end_func -> .)

    end_func                       shift and go to state 51

state 38

    (24) var2 -> var2 tipo var1 . SEMICOLON addV

    SEMICOLON       shift and go to state 52


state 39

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    INT             reduce using rule 15 (var1 -> ID .)
    FLOAT           reduce using rule 15 (var1 -> ID .)
    CHAR            reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    LPAREN          reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55

state 40

    (22) var1 -> empty .

    SEMICOLON       reduce using rule 22 (var1 -> empty .)
    MUL             reduce using rule 22 (var1 -> empty .)
    DIV             reduce using rule 22 (var1 -> empty .)
    PLUS            reduce using rule 22 (var1 -> empty .)
    MINUS           reduce using rule 22 (var1 -> empty .)
    GT              reduce using rule 22 (var1 -> empty .)
    LT              reduce using rule 22 (var1 -> empty .)
    GTE             reduce using rule 22 (var1 -> empty .)
    LTE             reduce using rule 22 (var1 -> empty .)
    NE              reduce using rule 22 (var1 -> empty .)
    COMPARE         reduce using rule 22 (var1 -> empty .)
    AND             reduce using rule 22 (var1 -> empty .)
    OR              reduce using rule 22 (var1 -> empty .)
    RBRACKET        reduce using rule 22 (var1 -> empty .)
    RPAREN          reduce using rule 22 (var1 -> empty .)
    COMMA           reduce using rule 22 (var1 -> empty .)
    TO              reduce using rule 22 (var1 -> empty .)
    INT             reduce using rule 22 (var1 -> empty .)
    FLOAT           reduce using rule 22 (var1 -> empty .)
    CHAR            reduce using rule 22 (var1 -> empty .)
    CTEI            reduce using rule 22 (var1 -> empty .)
    CTEF            reduce using rule 22 (var1 -> empty .)
    CTEC            reduce using rule 22 (var1 -> empty .)
    CTESTRING       reduce using rule 22 (var1 -> empty .)
    LPAREN          reduce using rule 22 (var1 -> empty .)
    ID              reduce using rule 22 (var1 -> empty .)


state 41

    (8) tipo -> INT guardaTipoVar .

    ID              reduce using rule 8 (tipo -> INT guardaTipoVar .)
    SEMICOLON       reduce using rule 8 (tipo -> INT guardaTipoVar .)
    RPAREN          reduce using rule 8 (tipo -> INT guardaTipoVar .)
    INT             reduce using rule 8 (tipo -> INT guardaTipoVar .)
    FLOAT           reduce using rule 8 (tipo -> INT guardaTipoVar .)
    CHAR            reduce using rule 8 (tipo -> INT guardaTipoVar .)


state 42

    (9) tipo -> FLOAT guardaTipoVar .

    ID              reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    SEMICOLON       reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    RPAREN          reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    INT             reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    FLOAT           reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)
    CHAR            reduce using rule 9 (tipo -> FLOAT guardaTipoVar .)


state 43

    (10) tipo -> CHAR guardaTipoVar .

    ID              reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    SEMICOLON       reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    RPAREN          reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    INT             reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    FLOAT           reduce using rule 10 (tipo -> CHAR guardaTipoVar .)
    CHAR            reduce using rule 10 (tipo -> CHAR guardaTipoVar .)


state 44

    (7) main -> MAIN save_fun LPAREN param2 . RPAREN LCURLY vars statement RCURLY END
    (69) param2 -> param2 . tipo param1 addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 57
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 45

    (70) param2 -> empty .

    RPAREN          reduce using rule 70 (param2 -> empty .)
    INT             reduce using rule 70 (param2 -> empty .)
    FLOAT           reduce using rule 70 (param2 -> empty .)
    CHAR            reduce using rule 70 (param2 -> empty .)


state 46

    (38) function -> FUN VOID function1 end_func .

    FUN             reduce using rule 38 (function -> FUN VOID function1 end_func .)
    MAIN            reduce using rule 38 (function -> FUN VOID function1 end_func .)
    $end            reduce using rule 38 (function -> FUN VOID function1 end_func .)


state 47

    (42) function1 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY

    LPAREN          shift and go to state 59


state 48

    (39) function -> FUN INT function2 end_func .

    FUN             reduce using rule 39 (function -> FUN INT function2 end_func .)
    MAIN            reduce using rule 39 (function -> FUN INT function2 end_func .)
    $end            reduce using rule 39 (function -> FUN INT function2 end_func .)


state 49

    (43) function2 -> ID save_fun . LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LPAREN          shift and go to state 60


state 50

    (40) function -> FUN CHAR function2 end_func .

    FUN             reduce using rule 40 (function -> FUN CHAR function2 end_func .)
    MAIN            reduce using rule 40 (function -> FUN CHAR function2 end_func .)
    $end            reduce using rule 40 (function -> FUN CHAR function2 end_func .)


state 51

    (41) function -> FUN FLOAT function2 end_func .

    FUN             reduce using rule 41 (function -> FUN FLOAT function2 end_func .)
    MAIN            reduce using rule 41 (function -> FUN FLOAT function2 end_func .)
    $end            reduce using rule 41 (function -> FUN FLOAT function2 end_func .)


state 52

    (24) var2 -> var2 tipo var1 SEMICOLON . addV
    (23) addV -> .

    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    FUN             reduce using rule 23 (addV -> .)
    MAIN            reduce using rule 23 (addV -> .)
    $end            reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)
    READ            reduce using rule 23 (addV -> .)
    PRINT           reduce using rule 23 (addV -> .)
    FOR             reduce using rule 23 (addV -> .)
    IF              reduce using rule 23 (addV -> .)
    WHILE           reduce using rule 23 (addV -> .)
    RCURLY          reduce using rule 23 (addV -> .)
    RETURN          reduce using rule 23 (addV -> .)

    addV                           shift and go to state 61

state 53

    (16) var1 -> ID COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    CTEI            reduce using rule 131 (empty -> .)
    CTEF            reduce using rule 131 (empty -> .)
    CTEC            reduce using rule 131 (empty -> .)
    CTESTRING       reduce using rule 131 (empty -> .)
    LPAREN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]

    var1                           shift and go to state 62
    empty                          shift and go to state 40

state 54

    (17) var1 -> ID arr .
    (18) var1 -> ID arr . COMMA var1 addV

  ! shift/reduce conflict for COMMA resolved as shift
    SEMICOLON       reduce using rule 17 (var1 -> ID arr .)
    MUL             reduce using rule 17 (var1 -> ID arr .)
    DIV             reduce using rule 17 (var1 -> ID arr .)
    PLUS            reduce using rule 17 (var1 -> ID arr .)
    MINUS           reduce using rule 17 (var1 -> ID arr .)
    GT              reduce using rule 17 (var1 -> ID arr .)
    LT              reduce using rule 17 (var1 -> ID arr .)
    GTE             reduce using rule 17 (var1 -> ID arr .)
    LTE             reduce using rule 17 (var1 -> ID arr .)
    NE              reduce using rule 17 (var1 -> ID arr .)
    COMPARE         reduce using rule 17 (var1 -> ID arr .)
    AND             reduce using rule 17 (var1 -> ID arr .)
    OR              reduce using rule 17 (var1 -> ID arr .)
    RBRACKET        reduce using rule 17 (var1 -> ID arr .)
    RPAREN          reduce using rule 17 (var1 -> ID arr .)
    TO              reduce using rule 17 (var1 -> ID arr .)
    INT             reduce using rule 17 (var1 -> ID arr .)
    FLOAT           reduce using rule 17 (var1 -> ID arr .)
    CHAR            reduce using rule 17 (var1 -> ID arr .)
    CTEI            reduce using rule 17 (var1 -> ID arr .)
    CTEF            reduce using rule 17 (var1 -> ID arr .)
    CTEC            reduce using rule 17 (var1 -> ID arr .)
    CTESTRING       reduce using rule 17 (var1 -> ID arr .)
    LPAREN          reduce using rule 17 (var1 -> ID arr .)
    ID              reduce using rule 17 (var1 -> ID arr .)
    COMMA           shift and go to state 63

  ! COMMA           [ reduce using rule 17 (var1 -> ID arr .) ]


state 55

    (19) var1 -> ID mat . COMMA var1 addV
    (20) var1 -> ID mat .
    (21) var1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

  ! shift/reduce conflict for COMMA resolved as shift
    COMMA           shift and go to state 64
    SEMICOLON       reduce using rule 20 (var1 -> ID mat .)
    MUL             reduce using rule 20 (var1 -> ID mat .)
    DIV             reduce using rule 20 (var1 -> ID mat .)
    PLUS            reduce using rule 20 (var1 -> ID mat .)
    MINUS           reduce using rule 20 (var1 -> ID mat .)
    GT              reduce using rule 20 (var1 -> ID mat .)
    LT              reduce using rule 20 (var1 -> ID mat .)
    GTE             reduce using rule 20 (var1 -> ID mat .)
    LTE             reduce using rule 20 (var1 -> ID mat .)
    NE              reduce using rule 20 (var1 -> ID mat .)
    COMPARE         reduce using rule 20 (var1 -> ID mat .)
    AND             reduce using rule 20 (var1 -> ID mat .)
    OR              reduce using rule 20 (var1 -> ID mat .)
    RBRACKET        reduce using rule 20 (var1 -> ID mat .)
    RPAREN          reduce using rule 20 (var1 -> ID mat .)
    TO              reduce using rule 20 (var1 -> ID mat .)
    INT             reduce using rule 20 (var1 -> ID mat .)
    FLOAT           reduce using rule 20 (var1 -> ID mat .)
    CHAR            reduce using rule 20 (var1 -> ID mat .)
    CTEI            reduce using rule 20 (var1 -> ID mat .)
    CTEF            reduce using rule 20 (var1 -> ID mat .)
    CTEC            reduce using rule 20 (var1 -> ID mat .)
    CTESTRING       reduce using rule 20 (var1 -> ID mat .)
    LPAREN          reduce using rule 20 (var1 -> ID mat .)
    ID              reduce using rule 20 (var1 -> ID mat .)
    TRANSPUESTA     shift and go to state 66
    INVERSA         shift and go to state 67
    DETERMINANTE    shift and go to state 68

  ! COMMA           [ reduce using rule 20 (var1 -> ID mat .) ]

    especial                       shift and go to state 65

state 56

    (29) arr -> LBRACKET . CTEI RBRACKET
    (30) arr -> LBRACKET . exp RBRACKET
    (31) mat -> LBRACKET . CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> LBRACKET . exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET . exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET . CTEI RBRACKET LBRACKET exp RBRACKET
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 69
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    exp                            shift and go to state 70
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 57

    (7) main -> MAIN save_fun LPAREN param2 RPAREN . LCURLY vars statement RCURLY END

    LCURLY          shift and go to state 84


state 58

    (69) param2 -> param2 tipo . param1 addV
    (61) param1 -> . ID
    (62) param1 -> . ID COMMA var1 addV
    (63) param1 -> . ID arr
    (64) param1 -> . ID arr COMMA var1 addV
    (65) param1 -> . ID mat COMMA var1 addV
    (66) param1 -> . ID mat
    (67) param1 -> . ID mat especial
    (68) param1 -> . empty
    (131) empty -> .

    ID              shift and go to state 86
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param1                         shift and go to state 85
    empty                          shift and go to state 87

state 59

    (42) function1 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RCURLY
    (69) param2 -> . param2 tipo param1 addV
    (70) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 88
    empty                          shift and go to state 45

state 60

    (43) function2 -> ID save_fun LPAREN . param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (69) param2 -> . param2 tipo param1 addV
    (70) param2 -> . empty
    (131) empty -> .

    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    param2                         shift and go to state 89
    empty                          shift and go to state 45

state 61

    (24) var2 -> var2 tipo var1 SEMICOLON addV .

    INT             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FLOAT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    CHAR            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FUN             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    MAIN            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    $end            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    ID              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    READ            reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    PRINT           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    FOR             reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    IF              reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    WHILE           reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RCURLY          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)
    RETURN          reduce using rule 24 (var2 -> var2 tipo var1 SEMICOLON addV .)


state 62

    (16) var1 -> ID COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 90

state 63

    (18) var1 -> ID arr COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    CTEI            reduce using rule 131 (empty -> .)
    CTEF            reduce using rule 131 (empty -> .)
    CTEC            reduce using rule 131 (empty -> .)
    CTESTRING       reduce using rule 131 (empty -> .)
    LPAREN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]

    var1                           shift and go to state 91
    empty                          shift and go to state 40

state 64

    (19) var1 -> ID mat COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

  ! shift/reduce conflict for ID resolved as shift
    ID              shift and go to state 39
    SEMICOLON       reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)
    CTEI            reduce using rule 131 (empty -> .)
    CTEF            reduce using rule 131 (empty -> .)
    CTEC            reduce using rule 131 (empty -> .)
    CTESTRING       reduce using rule 131 (empty -> .)
    LPAREN          reduce using rule 131 (empty -> .)

  ! ID              [ reduce using rule 131 (empty -> .) ]

    var1                           shift and go to state 92
    empty                          shift and go to state 40

state 65

    (21) var1 -> ID mat especial .

    SEMICOLON       reduce using rule 21 (var1 -> ID mat especial .)
    MUL             reduce using rule 21 (var1 -> ID mat especial .)
    DIV             reduce using rule 21 (var1 -> ID mat especial .)
    PLUS            reduce using rule 21 (var1 -> ID mat especial .)
    MINUS           reduce using rule 21 (var1 -> ID mat especial .)
    GT              reduce using rule 21 (var1 -> ID mat especial .)
    LT              reduce using rule 21 (var1 -> ID mat especial .)
    GTE             reduce using rule 21 (var1 -> ID mat especial .)
    LTE             reduce using rule 21 (var1 -> ID mat especial .)
    NE              reduce using rule 21 (var1 -> ID mat especial .)
    COMPARE         reduce using rule 21 (var1 -> ID mat especial .)
    AND             reduce using rule 21 (var1 -> ID mat especial .)
    OR              reduce using rule 21 (var1 -> ID mat especial .)
    RBRACKET        reduce using rule 21 (var1 -> ID mat especial .)
    RPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    COMMA           reduce using rule 21 (var1 -> ID mat especial .)
    TO              reduce using rule 21 (var1 -> ID mat especial .)
    INT             reduce using rule 21 (var1 -> ID mat especial .)
    FLOAT           reduce using rule 21 (var1 -> ID mat especial .)
    CHAR            reduce using rule 21 (var1 -> ID mat especial .)
    CTEI            reduce using rule 21 (var1 -> ID mat especial .)
    CTEF            reduce using rule 21 (var1 -> ID mat especial .)
    CTEC            reduce using rule 21 (var1 -> ID mat especial .)
    CTESTRING       reduce using rule 21 (var1 -> ID mat especial .)
    LPAREN          reduce using rule 21 (var1 -> ID mat especial .)
    ID              reduce using rule 21 (var1 -> ID mat especial .)


state 66

    (26) especial -> TRANSPUESTA .

    SEMICOLON       reduce using rule 26 (especial -> TRANSPUESTA .)
    MUL             reduce using rule 26 (especial -> TRANSPUESTA .)
    DIV             reduce using rule 26 (especial -> TRANSPUESTA .)
    PLUS            reduce using rule 26 (especial -> TRANSPUESTA .)
    MINUS           reduce using rule 26 (especial -> TRANSPUESTA .)
    GT              reduce using rule 26 (especial -> TRANSPUESTA .)
    LT              reduce using rule 26 (especial -> TRANSPUESTA .)
    GTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    LTE             reduce using rule 26 (especial -> TRANSPUESTA .)
    NE              reduce using rule 26 (especial -> TRANSPUESTA .)
    COMPARE         reduce using rule 26 (especial -> TRANSPUESTA .)
    AND             reduce using rule 26 (especial -> TRANSPUESTA .)
    OR              reduce using rule 26 (especial -> TRANSPUESTA .)
    RBRACKET        reduce using rule 26 (especial -> TRANSPUESTA .)
    RPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    COMMA           reduce using rule 26 (especial -> TRANSPUESTA .)
    TO              reduce using rule 26 (especial -> TRANSPUESTA .)
    INT             reduce using rule 26 (especial -> TRANSPUESTA .)
    FLOAT           reduce using rule 26 (especial -> TRANSPUESTA .)
    CHAR            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEI            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEF            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTEC            reduce using rule 26 (especial -> TRANSPUESTA .)
    CTESTRING       reduce using rule 26 (especial -> TRANSPUESTA .)
    LPAREN          reduce using rule 26 (especial -> TRANSPUESTA .)
    ID              reduce using rule 26 (especial -> TRANSPUESTA .)


state 67

    (27) especial -> INVERSA .

    SEMICOLON       reduce using rule 27 (especial -> INVERSA .)
    MUL             reduce using rule 27 (especial -> INVERSA .)
    DIV             reduce using rule 27 (especial -> INVERSA .)
    PLUS            reduce using rule 27 (especial -> INVERSA .)
    MINUS           reduce using rule 27 (especial -> INVERSA .)
    GT              reduce using rule 27 (especial -> INVERSA .)
    LT              reduce using rule 27 (especial -> INVERSA .)
    GTE             reduce using rule 27 (especial -> INVERSA .)
    LTE             reduce using rule 27 (especial -> INVERSA .)
    NE              reduce using rule 27 (especial -> INVERSA .)
    COMPARE         reduce using rule 27 (especial -> INVERSA .)
    AND             reduce using rule 27 (especial -> INVERSA .)
    OR              reduce using rule 27 (especial -> INVERSA .)
    RBRACKET        reduce using rule 27 (especial -> INVERSA .)
    RPAREN          reduce using rule 27 (especial -> INVERSA .)
    COMMA           reduce using rule 27 (especial -> INVERSA .)
    TO              reduce using rule 27 (especial -> INVERSA .)
    INT             reduce using rule 27 (especial -> INVERSA .)
    FLOAT           reduce using rule 27 (especial -> INVERSA .)
    CHAR            reduce using rule 27 (especial -> INVERSA .)
    CTEI            reduce using rule 27 (especial -> INVERSA .)
    CTEF            reduce using rule 27 (especial -> INVERSA .)
    CTEC            reduce using rule 27 (especial -> INVERSA .)
    CTESTRING       reduce using rule 27 (especial -> INVERSA .)
    LPAREN          reduce using rule 27 (especial -> INVERSA .)
    ID              reduce using rule 27 (especial -> INVERSA .)


state 68

    (28) especial -> DETERMINANTE .

    SEMICOLON       reduce using rule 28 (especial -> DETERMINANTE .)
    MUL             reduce using rule 28 (especial -> DETERMINANTE .)
    DIV             reduce using rule 28 (especial -> DETERMINANTE .)
    PLUS            reduce using rule 28 (especial -> DETERMINANTE .)
    MINUS           reduce using rule 28 (especial -> DETERMINANTE .)
    GT              reduce using rule 28 (especial -> DETERMINANTE .)
    LT              reduce using rule 28 (especial -> DETERMINANTE .)
    GTE             reduce using rule 28 (especial -> DETERMINANTE .)
    LTE             reduce using rule 28 (especial -> DETERMINANTE .)
    NE              reduce using rule 28 (especial -> DETERMINANTE .)
    COMPARE         reduce using rule 28 (especial -> DETERMINANTE .)
    AND             reduce using rule 28 (especial -> DETERMINANTE .)
    OR              reduce using rule 28 (especial -> DETERMINANTE .)
    RBRACKET        reduce using rule 28 (especial -> DETERMINANTE .)
    RPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    COMMA           reduce using rule 28 (especial -> DETERMINANTE .)
    TO              reduce using rule 28 (especial -> DETERMINANTE .)
    INT             reduce using rule 28 (especial -> DETERMINANTE .)
    FLOAT           reduce using rule 28 (especial -> DETERMINANTE .)
    CHAR            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEI            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEF            reduce using rule 28 (especial -> DETERMINANTE .)
    CTEC            reduce using rule 28 (especial -> DETERMINANTE .)
    CTESTRING       reduce using rule 28 (especial -> DETERMINANTE .)
    LPAREN          reduce using rule 28 (especial -> DETERMINANTE .)
    ID              reduce using rule 28 (especial -> DETERMINANTE .)


state 69

    (29) arr -> LBRACKET CTEI . RBRACKET
    (31) mat -> LBRACKET CTEI . RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI . RBRACKET LBRACKET exp RBRACKET
    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 93
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 134 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 70

    (30) arr -> LBRACKET exp . RBRACKET
    (32) mat -> LBRACKET exp . RBRACKET LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp . RBRACKET LBRACKET CTEI RBRACKET

    RBRACKET        shift and go to state 95


state 71

    (94) exp -> nexp .
    (95) exp -> nexp . OR addOperadorName nexp genera_quad_or

    RBRACKET        reduce using rule 94 (exp -> nexp .)
    RPAREN          reduce using rule 94 (exp -> nexp .)
    COMMA           reduce using rule 94 (exp -> nexp .)
    SEMICOLON       reduce using rule 94 (exp -> nexp .)
    TO              reduce using rule 94 (exp -> nexp .)
    OR              shift and go to state 96


state 72

    (102) nexp -> compexp .
    (103) nexp -> compexp . AND addOperadorName compexp genera_quad_and

    OR              reduce using rule 102 (nexp -> compexp .)
    RBRACKET        reduce using rule 102 (nexp -> compexp .)
    RPAREN          reduce using rule 102 (nexp -> compexp .)
    COMMA           reduce using rule 102 (nexp -> compexp .)
    SEMICOLON       reduce using rule 102 (nexp -> compexp .)
    TO              reduce using rule 102 (nexp -> compexp .)
    AND             shift and go to state 97


state 73

    (104) compexp -> sumexp .
    (106) compexp1 -> sumexp . GT addOperadorName sumexp compare_quad
    (107) compexp1 -> sumexp . LT addOperadorName sumexp compare_quad
    (108) compexp1 -> sumexp . GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> sumexp . LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> sumexp . NE addOperadorName sumexp compare_quad
    (111) compexp1 -> sumexp . COMPARE addOperadorName sumexp compare_quad

    AND             reduce using rule 104 (compexp -> sumexp .)
    OR              reduce using rule 104 (compexp -> sumexp .)
    RBRACKET        reduce using rule 104 (compexp -> sumexp .)
    RPAREN          reduce using rule 104 (compexp -> sumexp .)
    COMMA           reduce using rule 104 (compexp -> sumexp .)
    SEMICOLON       reduce using rule 104 (compexp -> sumexp .)
    TO              reduce using rule 104 (compexp -> sumexp .)
    GT              shift and go to state 98
    LT              shift and go to state 99
    GTE             shift and go to state 100
    LTE             shift and go to state 101
    NE              shift and go to state 102
    COMPARE         shift and go to state 103


state 74

    (105) compexp -> compexp1 . sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    sumexp                         shift and go to state 104
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 75

    (112) sumexp -> mulexp .
    (113) sumexp -> mulexp . PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> mulexp . MINUS addOperadorName mulexp genera_sum_quad

  ! shift/reduce conflict for PLUS resolved as shift
  ! shift/reduce conflict for MINUS resolved as shift
    GT              reduce using rule 112 (sumexp -> mulexp .)
    LT              reduce using rule 112 (sumexp -> mulexp .)
    GTE             reduce using rule 112 (sumexp -> mulexp .)
    LTE             reduce using rule 112 (sumexp -> mulexp .)
    NE              reduce using rule 112 (sumexp -> mulexp .)
    COMPARE         reduce using rule 112 (sumexp -> mulexp .)
    AND             reduce using rule 112 (sumexp -> mulexp .)
    OR              reduce using rule 112 (sumexp -> mulexp .)
    RBRACKET        reduce using rule 112 (sumexp -> mulexp .)
    RPAREN          reduce using rule 112 (sumexp -> mulexp .)
    COMMA           reduce using rule 112 (sumexp -> mulexp .)
    SEMICOLON       reduce using rule 112 (sumexp -> mulexp .)
    TO              reduce using rule 112 (sumexp -> mulexp .)
    CTEI            reduce using rule 112 (sumexp -> mulexp .)
    CTEF            reduce using rule 112 (sumexp -> mulexp .)
    CTEC            reduce using rule 112 (sumexp -> mulexp .)
    CTESTRING       reduce using rule 112 (sumexp -> mulexp .)
    LPAREN          reduce using rule 112 (sumexp -> mulexp .)
    ID              reduce using rule 112 (sumexp -> mulexp .)
    MUL             reduce using rule 112 (sumexp -> mulexp .)
    DIV             reduce using rule 112 (sumexp -> mulexp .)
    PLUS            shift and go to state 106
    MINUS           shift and go to state 107

  ! PLUS            [ reduce using rule 112 (sumexp -> mulexp .) ]
  ! MINUS           [ reduce using rule 112 (sumexp -> mulexp .) ]


state 76

    (121) mulexp -> pexp .
    (122) mulexp -> pexp . MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> pexp . DIV addOperadorName pexp genera_mul_quad

  ! shift/reduce conflict for MUL resolved as shift
  ! shift/reduce conflict for DIV resolved as shift
    PLUS            reduce using rule 121 (mulexp -> pexp .)
    MINUS           reduce using rule 121 (mulexp -> pexp .)
    GT              reduce using rule 121 (mulexp -> pexp .)
    LT              reduce using rule 121 (mulexp -> pexp .)
    GTE             reduce using rule 121 (mulexp -> pexp .)
    LTE             reduce using rule 121 (mulexp -> pexp .)
    NE              reduce using rule 121 (mulexp -> pexp .)
    COMPARE         reduce using rule 121 (mulexp -> pexp .)
    AND             reduce using rule 121 (mulexp -> pexp .)
    OR              reduce using rule 121 (mulexp -> pexp .)
    RBRACKET        reduce using rule 121 (mulexp -> pexp .)
    RPAREN          reduce using rule 121 (mulexp -> pexp .)
    COMMA           reduce using rule 121 (mulexp -> pexp .)
    SEMICOLON       reduce using rule 121 (mulexp -> pexp .)
    TO              reduce using rule 121 (mulexp -> pexp .)
    CTEI            reduce using rule 121 (mulexp -> pexp .)
    CTEF            reduce using rule 121 (mulexp -> pexp .)
    CTEC            reduce using rule 121 (mulexp -> pexp .)
    CTESTRING       reduce using rule 121 (mulexp -> pexp .)
    LPAREN          reduce using rule 121 (mulexp -> pexp .)
    ID              reduce using rule 121 (mulexp -> pexp .)
    MUL             shift and go to state 108
    DIV             shift and go to state 109

  ! MUL             [ reduce using rule 121 (mulexp -> pexp .) ]
  ! DIV             [ reduce using rule 121 (mulexp -> pexp .) ]


state 77

    (124) pexp -> var1 . saveId
    (132) saveId -> .

    MUL             reduce using rule 132 (saveId -> .)
    DIV             reduce using rule 132 (saveId -> .)
    PLUS            reduce using rule 132 (saveId -> .)
    MINUS           reduce using rule 132 (saveId -> .)
    GT              reduce using rule 132 (saveId -> .)
    LT              reduce using rule 132 (saveId -> .)
    GTE             reduce using rule 132 (saveId -> .)
    LTE             reduce using rule 132 (saveId -> .)
    NE              reduce using rule 132 (saveId -> .)
    COMPARE         reduce using rule 132 (saveId -> .)
    AND             reduce using rule 132 (saveId -> .)
    OR              reduce using rule 132 (saveId -> .)
    RBRACKET        reduce using rule 132 (saveId -> .)
    RPAREN          reduce using rule 132 (saveId -> .)
    COMMA           reduce using rule 132 (saveId -> .)
    SEMICOLON       reduce using rule 132 (saveId -> .)
    TO              reduce using rule 132 (saveId -> .)
    CTEI            reduce using rule 132 (saveId -> .)
    CTEF            reduce using rule 132 (saveId -> .)
    CTEC            reduce using rule 132 (saveId -> .)
    CTESTRING       reduce using rule 132 (saveId -> .)
    LPAREN          reduce using rule 132 (saveId -> .)
    ID              reduce using rule 132 (saveId -> .)

    saveId                         shift and go to state 110

state 78

    (126) pexp -> CTEF . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 111

state 79

    (127) pexp -> CTEC . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 112

state 80

    (128) pexp -> CTESTRING . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 113

state 81

    (129) pexp -> llamada .

    MUL             reduce using rule 129 (pexp -> llamada .)
    DIV             reduce using rule 129 (pexp -> llamada .)
    PLUS            reduce using rule 129 (pexp -> llamada .)
    MINUS           reduce using rule 129 (pexp -> llamada .)
    GT              reduce using rule 129 (pexp -> llamada .)
    LT              reduce using rule 129 (pexp -> llamada .)
    GTE             reduce using rule 129 (pexp -> llamada .)
    LTE             reduce using rule 129 (pexp -> llamada .)
    NE              reduce using rule 129 (pexp -> llamada .)
    COMPARE         reduce using rule 129 (pexp -> llamada .)
    AND             reduce using rule 129 (pexp -> llamada .)
    OR              reduce using rule 129 (pexp -> llamada .)
    RBRACKET        reduce using rule 129 (pexp -> llamada .)
    RPAREN          reduce using rule 129 (pexp -> llamada .)
    COMMA           reduce using rule 129 (pexp -> llamada .)
    SEMICOLON       reduce using rule 129 (pexp -> llamada .)
    TO              reduce using rule 129 (pexp -> llamada .)
    CTEI            reduce using rule 129 (pexp -> llamada .)
    CTEF            reduce using rule 129 (pexp -> llamada .)
    CTEC            reduce using rule 129 (pexp -> llamada .)
    CTESTRING       reduce using rule 129 (pexp -> llamada .)
    LPAREN          reduce using rule 129 (pexp -> llamada .)
    ID              reduce using rule 129 (pexp -> llamada .)


state 82

    (130) pexp -> LPAREN . exp RPAREN
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 114
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 83

    (15) var1 -> ID .
    (16) var1 -> ID . COMMA var1 addV
    (17) var1 -> ID . arr
    (18) var1 -> ID . arr COMMA var1 addV
    (19) var1 -> ID . mat COMMA var1 addV
    (20) var1 -> ID . mat
    (21) var1 -> ID . mat especial
    (71) llamada -> ID . LPAREN p_arg RPAREN
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

  ! shift/reduce conflict for COMMA resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
    MUL             reduce using rule 15 (var1 -> ID .)
    DIV             reduce using rule 15 (var1 -> ID .)
    PLUS            reduce using rule 15 (var1 -> ID .)
    MINUS           reduce using rule 15 (var1 -> ID .)
    GT              reduce using rule 15 (var1 -> ID .)
    LT              reduce using rule 15 (var1 -> ID .)
    GTE             reduce using rule 15 (var1 -> ID .)
    LTE             reduce using rule 15 (var1 -> ID .)
    NE              reduce using rule 15 (var1 -> ID .)
    COMPARE         reduce using rule 15 (var1 -> ID .)
    AND             reduce using rule 15 (var1 -> ID .)
    OR              reduce using rule 15 (var1 -> ID .)
    RBRACKET        reduce using rule 15 (var1 -> ID .)
    RPAREN          reduce using rule 15 (var1 -> ID .)
    SEMICOLON       reduce using rule 15 (var1 -> ID .)
    TO              reduce using rule 15 (var1 -> ID .)
    CTEI            reduce using rule 15 (var1 -> ID .)
    CTEF            reduce using rule 15 (var1 -> ID .)
    CTEC            reduce using rule 15 (var1 -> ID .)
    CTESTRING       reduce using rule 15 (var1 -> ID .)
    ID              reduce using rule 15 (var1 -> ID .)
    COMMA           shift and go to state 53
    LPAREN          shift and go to state 115
    LBRACKET        shift and go to state 56

  ! COMMA           [ reduce using rule 15 (var1 -> ID .) ]
  ! LPAREN          [ reduce using rule 15 (var1 -> ID .) ]

    arr                            shift and go to state 54
    mat                            shift and go to state 55

state 84

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY . vars statement RCURLY END
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 116
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 85

    (69) param2 -> param2 tipo param1 . addV
    (23) addV -> .

    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)

    addV                           shift and go to state 117

state 86

    (61) param1 -> ID .
    (62) param1 -> ID . COMMA var1 addV
    (63) param1 -> ID . arr
    (64) param1 -> ID . arr COMMA var1 addV
    (65) param1 -> ID . mat COMMA var1 addV
    (66) param1 -> ID . mat
    (67) param1 -> ID . mat especial
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    RPAREN          reduce using rule 61 (param1 -> ID .)
    INT             reduce using rule 61 (param1 -> ID .)
    FLOAT           reduce using rule 61 (param1 -> ID .)
    CHAR            reduce using rule 61 (param1 -> ID .)
    COMMA           shift and go to state 118
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 119
    mat                            shift and go to state 120

state 87

    (68) param1 -> empty .

    RPAREN          reduce using rule 68 (param1 -> empty .)
    INT             reduce using rule 68 (param1 -> empty .)
    FLOAT           reduce using rule 68 (param1 -> empty .)
    CHAR            reduce using rule 68 (param1 -> empty .)


state 88

    (42) function1 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RCURLY
    (69) param2 -> param2 . tipo param1 addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 121
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 89

    (43) function2 -> ID save_fun LPAREN param2 . RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (69) param2 -> param2 . tipo param1 addV
    (8) tipo -> . INT guardaTipoVar
    (9) tipo -> . FLOAT guardaTipoVar
    (10) tipo -> . CHAR guardaTipoVar

    RPAREN          shift and go to state 122
    INT             shift and go to state 28
    FLOAT           shift and go to state 29
    CHAR            shift and go to state 30

    tipo                           shift and go to state 58

state 90

    (16) var1 -> ID COMMA var1 addV .

    SEMICOLON       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MUL             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    DIV             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    PLUS            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    MINUS           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LT              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    GTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LTE             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    NE              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMPARE         reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    AND             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    OR              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RBRACKET        reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    RPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    COMMA           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    TO              reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    INT             reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEI            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEF            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTEC            reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    CTESTRING       reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    LPAREN          reduce using rule 16 (var1 -> ID COMMA var1 addV .)
    ID              reduce using rule 16 (var1 -> ID COMMA var1 addV .)


state 91

    (18) var1 -> ID arr COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 123

state 92

    (19) var1 -> ID mat COMMA var1 . addV
    (23) addV -> .

    SEMICOLON       reduce using rule 23 (addV -> .)
    MUL             reduce using rule 23 (addV -> .)
    DIV             reduce using rule 23 (addV -> .)
    PLUS            reduce using rule 23 (addV -> .)
    MINUS           reduce using rule 23 (addV -> .)
    GT              reduce using rule 23 (addV -> .)
    LT              reduce using rule 23 (addV -> .)
    GTE             reduce using rule 23 (addV -> .)
    LTE             reduce using rule 23 (addV -> .)
    NE              reduce using rule 23 (addV -> .)
    COMPARE         reduce using rule 23 (addV -> .)
    AND             reduce using rule 23 (addV -> .)
    OR              reduce using rule 23 (addV -> .)
    RBRACKET        reduce using rule 23 (addV -> .)
    RPAREN          reduce using rule 23 (addV -> .)
    COMMA           reduce using rule 23 (addV -> .)
    TO              reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)
    CTEI            reduce using rule 23 (addV -> .)
    CTEF            reduce using rule 23 (addV -> .)
    CTEC            reduce using rule 23 (addV -> .)
    CTESTRING       reduce using rule 23 (addV -> .)
    LPAREN          reduce using rule 23 (addV -> .)
    ID              reduce using rule 23 (addV -> .)

    addV                           shift and go to state 124

state 93

    (29) arr -> LBRACKET CTEI RBRACKET .
    (31) mat -> LBRACKET CTEI RBRACKET . LBRACKET CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET . LBRACKET exp RBRACKET

    COMMA           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 29 (arr -> LBRACKET CTEI RBRACKET .)
    LBRACKET        shift and go to state 125


state 94

    (125) pexp -> CTEI saveCTE .

    MUL             reduce using rule 125 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 125 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 125 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 125 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 125 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 125 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 125 (pexp -> CTEI saveCTE .)
    RBRACKET        reduce using rule 125 (pexp -> CTEI saveCTE .)
    RPAREN          reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 125 (pexp -> CTEI saveCTE .)
    SEMICOLON       reduce using rule 125 (pexp -> CTEI saveCTE .)
    TO              reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEI            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEF            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTEC            reduce using rule 125 (pexp -> CTEI saveCTE .)
    CTESTRING       reduce using rule 125 (pexp -> CTEI saveCTE .)
    LPAREN          reduce using rule 125 (pexp -> CTEI saveCTE .)
    ID              reduce using rule 125 (pexp -> CTEI saveCTE .)


state 95

    (30) arr -> LBRACKET exp RBRACKET .
    (32) mat -> LBRACKET exp RBRACKET . LBRACKET exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET . LBRACKET CTEI RBRACKET

    COMMA           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MUL             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    DIV             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LT              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    GTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LTE             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    NE              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    AND             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    OR              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    TO              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    INT             reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    ID              reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 30 (arr -> LBRACKET exp RBRACKET .)
    LBRACKET        shift and go to state 126


state 96

    (95) exp -> nexp OR . addOperadorName nexp genera_quad_or
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 127

state 97

    (103) nexp -> compexp AND . addOperadorName compexp genera_quad_and
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 128

state 98

    (106) compexp1 -> sumexp GT . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 129

state 99

    (107) compexp1 -> sumexp LT . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 130

state 100

    (108) compexp1 -> sumexp GTE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 131

state 101

    (109) compexp1 -> sumexp LTE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 132

state 102

    (110) compexp1 -> sumexp NE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 133

state 103

    (111) compexp1 -> sumexp COMPARE . addOperadorName sumexp compare_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 134

state 104

    (105) compexp -> compexp1 sumexp .

    AND             reduce using rule 105 (compexp -> compexp1 sumexp .)
    OR              reduce using rule 105 (compexp -> compexp1 sumexp .)
    RBRACKET        reduce using rule 105 (compexp -> compexp1 sumexp .)
    RPAREN          reduce using rule 105 (compexp -> compexp1 sumexp .)
    COMMA           reduce using rule 105 (compexp -> compexp1 sumexp .)
    SEMICOLON       reduce using rule 105 (compexp -> compexp1 sumexp .)
    TO              reduce using rule 105 (compexp -> compexp1 sumexp .)


state 105

    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)
    RBRACKET        reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    COMMA           reduce using rule 134 (saveCTE -> .)
    SEMICOLON       reduce using rule 134 (saveCTE -> .)
    TO              reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    CTEI            reduce using rule 134 (saveCTE -> .)
    CTEF            reduce using rule 134 (saveCTE -> .)
    CTEC            reduce using rule 134 (saveCTE -> .)
    CTESTRING       reduce using rule 134 (saveCTE -> .)
    LPAREN          reduce using rule 134 (saveCTE -> .)
    ID              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 94

state 106

    (113) sumexp -> mulexp PLUS . addOperadorName mulexp genera_sum_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 135

state 107

    (114) sumexp -> mulexp MINUS . addOperadorName mulexp genera_sum_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 136

state 108

    (122) mulexp -> pexp MUL . addOperadorName pexp genera_mul_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 137

state 109

    (123) mulexp -> pexp DIV . addOperadorName pexp genera_mul_quad
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    RBRACKET        reduce using rule 60 (addOperadorName -> .)
    RPAREN          reduce using rule 60 (addOperadorName -> .)
    COMMA           reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 138

state 110

    (124) pexp -> var1 saveId .

    MUL             reduce using rule 124 (pexp -> var1 saveId .)
    DIV             reduce using rule 124 (pexp -> var1 saveId .)
    PLUS            reduce using rule 124 (pexp -> var1 saveId .)
    MINUS           reduce using rule 124 (pexp -> var1 saveId .)
    GT              reduce using rule 124 (pexp -> var1 saveId .)
    LT              reduce using rule 124 (pexp -> var1 saveId .)
    GTE             reduce using rule 124 (pexp -> var1 saveId .)
    LTE             reduce using rule 124 (pexp -> var1 saveId .)
    NE              reduce using rule 124 (pexp -> var1 saveId .)
    COMPARE         reduce using rule 124 (pexp -> var1 saveId .)
    AND             reduce using rule 124 (pexp -> var1 saveId .)
    OR              reduce using rule 124 (pexp -> var1 saveId .)
    RBRACKET        reduce using rule 124 (pexp -> var1 saveId .)
    RPAREN          reduce using rule 124 (pexp -> var1 saveId .)
    COMMA           reduce using rule 124 (pexp -> var1 saveId .)
    SEMICOLON       reduce using rule 124 (pexp -> var1 saveId .)
    TO              reduce using rule 124 (pexp -> var1 saveId .)
    CTEI            reduce using rule 124 (pexp -> var1 saveId .)
    CTEF            reduce using rule 124 (pexp -> var1 saveId .)
    CTEC            reduce using rule 124 (pexp -> var1 saveId .)
    CTESTRING       reduce using rule 124 (pexp -> var1 saveId .)
    LPAREN          reduce using rule 124 (pexp -> var1 saveId .)
    ID              reduce using rule 124 (pexp -> var1 saveId .)


state 111

    (126) pexp -> CTEF saveCTE .

    MUL             reduce using rule 126 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 126 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 126 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 126 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 126 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 126 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 126 (pexp -> CTEF saveCTE .)
    RBRACKET        reduce using rule 126 (pexp -> CTEF saveCTE .)
    RPAREN          reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 126 (pexp -> CTEF saveCTE .)
    SEMICOLON       reduce using rule 126 (pexp -> CTEF saveCTE .)
    TO              reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEI            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEF            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTEC            reduce using rule 126 (pexp -> CTEF saveCTE .)
    CTESTRING       reduce using rule 126 (pexp -> CTEF saveCTE .)
    LPAREN          reduce using rule 126 (pexp -> CTEF saveCTE .)
    ID              reduce using rule 126 (pexp -> CTEF saveCTE .)


state 112

    (127) pexp -> CTEC saveCTE .

    MUL             reduce using rule 127 (pexp -> CTEC saveCTE .)
    DIV             reduce using rule 127 (pexp -> CTEC saveCTE .)
    PLUS            reduce using rule 127 (pexp -> CTEC saveCTE .)
    MINUS           reduce using rule 127 (pexp -> CTEC saveCTE .)
    GT              reduce using rule 127 (pexp -> CTEC saveCTE .)
    LT              reduce using rule 127 (pexp -> CTEC saveCTE .)
    GTE             reduce using rule 127 (pexp -> CTEC saveCTE .)
    LTE             reduce using rule 127 (pexp -> CTEC saveCTE .)
    NE              reduce using rule 127 (pexp -> CTEC saveCTE .)
    COMPARE         reduce using rule 127 (pexp -> CTEC saveCTE .)
    AND             reduce using rule 127 (pexp -> CTEC saveCTE .)
    OR              reduce using rule 127 (pexp -> CTEC saveCTE .)
    RBRACKET        reduce using rule 127 (pexp -> CTEC saveCTE .)
    RPAREN          reduce using rule 127 (pexp -> CTEC saveCTE .)
    COMMA           reduce using rule 127 (pexp -> CTEC saveCTE .)
    SEMICOLON       reduce using rule 127 (pexp -> CTEC saveCTE .)
    TO              reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEI            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEF            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTEC            reduce using rule 127 (pexp -> CTEC saveCTE .)
    CTESTRING       reduce using rule 127 (pexp -> CTEC saveCTE .)
    LPAREN          reduce using rule 127 (pexp -> CTEC saveCTE .)
    ID              reduce using rule 127 (pexp -> CTEC saveCTE .)


state 113

    (128) pexp -> CTESTRING saveCTE .

    MUL             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    DIV             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    PLUS            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    MINUS           reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    GT              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LT              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    GTE             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LTE             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    NE              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    COMPARE         reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    AND             reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    OR              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    RBRACKET        reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    RPAREN          reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    COMMA           reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    SEMICOLON       reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    TO              reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEI            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEF            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTEC            reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    CTESTRING       reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    LPAREN          reduce using rule 128 (pexp -> CTESTRING saveCTE .)
    ID              reduce using rule 128 (pexp -> CTESTRING saveCTE .)


state 114

    (130) pexp -> LPAREN exp . RPAREN

    RPAREN          shift and go to state 139


state 115

    (71) llamada -> ID LPAREN . p_arg RPAREN
    (72) p_arg -> . exp
    (73) p_arg -> . exp COMMA exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    p_arg                          shift and go to state 140
    exp                            shift and go to state 141
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 116

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars . statement RCURLY END
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 142
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 117

    (69) param2 -> param2 tipo param1 addV .

    RPAREN          reduce using rule 69 (param2 -> param2 tipo param1 addV .)
    INT             reduce using rule 69 (param2 -> param2 tipo param1 addV .)
    FLOAT           reduce using rule 69 (param2 -> param2 tipo param1 addV .)
    CHAR            reduce using rule 69 (param2 -> param2 tipo param1 addV .)


state 118

    (62) param1 -> ID COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    var1                           shift and go to state 158
    empty                          shift and go to state 40

state 119

    (63) param1 -> ID arr .
    (64) param1 -> ID arr . COMMA var1 addV

    RPAREN          reduce using rule 63 (param1 -> ID arr .)
    INT             reduce using rule 63 (param1 -> ID arr .)
    FLOAT           reduce using rule 63 (param1 -> ID arr .)
    CHAR            reduce using rule 63 (param1 -> ID arr .)
    COMMA           shift and go to state 159


state 120

    (65) param1 -> ID mat . COMMA var1 addV
    (66) param1 -> ID mat .
    (67) param1 -> ID mat . especial
    (26) especial -> . TRANSPUESTA
    (27) especial -> . INVERSA
    (28) especial -> . DETERMINANTE

    COMMA           shift and go to state 160
    RPAREN          reduce using rule 66 (param1 -> ID mat .)
    INT             reduce using rule 66 (param1 -> ID mat .)
    FLOAT           reduce using rule 66 (param1 -> ID mat .)
    CHAR            reduce using rule 66 (param1 -> ID mat .)
    TRANSPUESTA     shift and go to state 66
    INVERSA         shift and go to state 67
    DETERMINANTE    shift and go to state 68

    especial                       shift and go to state 161

state 121

    (42) function1 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RCURLY

    SEMICOLON       shift and go to state 162


state 122

    (43) function2 -> ID save_fun LPAREN param2 RPAREN . SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    SEMICOLON       shift and go to state 163


state 123

    (18) var1 -> ID arr COMMA var1 addV .

    SEMICOLON       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MUL             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    DIV             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    PLUS            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    MINUS           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LT              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    GTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LTE             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    NE              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMPARE         reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    AND             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    OR              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RBRACKET        reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    RPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    COMMA           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    TO              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEI            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEF            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTEC            reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    CTESTRING       reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    LPAREN          reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)
    ID              reduce using rule 18 (var1 -> ID arr COMMA var1 addV .)


state 124

    (19) var1 -> ID mat COMMA var1 addV .

    SEMICOLON       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MUL             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    DIV             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    PLUS            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    MINUS           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LT              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    GTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LTE             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    NE              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMPARE         reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    AND             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    OR              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RBRACKET        reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    RPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    COMMA           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    TO              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEI            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEF            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTEC            reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    CTESTRING       reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    LPAREN          reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)
    ID              reduce using rule 19 (var1 -> ID mat COMMA var1 addV .)


state 125

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET . CTEI RBRACKET
    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET . exp RBRACKET
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 164
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    exp                            shift and go to state 165
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 126

    (32) mat -> LBRACKET exp RBRACKET LBRACKET . exp RBRACKET
    (33) mat -> LBRACKET exp RBRACKET LBRACKET . CTEI RBRACKET
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 167
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)

    exp                            shift and go to state 166
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 127

    (95) exp -> nexp OR addOperadorName . nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    nexp                           shift and go to state 168
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 128

    (103) nexp -> compexp AND addOperadorName . compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    compexp                        shift and go to state 169
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 129

    (106) compexp1 -> sumexp GT addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 170
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 130

    (107) compexp1 -> sumexp LT addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 171
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 131

    (108) compexp1 -> sumexp GTE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 172
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 132

    (109) compexp1 -> sumexp LTE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 173
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 133

    (110) compexp1 -> sumexp NE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 174
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 134

    (111) compexp1 -> sumexp COMPARE addOperadorName . sumexp compare_quad
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    sumexp                         shift and go to state 175
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 135

    (113) sumexp -> mulexp PLUS addOperadorName . mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    mulexp                         shift and go to state 176
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 136

    (114) sumexp -> mulexp MINUS addOperadorName . mulexp genera_sum_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    mulexp                         shift and go to state 177
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 137

    (122) mulexp -> pexp MUL addOperadorName . pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    pexp                           shift and go to state 178
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 138

    (123) mulexp -> pexp DIV addOperadorName . pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

  ! shift/reduce conflict for CTEI resolved as shift
  ! shift/reduce conflict for CTEF resolved as shift
  ! shift/reduce conflict for CTEC resolved as shift
  ! shift/reduce conflict for CTESTRING resolved as shift
  ! shift/reduce conflict for LPAREN resolved as shift
  ! shift/reduce conflict for ID resolved as shift
    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RBRACKET        reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)

  ! CTEI            [ reduce using rule 131 (empty -> .) ]
  ! CTEF            [ reduce using rule 131 (empty -> .) ]
  ! CTEC            [ reduce using rule 131 (empty -> .) ]
  ! CTESTRING       [ reduce using rule 131 (empty -> .) ]
  ! LPAREN          [ reduce using rule 131 (empty -> .) ]
  ! ID              [ reduce using rule 131 (empty -> .) ]

    pexp                           shift and go to state 179
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 139

    (130) pexp -> LPAREN exp RPAREN .

    MUL             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    DIV             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    PLUS            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    MINUS           reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    GT              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LT              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    GTE             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LTE             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    NE              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    COMPARE         reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    AND             reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    OR              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    RBRACKET        reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    RPAREN          reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    COMMA           reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    SEMICOLON       reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    TO              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEI            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEF            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTEC            reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    CTESTRING       reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    LPAREN          reduce using rule 130 (pexp -> LPAREN exp RPAREN .)
    ID              reduce using rule 130 (pexp -> LPAREN exp RPAREN .)


state 140

    (71) llamada -> ID LPAREN p_arg . RPAREN

    RPAREN          shift and go to state 180


state 141

    (72) p_arg -> exp .
    (73) p_arg -> exp . COMMA exp

    RPAREN          reduce using rule 72 (p_arg -> exp .)
    COMMA           shift and go to state 181


state 142

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement . RCURLY END

    RCURLY          shift and go to state 182


state 143

    (47) statement -> statement1 . statement
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement1                     shift and go to state 143
    statement                      shift and go to state 183
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 144

    (48) statement -> empty .

    RCURLY          reduce using rule 48 (statement -> empty .)
    RETURN          reduce using rule 48 (statement -> empty .)


state 145

    (49) statement1 -> asignacion . SEMICOLON

    SEMICOLON       shift and go to state 184


state 146

    (50) statement1 -> llamada . SEMICOLON

    SEMICOLON       shift and go to state 185


state 147

    (51) statement1 -> lectura . SEMICOLON

    SEMICOLON       shift and go to state 186


state 148

    (52) statement1 -> escritura . SEMICOLON

    SEMICOLON       shift and go to state 187


state 149

    (53) statement1 -> for .

    ID              reduce using rule 53 (statement1 -> for .)
    READ            reduce using rule 53 (statement1 -> for .)
    PRINT           reduce using rule 53 (statement1 -> for .)
    FOR             reduce using rule 53 (statement1 -> for .)
    IF              reduce using rule 53 (statement1 -> for .)
    WHILE           reduce using rule 53 (statement1 -> for .)
    RCURLY          reduce using rule 53 (statement1 -> for .)
    RETURN          reduce using rule 53 (statement1 -> for .)


state 150

    (54) statement1 -> if .

    ID              reduce using rule 54 (statement1 -> if .)
    READ            reduce using rule 54 (statement1 -> if .)
    PRINT           reduce using rule 54 (statement1 -> if .)
    FOR             reduce using rule 54 (statement1 -> if .)
    IF              reduce using rule 54 (statement1 -> if .)
    WHILE           reduce using rule 54 (statement1 -> if .)
    RCURLY          reduce using rule 54 (statement1 -> if .)
    RETURN          reduce using rule 54 (statement1 -> if .)


state 151

    (55) statement1 -> while .

    ID              reduce using rule 55 (statement1 -> while .)
    READ            reduce using rule 55 (statement1 -> while .)
    PRINT           reduce using rule 55 (statement1 -> while .)
    FOR             reduce using rule 55 (statement1 -> while .)
    IF              reduce using rule 55 (statement1 -> while .)
    WHILE           reduce using rule 55 (statement1 -> while .)
    RCURLY          reduce using rule 55 (statement1 -> while .)
    RETURN          reduce using rule 55 (statement1 -> while .)


state 152

    (56) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> ID . LPAREN p_arg RPAREN
    (133) saveId2 -> .

    LPAREN          shift and go to state 115
    EQUALS          reduce using rule 133 (saveId2 -> .)
    LBRACKET        reduce using rule 133 (saveId2 -> .)

    saveId2                        shift and go to state 188

state 153

    (93) lectura -> READ . operatorRead LPAREN var1 operatorReadQuad RPAREN
    (119) operatorRead -> .

    LPAREN          reduce using rule 119 (operatorRead -> .)

    operatorRead                   shift and go to state 189

state 154

    (86) escritura -> PRINT . LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN

    LPAREN          shift and go to state 190


state 155

    (80) for -> FOR . for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (78) for_op -> .

    LPAREN          reduce using rule 78 (for_op -> .)

    for_op                         shift and go to state 191

state 156

    (75) if -> IF . LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if

    LPAREN          shift and go to state 192


state 157

    (85) while -> WHILE . while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (84) while_op -> .

    LPAREN          reduce using rule 84 (while_op -> .)

    while_op                       shift and go to state 193

state 158

    (62) param1 -> ID COMMA var1 . addV
    (23) addV -> .

    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)

    addV                           shift and go to state 194

state 159

    (64) param1 -> ID arr COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    var1                           shift and go to state 195
    empty                          shift and go to state 40

state 160

    (65) param1 -> ID mat COMMA . var1 addV
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 131 (empty -> .)
    INT             reduce using rule 131 (empty -> .)
    FLOAT           reduce using rule 131 (empty -> .)
    CHAR            reduce using rule 131 (empty -> .)

    var1                           shift and go to state 196
    empty                          shift and go to state 40

state 161

    (67) param1 -> ID mat especial .

    RPAREN          reduce using rule 67 (param1 -> ID mat especial .)
    INT             reduce using rule 67 (param1 -> ID mat especial .)
    FLOAT           reduce using rule 67 (param1 -> ID mat especial .)
    CHAR            reduce using rule 67 (param1 -> ID mat especial .)


state 162

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RCURLY

    LCURLY          shift and go to state 197


state 163

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON . LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    LCURLY          shift and go to state 198


state 164

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI . RBRACKET
    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 199
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 134 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 165

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 200


state 166

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp . RBRACKET

    RBRACKET        shift and go to state 201


state 167

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI . RBRACKET
    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

  ! shift/reduce conflict for RBRACKET resolved as shift
    RBRACKET        shift and go to state 202
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

  ! RBRACKET        [ reduce using rule 134 (saveCTE -> .) ]

    saveCTE                        shift and go to state 94

state 168

    (95) exp -> nexp OR addOperadorName nexp . genera_quad_or
    (96) genera_quad_or -> .

    RBRACKET        reduce using rule 96 (genera_quad_or -> .)
    RPAREN          reduce using rule 96 (genera_quad_or -> .)
    COMMA           reduce using rule 96 (genera_quad_or -> .)
    SEMICOLON       reduce using rule 96 (genera_quad_or -> .)
    TO              reduce using rule 96 (genera_quad_or -> .)

    genera_quad_or                 shift and go to state 203

state 169

    (103) nexp -> compexp AND addOperadorName compexp . genera_quad_and
    (97) genera_quad_and -> .

    OR              reduce using rule 97 (genera_quad_and -> .)
    RBRACKET        reduce using rule 97 (genera_quad_and -> .)
    RPAREN          reduce using rule 97 (genera_quad_and -> .)
    COMMA           reduce using rule 97 (genera_quad_and -> .)
    SEMICOLON       reduce using rule 97 (genera_quad_and -> .)
    TO              reduce using rule 97 (genera_quad_and -> .)

    genera_quad_and                shift and go to state 204

state 170

    (106) compexp1 -> sumexp GT addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 205

state 171

    (107) compexp1 -> sumexp LT addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 206

state 172

    (108) compexp1 -> sumexp GTE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 207

state 173

    (109) compexp1 -> sumexp LTE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 208

state 174

    (110) compexp1 -> sumexp NE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 209

state 175

    (111) compexp1 -> sumexp COMPARE addOperadorName sumexp . compare_quad
    (98) compare_quad -> .

    CTEI            reduce using rule 98 (compare_quad -> .)
    CTEF            reduce using rule 98 (compare_quad -> .)
    CTEC            reduce using rule 98 (compare_quad -> .)
    CTESTRING       reduce using rule 98 (compare_quad -> .)
    LPAREN          reduce using rule 98 (compare_quad -> .)
    ID              reduce using rule 98 (compare_quad -> .)
    PLUS            reduce using rule 98 (compare_quad -> .)
    MINUS           reduce using rule 98 (compare_quad -> .)
    MUL             reduce using rule 98 (compare_quad -> .)
    DIV             reduce using rule 98 (compare_quad -> .)
    AND             reduce using rule 98 (compare_quad -> .)
    OR              reduce using rule 98 (compare_quad -> .)
    RBRACKET        reduce using rule 98 (compare_quad -> .)
    RPAREN          reduce using rule 98 (compare_quad -> .)
    COMMA           reduce using rule 98 (compare_quad -> .)
    SEMICOLON       reduce using rule 98 (compare_quad -> .)
    TO              reduce using rule 98 (compare_quad -> .)

    compare_quad                   shift and go to state 210

state 176

    (113) sumexp -> mulexp PLUS addOperadorName mulexp . genera_sum_quad
    (115) genera_sum_quad -> .

    GT              reduce using rule 115 (genera_sum_quad -> .)
    LT              reduce using rule 115 (genera_sum_quad -> .)
    GTE             reduce using rule 115 (genera_sum_quad -> .)
    LTE             reduce using rule 115 (genera_sum_quad -> .)
    NE              reduce using rule 115 (genera_sum_quad -> .)
    COMPARE         reduce using rule 115 (genera_sum_quad -> .)
    AND             reduce using rule 115 (genera_sum_quad -> .)
    OR              reduce using rule 115 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 115 (genera_sum_quad -> .)
    RPAREN          reduce using rule 115 (genera_sum_quad -> .)
    COMMA           reduce using rule 115 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 115 (genera_sum_quad -> .)
    TO              reduce using rule 115 (genera_sum_quad -> .)
    CTEI            reduce using rule 115 (genera_sum_quad -> .)
    CTEF            reduce using rule 115 (genera_sum_quad -> .)
    CTEC            reduce using rule 115 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 115 (genera_sum_quad -> .)
    LPAREN          reduce using rule 115 (genera_sum_quad -> .)
    ID              reduce using rule 115 (genera_sum_quad -> .)
    PLUS            reduce using rule 115 (genera_sum_quad -> .)
    MINUS           reduce using rule 115 (genera_sum_quad -> .)
    MUL             reduce using rule 115 (genera_sum_quad -> .)
    DIV             reduce using rule 115 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 211

state 177

    (114) sumexp -> mulexp MINUS addOperadorName mulexp . genera_sum_quad
    (115) genera_sum_quad -> .

    GT              reduce using rule 115 (genera_sum_quad -> .)
    LT              reduce using rule 115 (genera_sum_quad -> .)
    GTE             reduce using rule 115 (genera_sum_quad -> .)
    LTE             reduce using rule 115 (genera_sum_quad -> .)
    NE              reduce using rule 115 (genera_sum_quad -> .)
    COMPARE         reduce using rule 115 (genera_sum_quad -> .)
    AND             reduce using rule 115 (genera_sum_quad -> .)
    OR              reduce using rule 115 (genera_sum_quad -> .)
    RBRACKET        reduce using rule 115 (genera_sum_quad -> .)
    RPAREN          reduce using rule 115 (genera_sum_quad -> .)
    COMMA           reduce using rule 115 (genera_sum_quad -> .)
    SEMICOLON       reduce using rule 115 (genera_sum_quad -> .)
    TO              reduce using rule 115 (genera_sum_quad -> .)
    CTEI            reduce using rule 115 (genera_sum_quad -> .)
    CTEF            reduce using rule 115 (genera_sum_quad -> .)
    CTEC            reduce using rule 115 (genera_sum_quad -> .)
    CTESTRING       reduce using rule 115 (genera_sum_quad -> .)
    LPAREN          reduce using rule 115 (genera_sum_quad -> .)
    ID              reduce using rule 115 (genera_sum_quad -> .)
    PLUS            reduce using rule 115 (genera_sum_quad -> .)
    MINUS           reduce using rule 115 (genera_sum_quad -> .)
    MUL             reduce using rule 115 (genera_sum_quad -> .)
    DIV             reduce using rule 115 (genera_sum_quad -> .)

    genera_sum_quad                shift and go to state 212

state 178

    (122) mulexp -> pexp MUL addOperadorName pexp . genera_mul_quad
    (116) genera_mul_quad -> .

    PLUS            reduce using rule 116 (genera_mul_quad -> .)
    MINUS           reduce using rule 116 (genera_mul_quad -> .)
    GT              reduce using rule 116 (genera_mul_quad -> .)
    LT              reduce using rule 116 (genera_mul_quad -> .)
    GTE             reduce using rule 116 (genera_mul_quad -> .)
    LTE             reduce using rule 116 (genera_mul_quad -> .)
    NE              reduce using rule 116 (genera_mul_quad -> .)
    COMPARE         reduce using rule 116 (genera_mul_quad -> .)
    AND             reduce using rule 116 (genera_mul_quad -> .)
    OR              reduce using rule 116 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 116 (genera_mul_quad -> .)
    RPAREN          reduce using rule 116 (genera_mul_quad -> .)
    COMMA           reduce using rule 116 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 116 (genera_mul_quad -> .)
    TO              reduce using rule 116 (genera_mul_quad -> .)
    CTEI            reduce using rule 116 (genera_mul_quad -> .)
    CTEF            reduce using rule 116 (genera_mul_quad -> .)
    CTEC            reduce using rule 116 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 116 (genera_mul_quad -> .)
    LPAREN          reduce using rule 116 (genera_mul_quad -> .)
    ID              reduce using rule 116 (genera_mul_quad -> .)
    MUL             reduce using rule 116 (genera_mul_quad -> .)
    DIV             reduce using rule 116 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 213

state 179

    (123) mulexp -> pexp DIV addOperadorName pexp . genera_mul_quad
    (116) genera_mul_quad -> .

    PLUS            reduce using rule 116 (genera_mul_quad -> .)
    MINUS           reduce using rule 116 (genera_mul_quad -> .)
    GT              reduce using rule 116 (genera_mul_quad -> .)
    LT              reduce using rule 116 (genera_mul_quad -> .)
    GTE             reduce using rule 116 (genera_mul_quad -> .)
    LTE             reduce using rule 116 (genera_mul_quad -> .)
    NE              reduce using rule 116 (genera_mul_quad -> .)
    COMPARE         reduce using rule 116 (genera_mul_quad -> .)
    AND             reduce using rule 116 (genera_mul_quad -> .)
    OR              reduce using rule 116 (genera_mul_quad -> .)
    RBRACKET        reduce using rule 116 (genera_mul_quad -> .)
    RPAREN          reduce using rule 116 (genera_mul_quad -> .)
    COMMA           reduce using rule 116 (genera_mul_quad -> .)
    SEMICOLON       reduce using rule 116 (genera_mul_quad -> .)
    TO              reduce using rule 116 (genera_mul_quad -> .)
    CTEI            reduce using rule 116 (genera_mul_quad -> .)
    CTEF            reduce using rule 116 (genera_mul_quad -> .)
    CTEC            reduce using rule 116 (genera_mul_quad -> .)
    CTESTRING       reduce using rule 116 (genera_mul_quad -> .)
    LPAREN          reduce using rule 116 (genera_mul_quad -> .)
    ID              reduce using rule 116 (genera_mul_quad -> .)
    MUL             reduce using rule 116 (genera_mul_quad -> .)
    DIV             reduce using rule 116 (genera_mul_quad -> .)

    genera_mul_quad                shift and go to state 214

state 180

    (71) llamada -> ID LPAREN p_arg RPAREN .

    MUL             reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    DIV             reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    PLUS            reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    MINUS           reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    GT              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    LT              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    GTE             reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    LTE             reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    NE              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    COMPARE         reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    AND             reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    OR              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    RBRACKET        reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    RPAREN          reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    COMMA           reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    SEMICOLON       reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    TO              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    CTEI            reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    CTEF            reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    CTEC            reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    CTESTRING       reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    LPAREN          reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)
    ID              reduce using rule 71 (llamada -> ID LPAREN p_arg RPAREN .)


state 181

    (73) p_arg -> exp COMMA . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 215
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 182

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY . END

    END             shift and go to state 216


state 183

    (47) statement -> statement1 statement .

    RCURLY          reduce using rule 47 (statement -> statement1 statement .)
    RETURN          reduce using rule 47 (statement -> statement1 statement .)


state 184

    (49) statement1 -> asignacion SEMICOLON .

    ID              reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    READ            reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    PRINT           reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    FOR             reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    IF              reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    WHILE           reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    RCURLY          reduce using rule 49 (statement1 -> asignacion SEMICOLON .)
    RETURN          reduce using rule 49 (statement1 -> asignacion SEMICOLON .)


state 185

    (50) statement1 -> llamada SEMICOLON .

    ID              reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    READ            reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    PRINT           reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    FOR             reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    IF              reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    WHILE           reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    RCURLY          reduce using rule 50 (statement1 -> llamada SEMICOLON .)
    RETURN          reduce using rule 50 (statement1 -> llamada SEMICOLON .)


state 186

    (51) statement1 -> lectura SEMICOLON .

    ID              reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    READ            reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    PRINT           reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    FOR             reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    IF              reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    WHILE           reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    RCURLY          reduce using rule 51 (statement1 -> lectura SEMICOLON .)
    RETURN          reduce using rule 51 (statement1 -> lectura SEMICOLON .)


state 187

    (52) statement1 -> escritura SEMICOLON .

    ID              reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    READ            reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    PRINT           reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    FOR             reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    IF              reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    WHILE           reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    RCURLY          reduce using rule 52 (statement1 -> escritura SEMICOLON .)
    RETURN          reduce using rule 52 (statement1 -> escritura SEMICOLON .)


state 188

    (56) asignacion -> ID saveId2 . EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID saveId2 . arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID saveId2 . mat EQUALS addOperadorName exp genera_quad_asignacion
    (29) arr -> . LBRACKET CTEI RBRACKET
    (30) arr -> . LBRACKET exp RBRACKET
    (31) mat -> . LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
    (32) mat -> . LBRACKET exp RBRACKET LBRACKET exp RBRACKET
    (33) mat -> . LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
    (34) mat -> . LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET

    EQUALS          shift and go to state 217
    LBRACKET        shift and go to state 56

    arr                            shift and go to state 218
    mat                            shift and go to state 219

state 189

    (93) lectura -> READ operatorRead . LPAREN var1 operatorReadQuad RPAREN

    LPAREN          shift and go to state 220


state 190

    (86) escritura -> PRINT LPAREN . operadorPrint escritura1 operatorPrintQuad RPAREN
    (117) operadorPrint -> .

    COMILLA         reduce using rule 117 (operadorPrint -> .)
    CTEI            reduce using rule 117 (operadorPrint -> .)
    CTEF            reduce using rule 117 (operadorPrint -> .)
    CTEC            reduce using rule 117 (operadorPrint -> .)
    CTESTRING       reduce using rule 117 (operadorPrint -> .)
    LPAREN          reduce using rule 117 (operadorPrint -> .)
    ID              reduce using rule 117 (operadorPrint -> .)
    RPAREN          reduce using rule 117 (operadorPrint -> .)
    COMMA           reduce using rule 117 (operadorPrint -> .)
    OR              reduce using rule 117 (operadorPrint -> .)
    AND             reduce using rule 117 (operadorPrint -> .)
    GT              reduce using rule 117 (operadorPrint -> .)
    LT              reduce using rule 117 (operadorPrint -> .)
    GTE             reduce using rule 117 (operadorPrint -> .)
    LTE             reduce using rule 117 (operadorPrint -> .)
    NE              reduce using rule 117 (operadorPrint -> .)
    COMPARE         reduce using rule 117 (operadorPrint -> .)
    PLUS            reduce using rule 117 (operadorPrint -> .)
    MINUS           reduce using rule 117 (operadorPrint -> .)
    MUL             reduce using rule 117 (operadorPrint -> .)
    DIV             reduce using rule 117 (operadorPrint -> .)

    operadorPrint                  shift and go to state 221

state 191

    (80) for -> FOR for_op . LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 222


state 192

    (75) if -> IF LPAREN . exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 223
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 193

    (85) while -> WHILE while_op . LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    LPAREN          shift and go to state 224


state 194

    (62) param1 -> ID COMMA var1 addV .

    RPAREN          reduce using rule 62 (param1 -> ID COMMA var1 addV .)
    INT             reduce using rule 62 (param1 -> ID COMMA var1 addV .)
    FLOAT           reduce using rule 62 (param1 -> ID COMMA var1 addV .)
    CHAR            reduce using rule 62 (param1 -> ID COMMA var1 addV .)


state 195

    (64) param1 -> ID arr COMMA var1 . addV
    (23) addV -> .

    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)

    addV                           shift and go to state 225

state 196

    (65) param1 -> ID mat COMMA var1 . addV
    (23) addV -> .

    RPAREN          reduce using rule 23 (addV -> .)
    INT             reduce using rule 23 (addV -> .)
    FLOAT           reduce using rule 23 (addV -> .)
    CHAR            reduce using rule 23 (addV -> .)

    addV                           shift and go to state 226

state 197

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 227
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 198

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY . vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (12) vars -> . var
    (13) vars -> . empty
    (14) var -> . VAR var2
    (131) empty -> .

    VAR             shift and go to state 12
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    vars                           shift and go to state 228
    var                            shift and go to state 9
    empty                          shift and go to state 10

state 199

    (31) mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 31 (mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET .)


state 200

    (34) mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 34 (mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET .)


state 201

    (32) mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .

    COMMA           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TRANSPUESTA     reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INVERSA         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DETERMINANTE    reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    SEMICOLON       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MUL             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    DIV             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    PLUS            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    MINUS           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LT              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    GTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LTE             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    NE              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    COMPARE         reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    AND             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    OR              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RBRACKET        reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    RPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    TO              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    INT             reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    FLOAT           reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CHAR            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEI            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEF            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTEC            reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    CTESTRING       reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    LPAREN          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    ID              reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)
    EQUALS          reduce using rule 32 (mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET .)


state 202

    (33) mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .

    COMMA           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TRANSPUESTA     reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INVERSA         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DETERMINANTE    reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    SEMICOLON       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MUL             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    DIV             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    PLUS            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    MINUS           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LT              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    GTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LTE             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    NE              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    COMPARE         reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    AND             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    OR              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RBRACKET        reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    RPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    TO              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    INT             reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    FLOAT           reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CHAR            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEI            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEF            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTEC            reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    CTESTRING       reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    LPAREN          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    ID              reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)
    EQUALS          reduce using rule 33 (mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET .)


state 203

    (95) exp -> nexp OR addOperadorName nexp genera_quad_or .

    RBRACKET        reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    RPAREN          reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    COMMA           reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    SEMICOLON       reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)
    TO              reduce using rule 95 (exp -> nexp OR addOperadorName nexp genera_quad_or .)


state 204

    (103) nexp -> compexp AND addOperadorName compexp genera_quad_and .

    OR              reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RBRACKET        reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    RPAREN          reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    COMMA           reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    SEMICOLON       reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)
    TO              reduce using rule 103 (nexp -> compexp AND addOperadorName compexp genera_quad_and .)


state 205

    (106) compexp1 -> sumexp GT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 106 (compexp1 -> sumexp GT addOperadorName sumexp compare_quad .)


state 206

    (107) compexp1 -> sumexp LT addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    ID              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    AND             reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    OR              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)
    TO              reduce using rule 107 (compexp1 -> sumexp LT addOperadorName sumexp compare_quad .)


state 207

    (108) compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 108 (compexp1 -> sumexp GTE addOperadorName sumexp compare_quad .)


state 208

    (109) compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 109 (compexp1 -> sumexp LTE addOperadorName sumexp compare_quad .)


state 209

    (110) compexp1 -> sumexp NE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 110 (compexp1 -> sumexp NE addOperadorName sumexp compare_quad .)


state 210

    (111) compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .

    CTEI            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEF            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTEC            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    CTESTRING       reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    LPAREN          reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    ID              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    PLUS            reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MINUS           reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    MUL             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    DIV             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    AND             reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    OR              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RBRACKET        reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    RPAREN          reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    COMMA           reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    SEMICOLON       reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)
    TO              reduce using rule 111 (compexp1 -> sumexp COMPARE addOperadorName sumexp compare_quad .)


state 211

    (113) sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 113 (sumexp -> mulexp PLUS addOperadorName mulexp genera_sum_quad .)


state 212

    (114) sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .

    GT              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LT              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    GTE             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LTE             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    NE              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMPARE         reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    AND             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    OR              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RBRACKET        reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    RPAREN          reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    COMMA           reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    SEMICOLON       reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    TO              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEI            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEF            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTEC            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    CTESTRING       reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    LPAREN          reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    ID              reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    PLUS            reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MINUS           reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    MUL             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)
    DIV             reduce using rule 114 (sumexp -> mulexp MINUS addOperadorName mulexp genera_sum_quad .)


state 213

    (122) mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 122 (mulexp -> pexp MUL addOperadorName pexp genera_mul_quad .)


state 214

    (123) mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .

    PLUS            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MINUS           reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GT              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LT              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    GTE             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LTE             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    NE              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMPARE         reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    AND             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    OR              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RBRACKET        reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    RPAREN          reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    COMMA           reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    SEMICOLON       reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    TO              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEI            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEF            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTEC            reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    CTESTRING       reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    LPAREN          reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    ID              reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    MUL             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)
    DIV             reduce using rule 123 (mulexp -> pexp DIV addOperadorName pexp genera_mul_quad .)


state 215

    (73) p_arg -> exp COMMA exp .

    RPAREN          reduce using rule 73 (p_arg -> exp COMMA exp .)


state 216

    (7) main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .

    $end            reduce using rule 7 (main -> MAIN save_fun LPAREN param2 RPAREN LCURLY vars statement RCURLY END .)


state 217

    (56) asignacion -> ID saveId2 EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 229

state 218

    (57) asignacion -> ID saveId2 arr . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 230


state 219

    (58) asignacion -> ID saveId2 mat . EQUALS addOperadorName exp genera_quad_asignacion

    EQUALS          shift and go to state 231


state 220

    (93) lectura -> READ operatorRead LPAREN . var1 operatorReadQuad RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (131) empty -> .

    ID              shift and go to state 39
    RPAREN          reduce using rule 131 (empty -> .)

    var1                           shift and go to state 232
    empty                          shift and go to state 40

state 221

    (86) escritura -> PRINT LPAREN operadorPrint . escritura1 operatorPrintQuad RPAREN
    (87) escritura1 -> . escritura2 COMMA escritura2
    (88) escritura1 -> . escritura2
    (89) escritura2 -> . COMILLA CTESTRING COMILLA
    (90) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (91) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (92) escritura2 -> . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    COMILLA         shift and go to state 235
    CTEI            shift and go to state 236
    CTEF            shift and go to state 237
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    COMMA           reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    escritura1                     shift and go to state 233
    escritura2                     shift and go to state 234
    exp                            shift and go to state 238
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 222

    (80) for -> FOR for_op LPAREN . for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (81) for1 -> . FROM asignacion TO exp

    FROM            shift and go to state 240

    for1                           shift and go to state 239

state 223

    (75) if -> IF LPAREN exp . RPAREN if_quad LCURLY statement RCURLY else end_if

    RPAREN          shift and go to state 241


state 224

    (85) while -> WHILE while_op LPAREN . exp RPAREN while_quad LCURLY statement RCURLY loop_end
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 242
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 225

    (64) param1 -> ID arr COMMA var1 addV .

    RPAREN          reduce using rule 64 (param1 -> ID arr COMMA var1 addV .)
    INT             reduce using rule 64 (param1 -> ID arr COMMA var1 addV .)
    FLOAT           reduce using rule 64 (param1 -> ID arr COMMA var1 addV .)
    CHAR            reduce using rule 64 (param1 -> ID arr COMMA var1 addV .)


state 226

    (65) param1 -> ID mat COMMA var1 addV .

    RPAREN          reduce using rule 65 (param1 -> ID mat COMMA var1 addV .)
    INT             reduce using rule 65 (param1 -> ID mat COMMA var1 addV .)
    FLOAT           reduce using rule 65 (param1 -> ID mat COMMA var1 addV .)
    CHAR            reduce using rule 65 (param1 -> ID mat COMMA var1 addV .)


state 227

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 243
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 228

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars . statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RETURN          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 244
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 229

    (56) asignacion -> ID saveId2 EQUALS addOperadorName . exp genera_quad_asignacion
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp                            shift and go to state 245
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 230

    (57) asignacion -> ID saveId2 arr EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 246

state 231

    (58) asignacion -> ID saveId2 mat EQUALS . addOperadorName exp genera_quad_asignacion
    (60) addOperadorName -> .

    CTEI            reduce using rule 60 (addOperadorName -> .)
    CTEF            reduce using rule 60 (addOperadorName -> .)
    CTEC            reduce using rule 60 (addOperadorName -> .)
    CTESTRING       reduce using rule 60 (addOperadorName -> .)
    LPAREN          reduce using rule 60 (addOperadorName -> .)
    ID              reduce using rule 60 (addOperadorName -> .)
    OR              reduce using rule 60 (addOperadorName -> .)
    AND             reduce using rule 60 (addOperadorName -> .)
    GT              reduce using rule 60 (addOperadorName -> .)
    LT              reduce using rule 60 (addOperadorName -> .)
    GTE             reduce using rule 60 (addOperadorName -> .)
    LTE             reduce using rule 60 (addOperadorName -> .)
    NE              reduce using rule 60 (addOperadorName -> .)
    COMPARE         reduce using rule 60 (addOperadorName -> .)
    PLUS            reduce using rule 60 (addOperadorName -> .)
    MINUS           reduce using rule 60 (addOperadorName -> .)
    MUL             reduce using rule 60 (addOperadorName -> .)
    DIV             reduce using rule 60 (addOperadorName -> .)
    SEMICOLON       reduce using rule 60 (addOperadorName -> .)
    TO              reduce using rule 60 (addOperadorName -> .)

    addOperadorName                shift and go to state 247

state 232

    (93) lectura -> READ operatorRead LPAREN var1 . operatorReadQuad RPAREN
    (120) operatorReadQuad -> .

    RPAREN          reduce using rule 120 (operatorReadQuad -> .)

    operatorReadQuad               shift and go to state 248

state 233

    (86) escritura -> PRINT LPAREN operadorPrint escritura1 . operatorPrintQuad RPAREN
    (118) operatorPrintQuad -> .

    RPAREN          reduce using rule 118 (operatorPrintQuad -> .)

    operatorPrintQuad              shift and go to state 249

state 234

    (87) escritura1 -> escritura2 . COMMA escritura2
    (88) escritura1 -> escritura2 .

    COMMA           shift and go to state 250
    RPAREN          reduce using rule 88 (escritura1 -> escritura2 .)


state 235

    (89) escritura2 -> COMILLA . CTESTRING COMILLA

    CTESTRING       shift and go to state 251


state 236

    (90) escritura2 -> CTEI . saveCTE operatorPrintQuad
    (125) pexp -> CTEI . saveCTE
    (134) saveCTE -> .

    COMMA           reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 252

state 237

    (91) escritura2 -> CTEF . saveCTE operatorPrintQuad
    (126) pexp -> CTEF . saveCTE
    (134) saveCTE -> .

    COMMA           reduce using rule 134 (saveCTE -> .)
    RPAREN          reduce using rule 134 (saveCTE -> .)
    MUL             reduce using rule 134 (saveCTE -> .)
    DIV             reduce using rule 134 (saveCTE -> .)
    PLUS            reduce using rule 134 (saveCTE -> .)
    MINUS           reduce using rule 134 (saveCTE -> .)
    GT              reduce using rule 134 (saveCTE -> .)
    LT              reduce using rule 134 (saveCTE -> .)
    GTE             reduce using rule 134 (saveCTE -> .)
    LTE             reduce using rule 134 (saveCTE -> .)
    NE              reduce using rule 134 (saveCTE -> .)
    COMPARE         reduce using rule 134 (saveCTE -> .)
    AND             reduce using rule 134 (saveCTE -> .)
    OR              reduce using rule 134 (saveCTE -> .)

    saveCTE                        shift and go to state 253

state 238

    (92) escritura2 -> exp .

    COMMA           reduce using rule 92 (escritura2 -> exp .)
    RPAREN          reduce using rule 92 (escritura2 -> exp .)


state 239

    (80) for -> FOR for_op LPAREN for1 . RPAREN for_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 254


state 240

    (81) for1 -> FROM . asignacion TO exp
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion

    ID              shift and go to state 256

    asignacion                     shift and go to state 255

state 241

    (75) if -> IF LPAREN exp RPAREN . if_quad LCURLY statement RCURLY else end_if
    (99) if_quad -> .

    LCURLY          reduce using rule 99 (if_quad -> .)

    if_quad                        shift and go to state 257

state 242

    (85) while -> WHILE while_op LPAREN exp . RPAREN while_quad LCURLY statement RCURLY loop_end

    RPAREN          shift and go to state 258


state 243

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RCURLY

    RCURLY          shift and go to state 259


state 244

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement . RETURN operadorReturn exp quad_return SEMICOLON RCURLY

    RETURN          shift and go to state 260


state 245

    (56) asignacion -> ID saveId2 EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 261

state 246

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName . exp genera_quad_asignacion
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp                            shift and go to state 262
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 247

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName . exp genera_quad_asignacion
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)
    TO              reduce using rule 131 (empty -> .)

    exp                            shift and go to state 263
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 248

    (93) lectura -> READ operatorRead LPAREN var1 operatorReadQuad . RPAREN

    RPAREN          shift and go to state 264


state 249

    (86) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad . RPAREN

    RPAREN          shift and go to state 265


state 250

    (87) escritura1 -> escritura2 COMMA . escritura2
    (89) escritura2 -> . COMILLA CTESTRING COMILLA
    (90) escritura2 -> . CTEI saveCTE operatorPrintQuad
    (91) escritura2 -> . CTEF saveCTE operatorPrintQuad
    (92) escritura2 -> . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    COMILLA         shift and go to state 235
    CTEI            shift and go to state 236
    CTEF            shift and go to state 237
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    escritura2                     shift and go to state 266
    exp                            shift and go to state 238
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 251

    (89) escritura2 -> COMILLA CTESTRING . COMILLA

    COMILLA         shift and go to state 267


state 252

    (90) escritura2 -> CTEI saveCTE . operatorPrintQuad
    (125) pexp -> CTEI saveCTE .
    (118) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 118 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 118 (operatorPrintQuad -> .)
    MUL             reduce using rule 125 (pexp -> CTEI saveCTE .)
    DIV             reduce using rule 125 (pexp -> CTEI saveCTE .)
    PLUS            reduce using rule 125 (pexp -> CTEI saveCTE .)
    MINUS           reduce using rule 125 (pexp -> CTEI saveCTE .)
    GT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    LT              reduce using rule 125 (pexp -> CTEI saveCTE .)
    GTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    LTE             reduce using rule 125 (pexp -> CTEI saveCTE .)
    NE              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMPARE         reduce using rule 125 (pexp -> CTEI saveCTE .)
    AND             reduce using rule 125 (pexp -> CTEI saveCTE .)
    OR              reduce using rule 125 (pexp -> CTEI saveCTE .)
    COMMA           reduce using rule 118 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 118 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 125 (pexp -> CTEI saveCTE .) ]
  ! RPAREN          [ reduce using rule 125 (pexp -> CTEI saveCTE .) ]

    operatorPrintQuad              shift and go to state 268

state 253

    (91) escritura2 -> CTEF saveCTE . operatorPrintQuad
    (126) pexp -> CTEF saveCTE .
    (118) operatorPrintQuad -> .

  ! reduce/reduce conflict for COMMA resolved using rule 118 (operatorPrintQuad -> .)
  ! reduce/reduce conflict for RPAREN resolved using rule 118 (operatorPrintQuad -> .)
    MUL             reduce using rule 126 (pexp -> CTEF saveCTE .)
    DIV             reduce using rule 126 (pexp -> CTEF saveCTE .)
    PLUS            reduce using rule 126 (pexp -> CTEF saveCTE .)
    MINUS           reduce using rule 126 (pexp -> CTEF saveCTE .)
    GT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    LT              reduce using rule 126 (pexp -> CTEF saveCTE .)
    GTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    LTE             reduce using rule 126 (pexp -> CTEF saveCTE .)
    NE              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMPARE         reduce using rule 126 (pexp -> CTEF saveCTE .)
    AND             reduce using rule 126 (pexp -> CTEF saveCTE .)
    OR              reduce using rule 126 (pexp -> CTEF saveCTE .)
    COMMA           reduce using rule 118 (operatorPrintQuad -> .)
    RPAREN          reduce using rule 118 (operatorPrintQuad -> .)

  ! COMMA           [ reduce using rule 126 (pexp -> CTEF saveCTE .) ]
  ! RPAREN          [ reduce using rule 126 (pexp -> CTEF saveCTE .) ]

    operatorPrintQuad              shift and go to state 269

state 254

    (80) for -> FOR for_op LPAREN for1 RPAREN . for_quad LCURLY statement RCURLY loop_end
    (79) for_quad -> .

    LCURLY          reduce using rule 79 (for_quad -> .)

    for_quad                       shift and go to state 270

state 255

    (81) for1 -> FROM asignacion . TO exp

    TO              shift and go to state 271


state 256

    (56) asignacion -> ID . saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> ID . saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> ID . saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (133) saveId2 -> .

    EQUALS          reduce using rule 133 (saveId2 -> .)
    LBRACKET        reduce using rule 133 (saveId2 -> .)

    saveId2                        shift and go to state 188

state 257

    (75) if -> IF LPAREN exp RPAREN if_quad . LCURLY statement RCURLY else end_if

    LCURLY          shift and go to state 272


state 258

    (85) while -> WHILE while_op LPAREN exp RPAREN . while_quad LCURLY statement RCURLY loop_end
    (83) while_quad -> .

    LCURLY          reduce using rule 83 (while_quad -> .)

    while_quad                     shift and go to state 273

state 259

    (42) function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .

    FUN             reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    MAIN            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)
    $end            reduce using rule 42 (function1 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RCURLY .)


state 260

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN . operadorReturn exp quad_return SEMICOLON RCURLY
    (45) operadorReturn -> .

    CTEI            reduce using rule 45 (operadorReturn -> .)
    CTEF            reduce using rule 45 (operadorReturn -> .)
    CTEC            reduce using rule 45 (operadorReturn -> .)
    CTESTRING       reduce using rule 45 (operadorReturn -> .)
    LPAREN          reduce using rule 45 (operadorReturn -> .)
    ID              reduce using rule 45 (operadorReturn -> .)
    SEMICOLON       reduce using rule 45 (operadorReturn -> .)
    OR              reduce using rule 45 (operadorReturn -> .)
    AND             reduce using rule 45 (operadorReturn -> .)
    GT              reduce using rule 45 (operadorReturn -> .)
    LT              reduce using rule 45 (operadorReturn -> .)
    GTE             reduce using rule 45 (operadorReturn -> .)
    LTE             reduce using rule 45 (operadorReturn -> .)
    NE              reduce using rule 45 (operadorReturn -> .)
    COMPARE         reduce using rule 45 (operadorReturn -> .)
    PLUS            reduce using rule 45 (operadorReturn -> .)
    MINUS           reduce using rule 45 (operadorReturn -> .)
    MUL             reduce using rule 45 (operadorReturn -> .)
    DIV             reduce using rule 45 (operadorReturn -> .)

    operadorReturn                 shift and go to state 274

state 261

    (56) asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 56 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 56 (asignacion -> ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion .)


state 262

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 275

state 263

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName exp . genera_quad_asignacion
    (59) genera_quad_asignacion -> .

    SEMICOLON       reduce using rule 59 (genera_quad_asignacion -> .)
    TO              reduce using rule 59 (genera_quad_asignacion -> .)

    genera_quad_asignacion         shift and go to state 276

state 264

    (93) lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .

    SEMICOLON       reduce using rule 93 (lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN .)


state 265

    (86) escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .

    SEMICOLON       reduce using rule 86 (escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN .)


state 266

    (87) escritura1 -> escritura2 COMMA escritura2 .

    RPAREN          reduce using rule 87 (escritura1 -> escritura2 COMMA escritura2 .)


state 267

    (89) escritura2 -> COMILLA CTESTRING COMILLA .

    COMMA           reduce using rule 89 (escritura2 -> COMILLA CTESTRING COMILLA .)
    RPAREN          reduce using rule 89 (escritura2 -> COMILLA CTESTRING COMILLA .)


state 268

    (90) escritura2 -> CTEI saveCTE operatorPrintQuad .

    COMMA           reduce using rule 90 (escritura2 -> CTEI saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 90 (escritura2 -> CTEI saveCTE operatorPrintQuad .)


state 269

    (91) escritura2 -> CTEF saveCTE operatorPrintQuad .

    COMMA           reduce using rule 91 (escritura2 -> CTEF saveCTE operatorPrintQuad .)
    RPAREN          reduce using rule 91 (escritura2 -> CTEF saveCTE operatorPrintQuad .)


state 270

    (80) for -> FOR for_op LPAREN for1 RPAREN for_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 277


state 271

    (81) for1 -> FROM asignacion TO . exp
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    RPAREN          reduce using rule 131 (empty -> .)

    exp                            shift and go to state 278
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 272

    (75) if -> IF LPAREN exp RPAREN if_quad LCURLY . statement RCURLY else end_if
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 279
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 273

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad . LCURLY statement RCURLY loop_end

    LCURLY          shift and go to state 280


state 274

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn . exp quad_return SEMICOLON RCURLY
    (94) exp -> . nexp
    (95) exp -> . nexp OR addOperadorName nexp genera_quad_or
    (102) nexp -> . compexp
    (103) nexp -> . compexp AND addOperadorName compexp genera_quad_and
    (104) compexp -> . sumexp
    (105) compexp -> . compexp1 sumexp
    (112) sumexp -> . mulexp
    (113) sumexp -> . mulexp PLUS addOperadorName mulexp genera_sum_quad
    (114) sumexp -> . mulexp MINUS addOperadorName mulexp genera_sum_quad
    (106) compexp1 -> . sumexp GT addOperadorName sumexp compare_quad
    (107) compexp1 -> . sumexp LT addOperadorName sumexp compare_quad
    (108) compexp1 -> . sumexp GTE addOperadorName sumexp compare_quad
    (109) compexp1 -> . sumexp LTE addOperadorName sumexp compare_quad
    (110) compexp1 -> . sumexp NE addOperadorName sumexp compare_quad
    (111) compexp1 -> . sumexp COMPARE addOperadorName sumexp compare_quad
    (121) mulexp -> . pexp
    (122) mulexp -> . pexp MUL addOperadorName pexp genera_mul_quad
    (123) mulexp -> . pexp DIV addOperadorName pexp genera_mul_quad
    (124) pexp -> . var1 saveId
    (125) pexp -> . CTEI saveCTE
    (126) pexp -> . CTEF saveCTE
    (127) pexp -> . CTEC saveCTE
    (128) pexp -> . CTESTRING saveCTE
    (129) pexp -> . llamada
    (130) pexp -> . LPAREN exp RPAREN
    (15) var1 -> . ID
    (16) var1 -> . ID COMMA var1 addV
    (17) var1 -> . ID arr
    (18) var1 -> . ID arr COMMA var1 addV
    (19) var1 -> . ID mat COMMA var1 addV
    (20) var1 -> . ID mat
    (21) var1 -> . ID mat especial
    (22) var1 -> . empty
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (131) empty -> .

    CTEI            shift and go to state 105
    CTEF            shift and go to state 78
    CTEC            shift and go to state 79
    CTESTRING       shift and go to state 80
    LPAREN          shift and go to state 82
    ID              shift and go to state 83
    MUL             reduce using rule 131 (empty -> .)
    DIV             reduce using rule 131 (empty -> .)
    PLUS            reduce using rule 131 (empty -> .)
    MINUS           reduce using rule 131 (empty -> .)
    GT              reduce using rule 131 (empty -> .)
    LT              reduce using rule 131 (empty -> .)
    GTE             reduce using rule 131 (empty -> .)
    LTE             reduce using rule 131 (empty -> .)
    NE              reduce using rule 131 (empty -> .)
    COMPARE         reduce using rule 131 (empty -> .)
    AND             reduce using rule 131 (empty -> .)
    OR              reduce using rule 131 (empty -> .)
    SEMICOLON       reduce using rule 131 (empty -> .)

    exp                            shift and go to state 281
    nexp                           shift and go to state 71
    compexp                        shift and go to state 72
    sumexp                         shift and go to state 73
    compexp1                       shift and go to state 74
    mulexp                         shift and go to state 75
    pexp                           shift and go to state 76
    var1                           shift and go to state 77
    llamada                        shift and go to state 81
    empty                          shift and go to state 40

state 275

    (57) asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 57 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 57 (asignacion -> ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion .)


state 276

    (58) asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .

    SEMICOLON       reduce using rule 58 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)
    TO              reduce using rule 58 (asignacion -> ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion .)


state 277

    (80) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY . statement RCURLY loop_end
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 282
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 278

    (81) for1 -> FROM asignacion TO exp .

    RPAREN          reduce using rule 81 (for1 -> FROM asignacion TO exp .)


state 279

    (75) if -> IF LPAREN exp RPAREN if_quad LCURLY statement . RCURLY else end_if

    RCURLY          shift and go to state 283


state 280

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY . statement RCURLY loop_end
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 284
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 281

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp . quad_return SEMICOLON RCURLY
    (46) quad_return -> .

    SEMICOLON       reduce using rule 46 (quad_return -> .)

    quad_return                    shift and go to state 285

state 282

    (80) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 286


state 283

    (75) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY . else end_if
    (76) else -> . ELSE else_quad LCURLY statement RCURLY
    (77) else -> . empty
    (131) empty -> .

    ELSE            shift and go to state 288
    ID              reduce using rule 131 (empty -> .)
    READ            reduce using rule 131 (empty -> .)
    PRINT           reduce using rule 131 (empty -> .)
    FOR             reduce using rule 131 (empty -> .)
    IF              reduce using rule 131 (empty -> .)
    WHILE           reduce using rule 131 (empty -> .)
    RCURLY          reduce using rule 131 (empty -> .)
    RETURN          reduce using rule 131 (empty -> .)

    else                           shift and go to state 287
    empty                          shift and go to state 289

state 284

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement . RCURLY loop_end

    RCURLY          shift and go to state 290


state 285

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return . SEMICOLON RCURLY

    SEMICOLON       shift and go to state 291


state 286

    (80) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY . loop_end
    (82) loop_end -> .

    ID              reduce using rule 82 (loop_end -> .)
    READ            reduce using rule 82 (loop_end -> .)
    PRINT           reduce using rule 82 (loop_end -> .)
    FOR             reduce using rule 82 (loop_end -> .)
    IF              reduce using rule 82 (loop_end -> .)
    WHILE           reduce using rule 82 (loop_end -> .)
    RCURLY          reduce using rule 82 (loop_end -> .)
    RETURN          reduce using rule 82 (loop_end -> .)

    loop_end                       shift and go to state 292

state 287

    (75) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else . end_if
    (100) end_if -> .

    ID              reduce using rule 100 (end_if -> .)
    READ            reduce using rule 100 (end_if -> .)
    PRINT           reduce using rule 100 (end_if -> .)
    FOR             reduce using rule 100 (end_if -> .)
    IF              reduce using rule 100 (end_if -> .)
    WHILE           reduce using rule 100 (end_if -> .)
    RCURLY          reduce using rule 100 (end_if -> .)
    RETURN          reduce using rule 100 (end_if -> .)

    end_if                         shift and go to state 293

state 288

    (76) else -> ELSE . else_quad LCURLY statement RCURLY
    (101) else_quad -> .

    LCURLY          reduce using rule 101 (else_quad -> .)

    else_quad                      shift and go to state 294

state 289

    (77) else -> empty .

    ID              reduce using rule 77 (else -> empty .)
    READ            reduce using rule 77 (else -> empty .)
    PRINT           reduce using rule 77 (else -> empty .)
    FOR             reduce using rule 77 (else -> empty .)
    IF              reduce using rule 77 (else -> empty .)
    WHILE           reduce using rule 77 (else -> empty .)
    RCURLY          reduce using rule 77 (else -> empty .)
    RETURN          reduce using rule 77 (else -> empty .)


state 290

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY . loop_end
    (82) loop_end -> .

    ID              reduce using rule 82 (loop_end -> .)
    READ            reduce using rule 82 (loop_end -> .)
    PRINT           reduce using rule 82 (loop_end -> .)
    FOR             reduce using rule 82 (loop_end -> .)
    IF              reduce using rule 82 (loop_end -> .)
    WHILE           reduce using rule 82 (loop_end -> .)
    RCURLY          reduce using rule 82 (loop_end -> .)
    RETURN          reduce using rule 82 (loop_end -> .)

    loop_end                       shift and go to state 295

state 291

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON . RCURLY

    RCURLY          shift and go to state 296


state 292

    (80) for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 80 (for -> FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end .)


state 293

    (75) if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .

    ID              reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    READ            reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    PRINT           reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    FOR             reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    IF              reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    WHILE           reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RCURLY          reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)
    RETURN          reduce using rule 75 (if -> IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if .)


state 294

    (76) else -> ELSE else_quad . LCURLY statement RCURLY

    LCURLY          shift and go to state 297


state 295

    (85) while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .

    ID              reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    READ            reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    PRINT           reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    FOR             reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    IF              reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    WHILE           reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RCURLY          reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)
    RETURN          reduce using rule 85 (while -> WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end .)


state 296

    (43) function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .

    FUN             reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    MAIN            reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)
    $end            reduce using rule 43 (function2 -> ID save_fun LPAREN param2 RPAREN SEMICOLON LCURLY vars statement RETURN operadorReturn exp quad_return SEMICOLON RCURLY .)


state 297

    (76) else -> ELSE else_quad LCURLY . statement RCURLY
    (47) statement -> . statement1 statement
    (48) statement -> . empty
    (49) statement1 -> . asignacion SEMICOLON
    (50) statement1 -> . llamada SEMICOLON
    (51) statement1 -> . lectura SEMICOLON
    (52) statement1 -> . escritura SEMICOLON
    (53) statement1 -> . for
    (54) statement1 -> . if
    (55) statement1 -> . while
    (131) empty -> .
    (56) asignacion -> . ID saveId2 EQUALS addOperadorName exp genera_quad_asignacion
    (57) asignacion -> . ID saveId2 arr EQUALS addOperadorName exp genera_quad_asignacion
    (58) asignacion -> . ID saveId2 mat EQUALS addOperadorName exp genera_quad_asignacion
    (71) llamada -> . ID LPAREN p_arg RPAREN
    (93) lectura -> . READ operatorRead LPAREN var1 operatorReadQuad RPAREN
    (86) escritura -> . PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
    (80) for -> . FOR for_op LPAREN for1 RPAREN for_quad LCURLY statement RCURLY loop_end
    (75) if -> . IF LPAREN exp RPAREN if_quad LCURLY statement RCURLY else end_if
    (85) while -> . WHILE while_op LPAREN exp RPAREN while_quad LCURLY statement RCURLY loop_end

    RCURLY          reduce using rule 131 (empty -> .)
    ID              shift and go to state 152
    READ            shift and go to state 153
    PRINT           shift and go to state 154
    FOR             shift and go to state 155
    IF              shift and go to state 156
    WHILE           shift and go to state 157

    statement                      shift and go to state 298
    statement1                     shift and go to state 143
    empty                          shift and go to state 144
    asignacion                     shift and go to state 145
    llamada                        shift and go to state 146
    lectura                        shift and go to state 147
    escritura                      shift and go to state 148
    for                            shift and go to state 149
    if                             shift and go to state 150
    while                          shift and go to state 151

state 298

    (76) else -> ELSE else_quad LCURLY statement . RCURLY

    RCURLY          shift and go to state 299


state 299

    (76) else -> ELSE else_quad LCURLY statement RCURLY .

    ID              reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    READ            reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    PRINT           reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    FOR             reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    IF              reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    WHILE           reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RCURLY          reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)
    RETURN          reduce using rule 76 (else -> ELSE else_quad LCURLY statement RCURLY .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for MAIN in state 5 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 39 resolved as shift
WARNING: shift/reduce conflict for ID in state 53 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 54 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 55 resolved as shift
WARNING: shift/reduce conflict for ID in state 63 resolved as shift
WARNING: shift/reduce conflict for ID in state 64 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 69 resolved as shift
WARNING: shift/reduce conflict for PLUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MINUS in state 75 resolved as shift
WARNING: shift/reduce conflict for MUL in state 76 resolved as shift
WARNING: shift/reduce conflict for DIV in state 76 resolved as shift
WARNING: shift/reduce conflict for COMMA in state 83 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 83 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 129 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 129 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 129 resolved as shift
WARNING: shift/reduce conflict for ID in state 129 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 130 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 130 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 130 resolved as shift
WARNING: shift/reduce conflict for ID in state 130 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 131 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 131 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 131 resolved as shift
WARNING: shift/reduce conflict for ID in state 131 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 132 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 132 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 132 resolved as shift
WARNING: shift/reduce conflict for ID in state 132 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 133 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 133 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 133 resolved as shift
WARNING: shift/reduce conflict for ID in state 133 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 134 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 134 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 134 resolved as shift
WARNING: shift/reduce conflict for ID in state 134 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 135 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 135 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 135 resolved as shift
WARNING: shift/reduce conflict for ID in state 135 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 136 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 136 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 136 resolved as shift
WARNING: shift/reduce conflict for ID in state 136 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 137 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 137 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 137 resolved as shift
WARNING: shift/reduce conflict for ID in state 137 resolved as shift
WARNING: shift/reduce conflict for CTEI in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEF in state 138 resolved as shift
WARNING: shift/reduce conflict for CTEC in state 138 resolved as shift
WARNING: shift/reduce conflict for CTESTRING in state 138 resolved as shift
WARNING: shift/reduce conflict for LPAREN in state 138 resolved as shift
WARNING: shift/reduce conflict for ID in state 138 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 164 resolved as shift
WARNING: shift/reduce conflict for RBRACKET in state 167 resolved as shift
WARNING: reduce/reduce conflict in state 252 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEI saveCTE) in state 252
WARNING: reduce/reduce conflict in state 253 resolved using rule (operatorPrintQuad -> <empty>)
WARNING: rejected rule (pexp -> CTEF saveCTE) in state 253
