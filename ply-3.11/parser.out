Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> programa
Rule 1     programa -> PROGRAM ID SEMICOLON addP programa1
Rule 2     addP -> <empty>
Rule 3     programa1 -> vars modules programa2
Rule 4     programa1 -> vars modules
Rule 5     programa1 -> programa2
Rule 6     programa2 -> main
Rule 7     main -> MAIN LPAREN vars2 RPAREN LCURLY vars statement RCURLY END
Rule 8     tipo -> INT guardaTipoVar
Rule 9     tipo -> FLOAT guardaTipoVar
Rule 10    tipo -> CHAR guardaTipoVar
Rule 11    guardaTipoVar -> <empty>
Rule 12    vars -> var
Rule 13    vars -> empty
Rule 14    var -> VAR var2
Rule 15    var1 -> ID
Rule 16    var1 -> ID COMMA var1 addV
Rule 17    var1 -> ID arr
Rule 18    var1 -> ID arr COMMA var1 addV
Rule 19    var1 -> ID mat COMMA var1 addV
Rule 20    var1 -> ID mat
Rule 21    var1 -> ID mat especial
Rule 22    var1 -> empty
Rule 23    addV -> <empty>
Rule 24    addVartoStack -> <empty>
Rule 25    var2 -> var2 tipo var1 SEMICOLON addV
Rule 26    var2 -> empty
Rule 27    especial -> TRANSPUESTA
Rule 28    especial -> INVERSA
Rule 29    especial -> DETERMINANTE
Rule 30    arr -> LBRACKET CTEI RBRACKET
Rule 31    arr -> LBRACKET exp RBRACKET
Rule 32    mat -> LBRACKET CTEI RBRACKET LBRACKET CTEI RBRACKET
Rule 33    mat -> LBRACKET exp RBRACKET LBRACKET exp RBRACKET
Rule 34    mat -> LBRACKET exp RBRACKET LBRACKET CTEI RBRACKET
Rule 35    mat -> LBRACKET CTEI RBRACKET LBRACKET exp RBRACKET
Rule 36    modules -> function modules
Rule 37    modules -> empty
Rule 38    save_fun -> <empty>
Rule 39    function -> FUN VOID function1
Rule 40    function -> FUN INT function2
Rule 41    function -> FUN CHAR function2
Rule 42    function -> FUN FLOAT function2
Rule 43    function1 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RCURLY
Rule 44    function2 -> ID save_fun LPAREN param RPAREN SEMICOLON LCURLY vars statement RETURN exp SEMICOLON RCURLY
Rule 45    statement -> statement1 statement
Rule 46    statement -> empty
Rule 47    statement1 -> asignacion SEMICOLON
Rule 48    statement1 -> llamada SEMICOLON
Rule 49    statement1 -> lectura SEMICOLON
Rule 50    statement1 -> escritura SEMICOLON
Rule 51    statement1 -> for
Rule 52    statement1 -> if
Rule 53    statement1 -> while
Rule 54    asignacion -> ID EQUALS addOperadorName exp genera_quad_asignacion
Rule 55    asignacion -> ID arr EQUALS addOperadorName exp genera_quad_asignacion
Rule 56    asignacion -> ID mat EQUALS addOperadorName exp genera_quad_asignacion
Rule 57    genera_quad_asignacion -> <empty>
Rule 58    addOperadorName -> <empty>
Rule 59    param -> tipo param1
Rule 60    param -> empty
Rule 61    param1 -> ID
Rule 62    param1 -> ID COMMA param1
Rule 63    param1 -> empty
Rule 64    llamada -> ID LPAREN exp RPAREN
Rule 65    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY
Rule 66    if -> IF LPAREN exp RPAREN LCURLY statement RCURLY else
Rule 67    else -> ELSE LCURLY statement RCURLY
Rule 68    else -> empty
Rule 69    for -> FOR LPAREN for1 RPAREN LCURLY statement RCURLY
Rule 70    for1 -> FROM asignacion TO exp
Rule 71    while -> WHILE LPAREN exp RPAREN LCURLY statement RCURLY
Rule 72    escritura -> PRINT LPAREN operadorPrint escritura1 operatorPrintQuad RPAREN
Rule 73    escritura1 -> escritura2 COMMA escritura2
Rule 74    escritura1 -> escritura2
Rule 75    escritura2 -> COMILLA CTESTRING COMILLA
Rule 76    escritura2 -> CTEI saveCTE operatorPrintQuad
Rule 77    escritura2 -> CTEF saveCTE operatorPrintQuad
Rule 78    escritura2 -> exp
Rule 79    lectura -> READ operatorRead LPAREN var1 operatorReadQuad RPAREN
Rule 80    exp -> nexp genera_quad_or
Rule 81    exp -> nexp genera_quad_or OR addOperadorName saveOperator nexp
Rule 82    genera_quad_or -> <empty>
Rule 83    genera_quad_and -> <empty>
Rule 84    compare_quad -> <empty>
Rule 85    if_quad -> <empty>
Rule 86    nexp -> compexp genera_quad_and
Rule 87    nexp -> compexp genera_quad_and AND addOperadorName saveOperator compexp
Rule 88    compexp -> sumexp compare_quad
Rule 89    compexp -> compexp1 compare_quad sumexp
Rule 90    compexp1 -> sumexp GT addOperadorName saveOperator sumexp
Rule 91    compexp1 -> sumexp LT addOperadorName saveOperator sumexp
Rule 92    compexp1 -> sumexp GTE addOperadorName saveOperator sumexp
Rule 93    compexp1 -> sumexp LTE addOperadorName saveOperator sumexp
Rule 94    compexp1 -> sumexp NE addOperadorName saveOperator sumexp
Rule 95    compexp1 -> sumexp COMPARE addOperadorName saveOperator sumexp
Rule 96    sumexp -> mulexp genera_sum_quad
Rule 97    sumexp -> mulexp genera_sum_quad PLUS addOperadorName saveOperator mulexp
Rule 98    sumexp -> mulexp genera_sum_quad MINUS addOperadorName saveOperator mulexp
Rule 99    genera_sum_quad -> <empty>
Rule 100   genera_mul_quad -> <empty>
Rule 101   operadorPrint -> <empty>
Rule 102   operatorPrintQuad -> <empty>
Rule 103   operatorRead -> <empty>
Rule 104   operatorReadQuad -> <empty>
Rule 105   mulexp -> pexp genera_mul_quad
Rule 106   mulexp -> pexp genera_mul_quad MUL addOperadorName saveOperator pexp
Rule 107   mulexp -> pexp genera_mul_quad DIV addOperadorName saveOperator pexp
Rule 108   pexp -> var1 saveId
Rule 109   pexp -> CTEI saveCTE
Rule 110   pexp -> CTEF saveCTE
Rule 111   pexp -> CTEC saveCTE
Rule 112   pexp -> CTESTRING saveCTE
Rule 113   pexp -> llamada
Rule 114   pexp -> LPAREN exp RPAREN
Rule 115   empty -> <empty>
Rule 116   saveId -> <empty>
Rule 117   saveCTE -> <empty>
Rule 118   saveOperator -> <empty>

Terminals, with rules where they appear

AND                  : 87
CHAR                 : 10 41
COMILLA              : 75 75
COMMA                : 16 18 19 62 73
COMPARE              : 95
CTEC                 : 111
CTEF                 : 77 110
CTEI                 : 30 32 32 34 35 76 109
CTESTRING            : 75 112
DETERMINANTE         : 29
DIV                  : 107
ELSE                 : 67
END                  : 7
EQUALS               : 54 55 56
FLOAT                : 9 42
FOR                  : 69
FROM                 : 70
FUN                  : 39 40 41 42
GT                   : 90
GTE                  : 92
ID                   : 1 15 16 17 18 19 20 21 43 44 54 55 56 61 62 64
IF                   : 65 66
INT                  : 8 40
INVERSA              : 28
LBRACKET             : 30 31 32 32 33 33 34 34 35 35
LCURLY               : 7 43 44 65 66 67 69 71
LPAREN               : 7 43 44 64 65 66 69 71 72 79 114
LT                   : 91
LTE                  : 93
MAIN                 : 7
MINUS                : 98
MUL                  : 106
NE                   : 94
OR                   : 81
PLUS                 : 97
PRINT                : 72
PROGRAM              : 1
RBRACKET             : 30 31 32 32 33 33 34 34 35 35
RCURLY               : 7 43 44 65 66 67 69 71
READ                 : 79
RETURN               : 44
RPAREN               : 7 43 44 64 65 66 69 71 72 79 114
SEMICOLON            : 1 25 43 44 44 47 48 49 50
TO                   : 70
TRANSPUESTA          : 27
VAR                  : 14
VOID                 : 39
WHILE                : 71
error                : 

Nonterminals, with rules where they appear

addOperadorName      : 54 55 56 81 87 90 91 92 93 94 95 97 98 106 107
addP                 : 1
addV                 : 16 18 19 25
addVartoStack        : 
arr                  : 17 18 55
asignacion           : 47 70
compare_quad         : 88 89
compexp              : 86 87 87
compexp1             : 89
else                 : 66
empty                : 13 22 26 37 46 60 63 68
escritura            : 50
escritura1           : 72
escritura2           : 73 73 74
especial             : 21
exp                  : 31 33 33 34 35 44 54 55 56 64 65 66 70 71 78 114
for                  : 51
for1                 : 69
function             : 36
function1            : 39
function2            : 40 41 42
genera_mul_quad      : 105 106 107
genera_quad_and      : 86 87
genera_quad_asignacion : 54 55 56
genera_quad_or       : 80 81
genera_sum_quad      : 96 97 98
guardaTipoVar        : 8 9 10
if                   : 52
if_quad              : 
lectura              : 49
llamada              : 48 113
main                 : 6
mat                  : 19 20 21 56
modules              : 3 4 36
mulexp               : 96 97 97 98 98
nexp                 : 80 81 81
operadorPrint        : 72
operatorPrintQuad    : 72 76 77
operatorRead         : 79
operatorReadQuad     : 79
param                : 43 44
param1               : 59 62
pexp                 : 105 106 106 107 107
programa             : 0
programa1            : 1
programa2            : 3 5
saveCTE              : 76 77 109 110 111 112
saveId               : 108
saveOperator         : 81 87 90 91 92 93 94 95 97 98 106 107
save_fun             : 43 44
statement            : 7 43 44 45 65 66 67 69 71
statement1           : 45
sumexp               : 88 89 90 90 91 91 92 92 93 93 94 94 95 95
tipo                 : 25 59
var                  : 12
var1                 : 16 18 19 25 79 108
var2                 : 14 25
vars                 : 3 4 7 43 44
vars2                : 7
while                : 53

